::: {.content-visible when-profile="fr"}

# 3️⃣ Adopter les standards communautaires

## Les _cookiecutters_

En `Python`, il existe des modèles de structure de projets :  
les [`cookiecutters`](https://cookiecutter.readthedocs.io/en/stable/).  
Il s'agit de modèles d’arborescences de fichiers (fichiers `Python` mais également tout  
type de fichiers) proposés par la communauté et téléchargeables comme point  
de départ d’un projet.

L’idée de [`cookiecutter`](https://cookiecutter.readthedocs.io/en/stable/) est de proposer des _templates_ que l’on utilise pour **initialiser** un projet, afin de bâtir à l’avance une structure évolutive.  
On va s’inspirer de la structure du [_template datascience_](https://drivendata.github.io/cookiecutter-data-science/)  
développé par la communauté.  
La syntaxe à utiliser dans ce cas est la suivante :

```bash
$ pip install cookiecutter
$ cookiecutter https://github.com/drivendata/cookiecutter-data-science
```

Le modèle est personnalisable, notamment pour faciliter l’interaction  
avec un système de stockage distant. L’arborescence générée  
est assez massive pour permettre une grande diversité de projets. Il  
n’est souvent pas nécessaire d’avoir toutes les composantes du `cookiecutter`.

<details>
<summary>Structure complète générée par le cookiecutter data science</summary>

:::

::: {.content-visible when-profile="en"}

# 3️⃣ Adopt Community Standards

## _Cookiecutters_

In `Python`, there are standardized project structure templates:  
called [`cookiecutters`](https://cookiecutter.readthedocs.io/en/stable/).  
These are community-maintained templates for project directory trees  
(`.py` files as well as documentation, config, etc.) that can be used  
as a starting point.

The idea behind [`cookiecutter`](https://cookiecutter.readthedocs.io/en/stable/) is to offer ready-to-use templates to **initialize** a project  
with a scalable structure.  
We'll follow the structure proposed by the [_cookiecutter data science_](https://drivendata.github.io/cookiecutter-data-science/)  
community template.  
The syntax to use is:

```bash
$ pip install cookiecutter
$ cookiecutter https://github.com/drivendata/cookiecutter-data-science
```

The template is customizable, particularly for integrating with remote storage systems.  
The generated directory tree is large enough to support diverse project types —  
you typically won't need every single component included by default.

<details>
<summary>Full structure generated by the cookiecutter data science template</summary>

:::


```
├── LICENSE
├── Makefile           <- Makefile with commands like `make data` or `make train`
├── README.md          <- The top-level README for developers using this project.
├── data
│   ├── external       <- Data from third party sources.
│   ├── interim        <- Intermediate data that has been transformed.
│   ├── processed      <- The final, canonical data sets for modeling.
│   └── raw            <- The original, immutable data dump.
│
├── docs               <- A default Sphinx project; see sphinx-doc.org for details
│
├── models             <- Trained and serialized models, model predictions, or model summaries
│
├── notebooks          <- Jupyter notebooks. Naming convention is a number (for ordering),
│                         the creator's initials, and a short `-` delimited description, e.g.
│                         `1.0-jqp-initial-data-exploration`.
│
├── references         <- Data dictionaries, manuals, and all other explanatory materials.
│
├── reports            <- Generated analysis as HTML, PDF, LaTeX, etc.
│   └── figures        <- Generated graphics and figures to be used in reporting
│
├── requirements.txt   <- The requirements file for reproducing the analysis environment, e.g.
│                         generated with `pip freeze > requirements.txt`
│
├── setup.py           <- Make this project pip installable with `pip install -e`
├── src                <- Source code for use in this project.
│   ├── __init__.py    <- Makes src a Python module
│   │
│   ├── data           <- Scripts to download or generate data
│   │   └── make_dataset.py
│   │
│   ├── features       <- Scripts to turn raw data into features for modeling
│   │   └── build_features.py
│   │
│   ├── models         <- Scripts to train models and then use trained models to make
│   │   │                 predictions
│   │   ├── predict_model.py
│   │   └── train_model.py
│   │
│   └── visualization  <- Scripts to create exploratory and results oriented visualizations
│       └── visualize.py
│
└── tox.ini            <- tox file with settings for running tox; see tox.readthedocs.io
```

</details>


:::: {.content-visible when-profile="fr"}

::: {.callout-note collapse="true"}

## Tests unitaires

Les tests unitaires sont des tests automatisés qui vérifient le bon fonctionnement d'une unité de code,  
comme une fonction ou une méthode.  
L'objectif est de s'assurer que chaque unité de code fonctionne correctement avant d'être intégrée dans le reste du programme.

Les tests unitaires sont utiles lorsqu'on travaille sur un code de taille conséquente  
ou lorsqu'on partage son code à d'autres personnes,  
car ils permettent de s'assurer que les modifications apportées ne créent pas de nouvelles erreurs.

En `Python`, on peut utiliser le package `unittest` pour écrire des tests unitaires.  
Voici un exemple tiré de ce [site](https://gayerie.dev/docs/python/python3/unittest.html) :


```python
# fichier test_str.py
import unittest


class ChaineDeCaractereTest(unittest.TestCase):

    def test_reversed(self):
        resultat = reversed("abcd")
        self.assertEqual("dcba", "".join(resultat))

    def test_sorted(self):
        resultat = sorted("dbca")
        self.assertEqual(['a', 'b', 'c', 'd'], resultat)

    def test_upper(self):
        resultat = "hello".upper()
        self.assertEqual("HELLO", resultat)

    def test_erreur


if __name__ == '__main__':
    unittest.main()
```

Pour vérifier que les tests fonctionnent, on exécute ce  
script depuis la ligne de commande :

```python
python3 test_str.py
.
----------------------------------------------------------------------
Ran 1 test in 0.000s

OK
```

Si on écrit des tests unitaires, il est important de les maintenir !  
Prendre du temps pour écrire des tests unitaires qui ne sont pas maintenus et donc  
ne renvoie plus de diagnostics pertinents est du temps perdu.

:::

## Transformer son projet en _package_ `Python`

Le _package_ est la structure aboutie d'un projet `Python` autosuffisant.  
Il s'agit d'une manière formelle de contrôler  
la reproductibilité d'un projet car :

- le _package_ assure une gestion cohérente des dépendances  
- le _package_ offre une certaine structure pour la documentation  
- le _package_ facilite la réutilisation du code  
- le _package_ permet des économies d'échelle, car on peut réutiliser  
  l'un des packages pour un autre projet  
- le _package_ facilite le debuggage car il est  
  plus facile d'identifier une erreur quand elle est dans un package  
- ...

En `Python`, le _package_ est une structure peu contraignante si on  
a adopté les bonnes pratiques de structuration de projet.  
À partir de la structure modulaire précédemment évoquée, il n'y a qu'un pas  
vers le package : l'ajout d'un fichier `pyproject.toml` qui contrôle  
la construction du _package_ ([voir ici](https://py-pkgs.org/03-how-to-package-a-python)).

Il existe plusieurs outils pour installer un package dans le système à  
partir d'une structure de fichiers locale. Les deux principaux sont :

- [`setuptools`](https://pypi.org/project/setuptools/)  
- [`poetry`](https://python-poetry.org/)

Le package fait la transition entre un code modulaire et un code portable,  
concept sur lequel nous reviendrons dans le prochain chapitre.

::::

:::: {.content-visible when-profile="en"}

::: {.callout-note collapse="true"}

## Unit Tests

Unit tests are automated tests that verify the proper functioning of a unit of code,  
such as a function or a method.  
The goal is to ensure that each unit of code works correctly before being integrated into the rest of the program.

Unit tests are helpful when working with large codebases  
or when sharing code with others,  
because they ensure that modifications don't introduce new bugs.

In `Python`, the `unittest` package can be used to write unit tests.  
Here's an example from [this site](https://gayerie.dev/docs/python/python3/unittest.html):

```python
# file test_str.py
import unittest


class StringTest(unittest.TestCase):

    def test_reversed(self):
        result = reversed("abcd")
        self.assertEqual("dcba", "".join(result))

    def test_sorted(self):
        result = sorted("dbca")
        self.assertEqual(['a', 'b', 'c', 'd'], result)

    def test_upper(self):
        result = "hello".upper()
        self.assertEqual("HELLO", result)

    def test_erreur


if __name__ == '__main__':
    unittest.main()
```

To verify that the tests work, run this  
script from the command line:

```python
python3 test_str.py
.
----------------------------------------------------------------------
Ran 1 test in 0.000s

OK
```

If you write unit tests, it’s important to maintain them!  
Spending time writing unit tests that are no longer maintained  
and no longer provide useful diagnostics is time wasted.

:::

## Turning Your Project Into a `Python` _Package_

A _package_ is the finalized structure of a self-contained `Python` project.  
It provides a formal way to ensure  
the reproducibility of a project because:

- the _package_ handles dependencies consistently  
- the _package_ offers built-in documentation structure  
- the _package_ facilitates code reuse  
- the _package_ enables scalability—you can reuse a package across projects  
- the _package_ simplifies debugging since it's easier to pinpoint errors in a package  
- ...

In `Python`, packages are relatively easy to set up if you follow good project structuring practices.  
From the previously discussed modular structure, it’s a short step  
to a package: simply add a `pyproject.toml` file to control  
how the _package_ is built ([see here](https://py-pkgs.org/03-how-to-package-a-python)).

There are several tools for installing a package locally from a file structure. The two most common are:

- [`setuptools`](https://pypi.org/project/setuptools/)  
- [`poetry`](https://python-poetry.org/)

The package bridges the gap between modular and portable code,  
a topic we’ll revisit in the next chapter.

::::
