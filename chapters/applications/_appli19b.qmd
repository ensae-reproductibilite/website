::: {.application}
## Application 19b : Mettre √† jour la version en production

Jusqu'√† maintenant, on a utilis√© le tag *latest* pour d√©finir la version de notre application. En pratique, lorsqu'on passe de la phase de d√©veloppement √† celle de production, on a plut√¥t envie de versionner proprement les versions de l'application afin de savoir ce qui est d√©ploy√©. On va pour cela utiliser les ***tags*** avec `Git`, qui vont se propager au nommage de l'image `Docker`.

- Modifier le fichier de CI `prod.yml` pour assurer la propagation des tags.

<details>
<summary>

Fichier `.github/workflows/prod.yml`

</summary>

  ```{.yaml filename=".github/workflows/prod.yml"}
  name: Construction image Docker

  on:
    push:
      branches:
        - main
        - dev
      tags:
        - 'v*.*.*'

  jobs:
    docker:
      runs-on: ubuntu-latest
      steps:
        -
          name: Set up QEMU
          uses: docker/setup-qemu-action@v3
        -
          name: Set up Docker Buildx
          uses: docker/setup-buildx-action@v3

        -
          name: Docker meta
          id: meta
          uses: docker/metadata-action@v5
          with:
            images: linogaliana/application #<1>

        -
          name: Login to Docker Hub
          uses: docker/login-action@v3
          with:
            username: ${{ secrets.DOCKERHUB_USERNAME }}
            password: ${{ secrets.DOCKERHUB_TOKEN }}
        -
          name: Build and push
          uses: docker/build-push-action@v5
          with:
            push: true
            tags: ${{ steps.meta.outputs.tags }}
            labels: ${{ steps.meta.outputs.labels }}
  ```
  1. Modifier ici !

</details>

- Dans le d√©p√¥t de l'application, mettre √† jour le code dans `app/main.py` pour changer un √©l√©ment de l'interface de votre documentation.
Par exemple, mettre en gras un titre.

  ```{.python filename="app/main.py"}
  app = FastAPI(
      title="D√©monstration du mod√®le de pr√©diction de survie sur le Titanic",
      description=
      "<b>Application de pr√©diction de survie sur le Titanic</b> üö¢ <br>Une version par API pour faciliter la r√©utilisation du mod√®le üöÄ" +\
          "<br><br><img src=\"https://media.vogue.fr/photos/5faac06d39c5194ff9752ec9/1:1/w_2404,h_2404,c_limit/076_CHL_126884.jpg\" width=\"200\">"
      )
  ```

- *Commit* et *push* les changements.

- _Tagger_ le commit effectu√© pr√©c√©demment et *push* le nouveau tag :

  ```{.python filename="terminal"}
  git tag v0.0.1
  git push --tags
  ```

- V√©rifier sur le d√©p√¥t `GitHub` de l'application que ce *commit* lance bien un pipeline de CI **associ√© au tag v1.0.0**. Une fois termin√©, v√©rifier sur le `DockerHub` que le tag `v0.0.1` existe bien parmi les tags disponibles de l'image.

La partie CI a correctement fonctionn√©. Int√©ressons-nous √† pr√©sent √† la partie CD.

- Sur le d√©p√¥t `GitOps`, mettre √† jour la version de l'image √† d√©ployer en production dans le fichier `deployment/deployment.yaml`

<details>
<summary>

Fichier `deployment/deployment.yaml`

</summary>

  ```{.python file="deployment/deployment.yaml" filename="deployment/deployment.yaml" source-line-numbers="19"}
  apiVersion: apps/v1
  kind: Deployment
  metadata:
    name: titanic-deployment
    labels:
      app: titanic
  spec:
    replicas: 1
    selector:
      matchLabels:
        app: titanic
    template:
      metadata:
        labels:
          app: titanic
      spec:
        containers:
        - name: titanic
          image: linogaliana/application:v0.0.1 #<1>
          ports:
          - containerPort: 8000
  ```
  1. Remplacer ici par le d√©p√¥t applicatif ad√©quat


</details>

- Apr√®s avoir _committ√©_ et _push√©_, observer dans `ArgoCD` le statut de votre application. Normalement, l'op√©rateur devrait avoir automatiquement identifi√© le changement, et mettre √† jour le d√©ploiement pour en tenir compte.

![](/argocd-waiting.png)

- V√©rifier que l'API a bien √©t√© mise √† jour.

:::


{{< checkpoint appli19b >}}

