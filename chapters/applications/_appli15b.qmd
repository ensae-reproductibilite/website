::: {.application}

## Application 15b: automatisation de l'image `Docker`

- En s'inspirant de ce [_template_](https://github.com/marketplace/actions/build-and-push-docker-images), cr√©er le fichier `.github/workflows/prod.yml` qui va *build* et *push* l'image sur le `DockerHub`. Il va √™tre n√©cessaire de changer l√©g√®rement ce mod√®le :
    + Retirer la condition restrictive sur les _commits_ pour lesquels sont lanc√©s cette automatisation. Pour cela, remplacer le contenu de `on` de sorte √† avoir

  ```{.python}
  on:
    push:
      branches:
        - main
        - dev
  ```

    + Changer le tag √† la fin pour mettre `username/application:latest`
o√π `username` est le nom d'utilisateur sur `DockerHub`;
    + Optionnel: changer le nom de l'action

- Faire un `commit` et un `push` de ces fichiers

Comme on est fier de notre travail, on va afficher √ßa avec un badge sur le
`README` _(partie optionnelle)_.

- Se rendre dans l'onglet `Actions` et cliquer sur une des actions list√©es.
- En haut √† droite, cliquer sur `...`
- S√©lectionner `Create status badge`
- R√©cup√©rer le code `Markdown` propos√©
- Copier dans votre `README.md` le code _markdown_ propos√©

<details>
<summary>
Cr√©er le badge
</summary>
![](/create-badge.png)
</details>

:::

Maintenant, il nous reste √† tester notre application dans l'espace bac √† sable
ou en local, si `Docker` est install√©.


::: {.application}

## Application 15b (partie optionnelle): Tester l'application

- Se rendre sur l'environnement bac √† sable _[Play with Docker](https://labs.play-with-docker.com)_
ou dans votre environnement `Docker` de pr√©dilection.
- R√©cup√©rer et lancer l'image :

```{.bash filename="terminal"}
docker run -it username/application:latest
```

üéâ La matrice de confusion doit s'afficher ! Vous avez grandement
facilit√© la r√©utilisation de votre image.

:::


{{< checkpoint appli15 >}}

