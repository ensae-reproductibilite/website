::: {.application}
## Application 18: Mettre √† disposition l'API (d√©ploiement manuel)

Cette partie n√©cessite d'avoir √† disposition une infrastructure _cloud_.

- Cr√©er un dossier `deployment` √† la racine du projet qui va contenir les fichiers de configuration n√©cessaires pour d√©ployer sur un cluster `Kubernetes`

- En vous inspirant de la [documentation](https://kubernetes.io/docs/concepts/workloads/controllers/deployment/#creating-a-deployment), y ajouter un premier fichier `deployment.yaml` qui va sp√©cifier la configuration du *Pod* √† lancer sur le cluster

<details>
<summary>Fichier `deployment/deployment.yaml`</summary>

```{.python}
#| filename: "deployment/deployment.yaml"
apiVersion: apps/v1
kind: Deployment
metadata:
  name: titanic-deployment
  labels:
    app: titanic
spec:
  replicas: 1
  selector:
    matchLabels:
      app: titanic
  template:
    metadata:
      labels:
        app: titanic
    spec:
      containers:
      - name: titanic
        image: votre_compte_docker_hub/application:latest
        ports:
        - containerPort: 8000
```

</details>

- En vous inspirant de la [documentation](https://kubernetes.io/fr/docs/concepts/services-networking/service/#d%C3%A9finition-d-un-service), y ajouter un second fichier `service.yaml` qui va cr√©er une ressource `Service` permettant de donner une identit√© fixe au `Pod` pr√©c√©demment cr√©√© au sein du cluster

<details>
<summary>Fichier `deployment/service.yaml`</summary>

```{.yaml filename="deployment/service.yaml"}
apiVersion: v1
kind: Service
metadata:
  name: titanic-service
spec:
  selector:
    app: titanic
  ports:
    - protocol: TCP
      port: 80
      targetPort: 8000
```
</details>

- En vous inspirant de la [documentation](https://kubernetes.io/docs/concepts/services-networking/ingress/#the-ingress-resource), y ajouter un troisi√®me fichier `ingress.yaml` qui va cr√©er une ressource `Ingress` permettant d'exposer le service via une URL en dehors du cluster

<details>
<summary>Fichier `deployment/ingress.yaml`</summary>

```{.python}
#| filename: "deployment/ingress.yaml"
apiVersion: networking.k8s.io/v1
kind: Ingress
metadata:
  name: titanic-ingress
spec:
  ingressClassName: nginx
  tls:
  - hosts:
    - votre_nom_d_application.lab.sspcloud.fr
  rules:
  - host: votre_nom_d_application.lab.sspcloud.fr
    http:
      paths:
      - path: /
        pathType: Prefix
        backend:
          service:
            name: titanic-service
            port:
              number: 80
```
1. Mettez l'URL auquel vous voulez exposer votre service. Sur le mod√®le de `titanic.lab.sspcloud.fr` (mais ne tentez pas celui-l√†, il est d√©j√† pris üòÉ)
2. Mettre cette m√™me URL ici aussi
</details>

- Appliquer ces fichiers de configuration sur le cluster : `kubectl apply -f deployment/`

- V√©rifier le bon d√©ploiement de l'application (c'est √† dire du `Pod` qui encapsule le conteneur) √† l'aide de la commande `kubectl get pods`

- Si tout a correctement fonctionn√©, vous devriez pouvoir acc√©der depuis votre navigateur √† l'API √† l'URL sp√©cifi√©e dans le fichier `deployment/ingress.yaml`. Par exemple `https://api-titanic-test.lab.sspcloud.fr/` si vous avez mis celui-ci plus t√¥t

- Explorer le *swagger* de votre API √† l'adresse `https://api-titanic-test.lab.sspcloud.fr/docs`. Il s'agit d'une page de documentation standard √† la plupart des APIs, bien utiles pour tester des requ√™tes de mani√®re interactive.

:::


{{< checkpoint appli18 >}}

