::: {.application}
## Application 19a: Automatiser la mise à disposition de l'API (déploiement continu)

- Lancer un service `ArgoCD` sur le `SSPCloud` depuis la page `Mes services` (catalogue `Automation`). Laisser
les configurations par défaut.
- Sur `GitHub`, créer un dépôt `application-deployment` qui va servir de **dépôt GitOps**, c'est à dire un dépôt qui spécifie le paramétrage du déploiement de votre application.
- Ajouter un dossier `deployment` à votre dépôt `GitOps`, dans lequel on mettra les trois fichiers de déploiement qui permettent de déployer notre application sur `Kubernetes` (`deployment.yaml`, `service.yaml`, `ingress.yaml`).
- A la racine de votre dépôt `GitOps`, créez un fichier `application.yml` avec le contenu suivant, en prenant bien soin de modifier les lignes surlignées avec les informations pertinentes :

```{.python}
#| file: "application.yaml"
#| filename: "application.yaml"
#| source-line-numbers: "8-9,13"
apiVersion: argoproj.io/v1alpha1
kind: Application
metadata:
  name: ensae-mlops
spec:
  project: default
  source:
    repoURL: https://github.com/<your_github_username>/application-deployment.git #<1>
    targetRevision: main #<2>
    path: deployment #<3>
  destination:
    server: https://kubernetes.default.svc
    namespace: user-<your_sspcloud_username> #<4>
  syncPolicy:
    automated:
      selfHeal: true
```
1. L'URL de votre dépôt `Github` {{< fa brands github >}} faisant office de dépôt `GitOps`.
2. La branche à partir de laquelle vous déployez.
3. Le nom du dossier contenant vos fichiers de déploiement `Kubernetes`.
4. Votre _namespace_ `Kubernetes`. Sur le SSPCloud, cela prend la forme `user-${username}`.

- Pousser sur `Github` le dépôt `GitOps`.
- Dans `ArgoCD`, cliquez sur `New App` puis `Edit as a YAML`. Copiez-collez le contenu de `application.yml` et cliquez sur `Create`.
- Observez dans l'interface d'`ArgoCD` le déploiement progressif des ressources nécessaires à votre application sur le cluster. Joli non ?
- Vérifiez que votre API est bien déployée en utilisant l’URL définie dans le fichier `ingress.yml`.
- Supprimer du code applicatif le dossier `deployment` puisque c'est maintenant votre dépôt de déploiement qui le contrôle.
- Indiquer dans le `README.md` que le déploiement de votre application (dont vous pouvez mettre l'URL dans le README) est contrôlé par un autre dépôt.

:::

Si cela a fonctionné, vous devriez maintenant voir votre application dans votre tableau de bord `ArgoCD`:

![](/chapters/applications/figures/argo_appli19a.png)


{{< checkpoint appli19a >}}

