[
  {
    "objectID": "index.html",
    "href": "index.html",
    "title": "Mise en production",
    "section": "",
    "text": "Un parcours de formation construit par Romain Avouac et Lino Galiana pour le parcours d’ingénieurs de la donnée de l’ENSAE.\nLes slides associées au cours sont disponibles à cette adresse et les codes sources sont sur Github ."
  },
  {
    "objectID": "index.html#cours-de-mise-en-production-de-projets-data-science",
    "href": "index.html#cours-de-mise-en-production-de-projets-data-science",
    "title": "Mise en production",
    "section": "",
    "text": "Un parcours de formation construit par Romain Avouac et Lino Galiana pour le parcours d’ingénieurs de la donnée de l’ENSAE.\nLes slides associées au cours sont disponibles à cette adresse et les codes sources sont sur Github ."
  },
  {
    "objectID": "chapters/galerie/2024/primePredict.html",
    "href": "chapters/galerie/2024/primePredict.html",
    "title": "PrimePredict",
    "section": "",
    "text": "Avec PrimePredict il est possible de calculer les primes annuelles matérielles d’assurance à partir de données fourni. Le modèle prédit à lafois le coût des dommages matériels et la fréquence des incidents matériels.\n\n\n\nReuseCC BY-NC 4.0"
  },
  {
    "objectID": "chapters/projects-architecture.html",
    "href": "chapters/projects-architecture.html",
    "title": "Structure des projets",
    "section": "",
    "text": "Dérouler les slides ci-dessous ou cliquer ici pour afficher les slides en plein écran."
  },
  {
    "objectID": "chapters/projects-architecture.html#démonstration-par-lexemple",
    "href": "chapters/projects-architecture.html#démonstration-par-lexemple",
    "title": "Structure des projets",
    "section": "Démonstration par l’exemple",
    "text": "Démonstration par l’exemple\nVoici un exemple d’organisation de projet, qui vous rappellera peut-être des souvenirs :\n├── report.qmd\n├── correlation.png\n├── data.csv\n├── data2.csv\n├── fig1.png\n├── figure 2 (copy).png\n├── report.pdf\n├── partial data.csv\n├── script.R\n└── script_final.py\nSource : eliocamp.github.io\nLa structure du projet suivante rend compliquée la compréhension du projet. Parmi les principales questions :\n\nQuelles sont les données en entrée de chaine ?\nDans quel ordre les données intermédiaires sont-elles créées ?\nQuel est l’objet des productions graphiques ?\nTous les codes sont-ils utilisés dans ce projet ?\n\nEn structurant le dossier en suivant des règles simples, par exemple en organisant le projet par des dossiers inputs, outputs, on améliore déjà grandement la lisibilité du projet\n├── README.md\n├── .gitignore\n├── data\n│   ├── raw\n│   │   ├── data.csv\n│   │   └── data2.csv\n│   └── derived\n│       └── partial data.csv\n├── src\n|   ├── script.py\n│   ├── script_final.py\n│   └── report.qmd\n└── output\n    ├── fig1.png\n    ├── figure 2 (copy).png\n    ├── figure10.png\n    ├── correlation.png\n    └── report.pdf\n\n\n\n\n\n\nNote\n\n\n\nComme Git est un prérequis, tout projet présente un fichier .gitignore (il est très important, surtout quand on manipule des données qui ne doivent pas se retrouver sur Github ou Gitlab).\nUn projet présente aussi un fichier README.md à la racine, nous reviendrons dessus.\nUn projet qui utilise l’intégration continue contiendra également des fichiers spécifiques :\n\nsi vous utilisez Gitlab, les instructions sont stockées dans le fichier gitlab-ci.yml\nsi vous utilisez Github, cela se passe dans le dossier .github/workflows\n\n\n\nEn changeant simplement le nom des fichiers, on rend la structure du projet très lisible :\n├── README.md\n├── .gitignore\n├── data\n│   ├── raw\n│   │   ├── dpe_logement_202103.csv\n│   │   └── dpe_logement_202003.csv\n│   └── derived\n│       └── dpe_logement_merged_preprocessed.csv\n├── src\n|   ├── preprocessing.py\n│   ├── generate_plots.py\n│   └── report.qmd\n└── output\n    ├── histogram_energy_diagnostic.png\n    ├── barplot_consumption_pcs.png\n    ├── correlation_matrix.png\n    └── report.pdf\nMaintenant, le type de données en entrée de chaine est clair, le lien entre les scripts, les données intermédiaires et les output est transparent."
  },
  {
    "objectID": "chapters/projects-architecture.html#vers-la-séparation-du-stockage-du-code-des-données-et-de-lenvironnement-dexécution",
    "href": "chapters/projects-architecture.html#vers-la-séparation-du-stockage-du-code-des-données-et-de-lenvironnement-dexécution",
    "title": "Structure des projets",
    "section": "Vers la séparation du stockage du code, des données et de l’environnement d’exécution",
    "text": "Vers la séparation du stockage du code, des données et de l’environnement d’exécution\nLa séparation du stockage du code et des données ainsi que de l’environnement d’exécution est importante pour plusieurs raisons.\nTout d’abord, cela permet de garantir la sécurité et l’intégrité des données. En séparant les données du code, il devient plus difficile pour n’importe qui d’accéder aux informations sensibles stockées dans les données.\nEn séparant l’environnement d’exécution, il est possible de s’assurer que le code fonctionne de manière cohérente et sans conflit avec d’autres programmes exécutés sur le même système ou n’est pas altéré par des configurations systèmes difficiles à reproduire. Cette séparation facilite également la portabilité et l’adaptation de l’application à différentes plateformes, en permettant de modifier l’environnement d’exécution sans avoir à modifier le code ou les données.\nLe prochain chapitre sera consacré à la gestion des dépendances. Il illustrera la manière dont environnement d’exécution et code d’un projet peuvent être reliés afin de créer de la portabilité.\nL’exécution d’un code peut dépendre d’éléments de configuration comme des jetons d’authentification ou des mots de passe de connexion à des services qui sont personnels. Ces éléments de configuration n’ont pas vocation à être partagés par du code et il est recommandé de les exclure du code. La meilleure manière de transformer ces configurations en paramètre est de les isoler dans un script séparé, qui n’est pas partagé, et utiliser les variables créées à cette occasion dans le reste du programme.\nLa manière privilégiée de conserver ce type d’information est le format YAML. Ce format de fichier permet de stocker des informations de manière hiérarchisée et flexible, mais de manière plus lisible que le JSON. Ce format sera transformé en dictionnaire Python ce qui permet des recherches facilitées.\nPrenons le YAML suivant :\n\n\nsecrets.yaml\n\ntoken:\n    api_insee: \"toto\"\n    api_github: \"tokengh\"\npwd:\n    base_pg: \"monmotdepasse\"\n\nL’import de ce fichier se fait avec le package yaml de la manière suivante :\nimport yaml\n\nwith open('secrets.yaml') as f:\n    secrets = yaml.safe_load(f)\n\n# utilisation du secret\njeton_insee = secrets['token']['api_insee']"
  },
  {
    "objectID": "chapters/projects-architecture.html#les-cookiecutters",
    "href": "chapters/projects-architecture.html#les-cookiecutters",
    "title": "Structure des projets",
    "section": "Les cookiecutters",
    "text": "Les cookiecutters\nEn Python il existe des modèles de structure de projets : les cookiecutters. Il s’agit de modèles d’arborescences de fichiers (fichiers Python mais également tout type de fichiers) proposés par la communauté et téléchargeables comme point de départ d’un projet.\nL’idée de cookiecutter est de proposer des templates que l’on utilise pour initialiser un projet, afin de bâtir à l’avance une structure évolutive. On va s’inspirer de la structure du template datascience développé par la communauté. La syntaxe à utiliser dans ce cas est la suivante :\n\n\nterminal\n\n$ $ pip install cookiecutter\n$ $ cookiecutter https://github.com/drivendata/cookiecutter-data-science\n\nLe modèle est personnalisable, notamment pour faciliter l’interaction entre un système de stockage distant. L’arborescence générée est assez massive pour permettre une grande diversité de projet. Il n’est souvent pas nécessaire d’avoir toutes les composantes du cookiecutter.\n\n\nStructure complète générée par le cookiecutter data science\n\n├── LICENSE\n├── Makefile           &lt;- Makefile with commands like `make data` or `make train`\n├── README.md          &lt;- The top-level README for developers using this project.\n├── data\n│   ├── external       &lt;- Data from third party sources.\n│   ├── interim        &lt;- Intermediate data that has been transformed.\n│   ├── processed      &lt;- The final, canonical data sets for modeling.\n│   └── raw            &lt;- The original, immutable data dump.\n│\n├── docs               &lt;- A default Sphinx project; see sphinx-doc.org for details\n│\n├── models             &lt;- Trained and serialized models, model predictions, or model summaries\n│\n├── notebooks          &lt;- Jupyter notebooks. Naming convention is a number (for ordering),\n│                         the creator's initials, and a short `-` delimited description, e.g.\n│                         `1.0-jqp-initial-data-exploration`.\n│\n├── references         &lt;- Data dictionaries, manuals, and all other explanatory materials.\n│\n├── reports            &lt;- Generated analysis as HTML, PDF, LaTeX, etc.\n│   └── figures        &lt;- Generated graphics and figures to be used in reporting\n│\n├── requirements.txt   &lt;- The requirements file for reproducing the analysis environment, e.g.\n│                         generated with `pip freeze &gt; requirements.txt`\n│\n├── setup.py           &lt;- Make this project pip installable with `pip install -e`\n├── src                &lt;- Source code for use in this project.\n│   ├── __init__.py    &lt;- Makes src a Python module\n│   │\n│   ├── data           &lt;- Scripts to download or generate data\n│   │   └── make_dataset.py\n│   │\n│   ├── features       &lt;- Scripts to turn raw data into features for modeling\n│   │   └── build_features.py\n│   │\n│   ├── models         &lt;- Scripts to train models and then use trained models to make\n│   │   │                 predictions\n│   │   ├── predict_model.py\n│   │   └── train_model.py\n│   │\n│   └── visualization  &lt;- Scripts to create exploratory and results oriented visualizations\n│       └── visualize.py\n│\n└── tox.ini            &lt;- tox file with settings for running tox; see tox.readthedocs.io\n\n\n\n\n\n\n\nTests unitaires\n\n\n\n\n\nLes tests unitaires sont des tests automatisés qui vérifient le bon fonctionnement d’une unité de code, comme une fonction ou une méthode. L’objectif est de s’assurer que chaque unité de code fonctionne correctement avant d’être intégrée dans le reste du programme.\nLes tests unitaires sont utiles lorsqu’on travaille sur un code de taille conséquente ou lorsqu’on partage son code à d’autres personnes, car ils permettent de s’assurer que les modifications apportées ne créent pas de nouvelles erreurs.\nEn Python, on peut utiliser le package unittest pour écrire des tests unitaires. Voici un exemple tiré de ce site :\n# fichier test_str.py\nimport unittest\n\n\nclass ChaineDeCaractereTest(unittest.TestCase):\n\n    def test_reversed(self):\n        resultat = reversed(\"abcd\")\n        self.assertEqual(\"dcba\", \"\".join(resultat))\n\n    def test_sorted(self):\n        resultat = sorted(\"dbca\")\n        self.assertEqual(['a', 'b', 'c', 'd'], resultat)\n\n    def test_upper(self):\n        resultat = \"hello\".upper()\n        self.assertEqual(\"HELLO\", resultat)\n\n    def test_erreur\n\n\nif __name__ == '__main__':\n    unittest.main()\nPour vérifier que les tests fonctionnent, on exécute ce script depuis la ligne de commande :\npython3 test_str.py\n.\n----------------------------------------------------------------------\nRan 1 test in 0.000s\n\nOK\nSi on écrit des tests unitaires, il est important de les maintenir !\nPrendre du temps pour écrire des tests unitaires qui ne sont pas maintenus et donc ne renvoie plus de diagnostics pertinents est du temps perdu."
  },
  {
    "objectID": "chapters/projects-architecture.html#transformer-son-projet-en-package-python",
    "href": "chapters/projects-architecture.html#transformer-son-projet-en-package-python",
    "title": "Structure des projets",
    "section": "Transformer son projet en package Python",
    "text": "Transformer son projet en package Python\nLe package est la structure aboutie d’un projet Python autosuffisant. Il s’agit d’une manière formelle de contrôler la reproductibilité d’un projet car :\n\nle package assure une gestion cohérente des dépendances\nle package offre une certaine structure pour la documentation\nle package facilite la réutilisation du code\nle package permet des économies d’échelle, car on peut réutiliser l’un des packages pour un autre projet\nle package facilite le debuggage car il est plus facile d’identifier une erreur quand elle est dans un package\n…\n\nEn Python, le package est une structure peu contraignante si on a adopté les bonnes pratiques de structuration de projet. À partir de la structure modulaire précédemment évoquée, il n’y a qu’un pas vers le package : l’ajout d’un fichier pyproject.toml qui contrôle la construction du package (voir ici).\nIl existe plusieurs outils pour installer un package dans le système à partir d’une structure de fichiers locale. Les deux principaux sont\n\nsetuptools\npoetry\n\nLe package fait la transition entre un code modulaire et un code portable, concept sur lequel nous reviendrons dans le prochain chapitre."
  },
  {
    "objectID": "chapters/projects-architecture.html#footnotes",
    "href": "chapters/projects-architecture.html#footnotes",
    "title": "Structure des projets",
    "section": "Footnotes",
    "text": "Footnotes\n\n\nA cet égard, Python est beaucoup plus fiable que R. Dans R, si deux scripts utilisent des fonctions dont le nom est identique mais issues de packages différents, il y aura un conflit. En Python chaque module sera importé comme un package en soi.↩︎"
  },
  {
    "objectID": "chapters/mlops.html",
    "href": "chapters/mlops.html",
    "title": "Introduction aux enjeux du MLOps",
    "section": "",
    "text": "Dans les chapitres précédents, nous avons vu qu’une majorité des projets data-driven restaient au stade de l’expérimentation, et qu’une des raisons pour expliquer ce phénomène était l’existence de frictions empêchant l’amélioration continue des projets. Dans le cadre des projets basés sur des modèles de machine learning, cette problématique devient encore plus cruciale : en supplément des enjeux sur le cycle de vie de la donnée intervient la dimension supplémentaire du cycle de vie des modèles. Parmi les principaux enjeux, une question souvent éludée dans les enseignements ou les nombreuses ressources en ligne sur le machine learning est la problématique des ré-entraînements périodiques, guidés par l’utilisation faite des modèles et les retours des utilisateurs, afin de maintenir à jour la base de connaissance des modèles et ainsi garantir leur pouvoir prédictif. Ce sujet du ré-entraînement des modèles rend les aller-retours entre les phases d’expérimentation et de production nécessairement fréquents. Pour faciliter la mise en place de pipelines favorisant ces boucles de rétroaction, une nouvelle approche a émergé : le MLOps, qui vise là encore à mobiliser les concepts et outils issus de l’approche DevOps tout en les adaptant au contexte et aux spécificités des projets de machine learning."
  },
  {
    "objectID": "chapters/mlops.html#du-devops-au-mlops",
    "href": "chapters/mlops.html#du-devops-au-mlops",
    "title": "Introduction aux enjeux du MLOps",
    "section": "Du DevOps au MLOps",
    "text": "Du DevOps au MLOps\nL’approche MLOps s’est construite sur les bases de l’approche DevOps. En cela, on peut considérer qu’il s’agit simplement d’une extension de l’approche DevOps, développée pour répondre aux défis spécifiques liés à la gestion du cycle de vie des modèles de machine learning. Le MLOps intègre les principes de collaboration et d’automatisation propres au DevOps, mais prend également en compte tous les aspects liés aux données et aux modèles de machine learning.\n\n\n\n\n\n\n\nA mettre en regard à la boucle du DevOps\n\n\n\nLe MLOps implique l’automatisation des tâches telles que la gestion des données, le suivi des versions des modèles, leurs déploiements, ainsi que l’évaluation continue de la performance des modèles en production. De la même manière que le DevOps, le MLOps met l’accent sur la collaboration étroite entre les équipes de développement et d’administration système d’une part, ainsi que les équipes de data science d’autre part. Cette collaboration est clé pour garantir une communication efficace tout au long du cycle de vie du modèle de machine learning et fludifier le passage entre les étapes d’expérimentation et de passage en production."
  },
  {
    "objectID": "chapters/mlops.html#principes-du-mlops",
    "href": "chapters/mlops.html#principes-du-mlops",
    "title": "Introduction aux enjeux du MLOps",
    "section": "Principes du MLOps",
    "text": "Principes du MLOps\nPuisque le MLOps est ainsi une extension des principes du DevOps aux enjeux du machine learning, les principes généraux sont les mêmes que ceux évoqués précédemment mais ceux-ci s’adaptent à la problématique de la gestion du cycle de vie d’un modèle:\n\nla reproductibilité : les résultats de chaque expérimentation, fructueuse comme infructueuse, doivent pouvoir être reproduits sans coût. Cela implique d’abord une certaine rigueur dans la gestion des packages, la gestion des environnements, la gestion des librairies système, le contrôle de version du code, etc.\nle contrôle de version: au-delà du simple suivi des versions du code, pour reproduire de manière identique les résultats d’un code c’est l’ensemble des inputs et paramètres influençant l’entraînement d’un modèle (données d’entraînement, hyper-paramètres, etc.) qui doivent être versionnées avec le modèle ;\nl’automatisation : afin de favoriser les boucles rétroactives d’amélioration continue, le cycle de vie du modèle (tests, build, validation, déploiement) doit être automatisé au maximum. Les outils issus de l’approche DevOps, en particulier l’intégration et déploiement continus (CI/CD), doivent être mobilisés ;\nla collaboration : valoriser une culture de travail collaborative autour des projets de ML, dans laquelle la communication au sein des équipes doit permettre de réduire le travail en silos et bénéficier des expertises des différents métiers parti prenantes d’un modèle (analystes, data engineers, devs..). Sur le plan technique, les outils MLOps utilisés doivent favoriser le travail collaboratif sur les données, le modèle et le code utilisés par le projet ;\nl’amélioration continue : une fois déployé, il est essentiel de s’assurer que le modèle fonctionne bien comme attendu en évaluant ses performances sur des données réelles à l’aide d’outils de monitoring en continu. Dans le cas d’une dégradation des performances dans le temps, un ré-entraînement périodique ou un entraînement en continu du modèle doivent être envisagés.\n\nPour plus de détails, voir Kreuzberger, Kühl, and Hirschl (2023)."
  },
  {
    "objectID": "chapters/mlops.html#entraînements-des-modèles",
    "href": "chapters/mlops.html#entraînements-des-modèles",
    "title": "Introduction aux enjeux du MLOps",
    "section": "1️⃣ Entraînements des modèles",
    "text": "1️⃣ Entraînements des modèles\nLa première étape d’un projet de machine learning correspond à tout ce que l’on effectue jusqu’à l’entraînement des premiers modèles. Cette étape est un processus itératif et fastidieux qui ne suit pas un développement linéaire : les méthodes de récupération des données peuvent être changeantes, le preprocessing peut varier, de même que la sélection des features pour le modèle (feature engineering), et les algorithmes testés peuvent être nombreux… On est donc aux antipodes des hypothèses habituelles de stabilité nécessaires à l’entraînement et la validité externe dans les enseignements de machine learning.\nGarder une trace de tous les essais effectués apparaît indispensable afin de savoir ce qui a fonctionné ou non. Le besoin d’archiver ne concerne pas que les métriques de performances associées à un jeu de paramètres. Ceux-ci ne sont qu’une partie des ingrédients nécessaires pour aboutir à une estimation. L’ensemble des inputs d’un processus de production (code, données, configuration logicielle, etc.) est également à conserver pour être en mesure de répliquer une expérimentation.\n\n\n\n\n\n\nLe tracking server de MLFlow, un environnement idéal pour archiver des expérimentations\n\n\n\nLa phase exploratoire est rendue très simple grâce au Tracking Server de MLFlow. Comme cela sera expliqué ultérieurement, lors de l’exécution d’un run, MLflow enregistre tout un tas de métadonnées qui permettent de retrouver toutes les informations relatives à ce run : la date, le hash du commit, les paramètres du modèle, le dataset utilisé, les métriques spécifiées, etc. Cela permet non seulement de comparer les différents essais réalisés, mais aussi d’être capable de reproduire un run passé.\n\n\nDe manière générale, cette phase exploratoire est réalisée par le data scientist ou le ML engineer dans des notebooks. Ces notebooks sont en effet parfaitement adaptés pour cette étape puisqu’ils permettent une grande flexibilité et sont particulièrement commodes pour effectuer des tests. En revanche, lorsque l’on souhaite aller plus loin et que l’on vise une mise en production de son projet, les notebooks ne sont plus adaptés, et cela pour diverses raisons :\n\nla collaboration est grandement limitée à cause d’une compatibilité très faible avec les outils de contrôle de version standard (notamment Git).\nl’automatisation de pipeline est beaucoup plus compliquée et peu lisible. Il existe certes des packages qui permettent d’automatiser des pipelines de notebooks comme Elyra par exemple, mais ce n’est clairement pas l’approche que nous vous recommandons car les scripts sont beaucoup moins usine à gaz.\nLes workflows sont souvent moins clairs, mal organisés (toutes les fonctions définies dans le même fichier affectant la lisibilité du code par exemple) voire peu reproductibles car les cellules sont rarement ordonnées de sorte à exécuter le code de manière linéaire.\nLes notebooks offrent généralement une modularité insuffisante lorsque l’on veut travailler avec des composants de machine learning complexes.\n\nToutes ces raisons nous amènent à vous conseiller de réduire au maximum votre utilisation de notebooks et de restreindre leur utilisation à la phase exploratoire ou à la diffusion de résultats/rapports. Passer le plus tôt possible à des scripts .py vous permettra de réduire le coût de la mise en production. Pour reprendre ce qui a déjà été évoqué dans le chapitre Architecture des projets, nous vous invitons à favoriser une structure modulaire de sorte à pouvoir industrialiser votre projet.\nUne autre spécificité pouvant impacter la mise en production concerne la manière dont l’entraînement est réalisé. Il existe pour cela 2 écoles qui ont chacune leurs avantages et désavantages : le batch training et l’online training.\n\nBatch training\nLe batch training est la manière usuelle d’entraîner un modèle de machine learning. Cette méthode consiste à entraîner son modèle sur un jeu de données fixe d’une seule traite. Le modèle est entraîné sur l’intégralité des données disponibles et les prédictions sont réalisées sur de nouvelles données. Cela signifie que le modèle n’est pas mis à jour une fois qu’il est entraîné, et qu’il est nécessaire de le ré-entraîner si l’on souhaite ajuster ses poids. Cette méthode est relativement simple à mettre en œuvre : il suffit d’entraîner le modèle une seule fois, de le déployer, puis de le ré-entraîner ultérieurement en cas de besoin. Cependant, cette simplicité comporte des inconvénients : le modèle reste statique, nécessitant un ré-entraînement fréquent pour intégrer de nouvelles données. Par exemple, dans le cas de la détection de spams, si un nouveau type de spam apparaît, le modèle entraîné en batch ne sera pas capable de le détecter sans un ré-entraînement complet. De plus, cette méthode peut rapidement exiger une grande quantité de mémoire en fonction de la taille du jeu de données, ce qui peut poser des contraintes sur l’infrastructure et prolonger considérablement le temps d’entraînement.\n\n\nOnline training\nL’online training se présente comme l’antithèse du batch training, car il se déroule de manière incrémentale. Dans ce mode d’entraînement, de petits lots de données sont envoyés séquentiellement à l’algorithme, ce qui permet à celui-ci de mettre à jour ses poids à chaque nouvelle donnée reçue. Cette approche permet au modèle de détecter efficacement les variations dans les données en temps réel. Il est toutefois crucial de bien ajuster le learning rate afin d’éviter que le modèle oublie les informations apprises sur les données précédentes. L’un des principaux avantages de cette méthode est sa capacité à permettre un entraînement continu même lorsque le modèle est en production, ce qui se traduit par une réduction des coûts computationnels. De plus, l’online training est particulièrement adapté aux situations où les données d’entrée évoluent fréquemment, comme dans le cas des prédictions de cours de bourse. Cependant, sa mise en œuvre dans un contexte de production est bien plus complexe que celle du batch training, et les frameworks traditionnels de machine learning tels que Scikit-learn, PyTorch, TensorFlow et Keras ne sont pas compatibles avec cette approche.\n\n\nDistribuer l’optimisation des hyperparamètres\nUne autre spécificité des modèles de machine learning réside dans le nombre important d’hyperparamètres à optimiser, lesquels peuvent sensiblement impacter les performances du modèle. L’approche standard pour réaliser cette optimisation est ce qu’on appelle un Grid Search. Il s’agit simplement de lister toutes les combinaisons d’hyperparamètres à tester et d’entraîner successivement des modèles avec ces combinaisons prédéfinies. Il n’est pas difficile de comprendre que cette technique est très coûteuse en temps de calcul lorsque le nombre d’hyperparamètres à optimiser et leurs modalités à tester sont élevés. Cependant, cette optimisation est indispensable pour entraîner le meilleur modèle pour notre tâche, et si s’inspirer de la littérature est crucial pour limiter le domaine d’optimisation de nos hyperparamètres, réaliser un Grid Search est une étape incontournable.\nAinsi, pour s’inscrire dans l’approche du MLOps, une bonne méthode est d’automatiser cette optimisation des hyperparamètres en la distribuant sur un cluster lorsqu’on dispose de l’infrastructure adéquate. L’idée est de créer des processus indépendants, chacun liés à une combinaison de nos hyperparamètres, et d’entraîner notre modèle sur ceux-ci puis d’enregister les informations à archiver dans un environnement adéquat, par exemple dans MLFlow.\nIl existe un moteur de workflow populaire pour orchestrer des tâches parallèles sur un cluster Kubernetes : Argo Workflow. Le principe est de définir un workflow dans lequel chaque étape correspond à un conteneur contenant uniquement ce qui est strictement nécessaire à l’exécution de cette étape. Ainsi, on s’approche de la perfection en ce qui concerne la reproductibilité, car on maîtrise totalement les installations nécessaires à l’exécution de notre entraînement. Un workflow à plusieurs étapes peut ainsi être modélisé comme un graphe acyclique orienté, et l’exemple ci-dessous représente un cas d’optimisation d’hyperparamètres :\n\n\n\nWorkflow d’optimisation d’hyperparamètres en parallèle\n\n\nCette approche permet d’exécuter facilement en parallèle des tâches intensives en calcul de manière totalement reproductible. Évidemment, l’utilisation de tels workflows ne se limite pas à l’optimisation d’hyperparamètres mais peut également être utilisée pour le preprocessing de données, la création de pipelines d’ETL, etc. D’ailleurs, à l’origine, ces outils ont été pensé pour ces tâches et permettent ainsi de définir un processus de données comme un ensemble de transformations sous la forme de diagramme acyclique dirigé (DAG)."
  },
  {
    "objectID": "chapters/mlops.html#servir-un-modèle-ml-à-des-utilisateurs",
    "href": "chapters/mlops.html#servir-un-modèle-ml-à-des-utilisateurs",
    "title": "Introduction aux enjeux du MLOps",
    "section": "2️⃣ Servir un modèle ML à des utilisateurs",
    "text": "2️⃣ Servir un modèle ML à des utilisateurs\nUne partie très importante, parfois négligée, des projets de machine learning est la mise à disposition des modèles entraînés à d’autres utilisateurs. Puisque vous avez parfaitement suivi les différents chapitres de ce cours, votre projet est en théorie totalement reproductible. Une manière triviale de transmettre le modèle que vous avez sélectionné serait de partager votre code et toutes les informations nécessaires pour qu’une personne tierce ré-entraîne votre modèle de son côté. Évidemment, ce procédé n’est pas optimal, car il suppose que tous les utilisateurs disposent des ressources/infrastructures/connaissances nécessaires pour réaliser l’entraînement.\nL’objectif est donc de mettre à disposition votre modèle de manière simple et efficace. Pour cela, plusieurs possibilités s’offrent à vous en fonction de votre projet, et il est important de se poser quelques questions préalables :\n\nQuel format est le plus pertinent pour mettre à disposition des utilisateurs ?\nLes prédictions du modèle doivent-elles être réalisées par lots (batch) ou en temps réel (online) ?\nQuelle infrastructure utiliser pour déployer notre modèle de machine learning ?\n\nDans le cadre de ce cours, nous avons choisi d’utiliser une API REST pour mettre à disposition un modèle de machine learning. Cela nous semble être la méthode la plus adaptée dans une grande majorité des cas, car elle répond à plusieurs critères :\n\nSimplicité : les API REST permettent de créer une porte d’entrée qui peut cacher la complexité sous-jacente du modèle, facilitant ainsi sa mise à disposition.\nStandardisation : l’un des principaux avantages des API REST est qu’elles reposent sur le standard HTTP. Cela signifie qu’elles sont agnostiques au langage de programmation utilisé et que les requêtes peuvent être réalisées en XML, JSON, HTML, etc.\nModularité : le client et le serveur sont indépendants. En d’autres termes, le stockage des données, l’interface utilisateur ou encore la gestion du modèle sont complètement séparés de la mise à disposition (le serveur).\nPassage à l’échelle : la séparation entre le serveur et le client permet aux API REST d’être très flexibles et facilite le passage à l’échelle (scalability). Elles peuvent ainsi s’adapter à la charge de requêtes concurrentes.\n\nL’exposition d’un modèle de machine learning peut être résumée par le schéma suivant :\n\n\n\nExposer un modèle de ML via une API\n\n\nComme le montre le schéma, l’API est exécutée dans un conteneur afin de garantir un environnement totalement autonome et isolé. Seules les dépendances nécessaires à l’exécution du modèle et au fonctionnement de l’API ne sont intégrées à ce conteneur. Travailler avec des images docker légères présente plusieurs avantages. Tout d’abord, créer une image ne contenant que le strict nécessaire au fonctionnement de votre application permet justement de savoir ce qui est absolument indispensable et ce qui est superflu. De plus, plus votre image est légère, plus son temps de téléchargement depuis votre Hub d’images (e.g. Dockerhub) sera rapide à chaque création de conteneur de votre application. Les conteneurs ont l’avantage d’être totalement portables et offrent la possibilité de mettre à l’échelle votre application de manière simple et efficace. Par exemple, si l’on imagine que vous avez déployé votre modèle et que vous souhaitez le requêter un grand nombre de fois dans un laps de temps court, il est alors préférable de créer plusieurs instances de votre application pour que les calculs puissent être effectués en parallèle. L’avantage de procéder de cette manière est qu’une fois qu’on a créé l’image sous-jacente à notre application, il est ensuite très simple de créer une multitude de conteneurs (replicas) toutes basées sur l’image en question.\nPour tout ce qui concerne le déploiement de votre application, vous pouvez vous référer au chapitre Mise en production. Techniquement, il n’y a aucune difficulté supplémentaire lorsque l’on veut avoir une approche MLOps lors de cette étape. L’unique subtilité à avoir en tête est que l’on souhaite maintenant faire communiquer notre application avec MLflow. En effet, chaque déploiement est basé sur une version particulière du modèle et il est nécessaire de renseigner quelques informations afin de récupérer le bon modèle au sein de notre entrepôt de modèle. Comme pour tout déploiement sous Kubernetes, il faut tout d’abord créer les 3 fichiers YAML : deployment.yaml, service.yaml, ingress.yaml. Ensuite, comme vous pouvez le voir sur le schéma, notre API doit pouvoir être reliée à MLflow qui lui-même a besoin d’être connecté à un espace de stockage (ici s3/MinIO) qui contient l’entrepôt des modèles. Pour cela, dans le fichier deployment.yaml, on rajoute simplement quelques variables d’environnement qui nous permettent de créer de lien à savoir :\n\nMLFLOW_S3_ENDPOINT_URL : L’URL de l’endpoint S3 utilisé par MLflow pour stocker les données (et modèles)\nMLFLOW_TRACKING_URI : L’URI du serveur de suivi MLflow, qui spécifie où les informations concernant les modèles sont stockées.\nAWS_ACCESS_KEY_ID : L’identifiant d’accès utilisé pour authentifier l’accès aux services de stockage s3.\nAWS_SECRET_ACCESS_KEY : La clé secrète utilisée pour authentifier l’accès aux services de stockage s3.\nAWS_DEFAULT_REGION : Identifie la région S3 pour laquelle vous souhaitez envoyer les demandes aux serveurs. \n\nPour faciliter le déploiement continu (voir chapitre Mise en production), il est conseillé de rajouter des variables d’environnement spécifiant la version du modèle à déployer ainsi que le nom du modèle à déployer. En effet, en spécifiant ces valeurs dans le fichier deployment.yaml, cela va permettre de déclencher un nouveau déploiement dès lors que l’on modifiera ces valeurs.\nIl est bon de noter que MLflow permet également de déployer directement un modèle MLflow. Vous pouvez aller regarder la documentation si cela vous intéresse. Cette option est relativement récente et pas encore tout à fait mature mais se base sur les mêmes technologies que celles présentées dans ce cours (Kubernetes, S3, etc.). C’est pour cela que nous avons préféré détailler le développement de notre propre API en utilisant le framework FastAPI, qui est devenu le standard pour le développement d’API en Python.\n\nDéployer sur Kubernetes (plutot dans chap mise en prod ?) \nBatch vs real-time prediction"
  },
  {
    "objectID": "chapters/mlops.html#observabilité-en-temps-réel-dun-modèle-de-ml",
    "href": "chapters/mlops.html#observabilité-en-temps-réel-dun-modèle-de-ml",
    "title": "Introduction aux enjeux du MLOps",
    "section": "3️⃣ Observabilité en temps réel d’un modèle de ML",
    "text": "3️⃣ Observabilité en temps réel d’un modèle de ML\nUne fois la modélisation réalisée, le modèle entraîné, optimisé et mis à disposition des utilisateurs grâce à un déploiement sur un serveur, on peut considérer que le travail est fini. Du point de vue du data-scientist stricto sensu, cela peut être le cas, puisque l’on considère souvent que le domaine du data-scientist s’arrête à la sélection du modèle à déployer, le déploiement étant réalisé par ce qu’on appelle les data-engineers. Pourtant, une fois déployé dans un environnement de production, le modèle n’a pas réalisé l’intégralité de son cycle de vie. En production, le cycle de vie d’un modèle de machine learning suivant l’approche MLOps peut être schématisé de la manière suivante :\n\n\n\n\n\n\nFigure 1: Source : martinfowler.com\n\n\n\nOn retrouve les différentes composantes du MLOps avec les données (DataOps), les modèles (ModelOps) et le code (DevOps). Ces composantes rendent le cycle de vie d’un modèle de machine learning complexe impliquant plusieurs parties prenantes autour du projet. En règle générale, on observe trois parties prenantes principales :\n\nData-scientists/Data-engineers\nIT/DevOps\nÉquipes métiers\n\nQuelques fois, les data-scientists peuvent être intégrés aux équipes métiers et les data-engineers aux équipes IT. Cela peut simplifier les échanges entre les deux équipes, mais cela peut également entraîner un travail en silos et cloisonner les deux équipes aux expertises, attentes et vocabulaires très différents. Or, la communication est primordiale pour permettre une bonne gestion du cycle de vie du modèle de machine learning et notamment pour surveiller le modèle dans son environnement de production.\nIl est extrêmement important de surveiller comment le modèle se comporte une fois déployé pour s’assurer que les résultats renvoyés sont conformes aux attentes. Cela permet d’anticiper des changements dans les données, une baisse des performances ou encore d’améliorer le modèle de manière continue. Il est également nécessaire que notre modèle soit toujours accessible, que notre application soit bien dimensionnée, etc. C’est pour cela que la surveillance (monitoring) d’un modèle de machine learning est un enjeu capital dans l’approche MLOps.\nLe terme surveillance peut renvoyer à plusieurs définitions en fonction de l’équipe dans laquelle l’on se situe. Pour une personne travaillant dans l’équipe informatique, surveiller une application signifie vérifier sa validité technique. Elle va donc s’assurer que la latence n’est pas trop élevée, que la mémoire est suffisante ou encore que le stockage sur le disque est bien proportionné. Pour un data-scientist ou une personne travaillant dans l’équipe métier, ce qui va l’intéresser est la surveillance du modèle d’un point de vue méthodologique. Malheureusement, il n’est pas souvent évident que contrôler la performance en temps réel d’un modèle de machine learning. Il est rare que l’on connaisse la vraie valeur au moment de la prédiction du modèle (sinon on ne s’embêterait pas à construire un modèle !) et on ne peut pas vraiment savoir s’il s’est trompé ou non. Il est donc commun d’utiliser des proxies pour anticiper une potentielle dégradation de la performance de notre modèle. On distingue généralement 2 principaux types de dégradation d’un modèle de machine learning : le data drift et le concept drift.\n\n\n\nSource : whylabs.ai\n\n\n\nData drift\nOn parle de data drift lorsque l’on observe un changement de distribution dans les données utilisées en entrée du modèle. En d’autres termes, il y a data drift lorsque les données utilisées lors de l’entraînement sont sensiblement différentes des données utilisées lors de l’inférence en production. Imaginons que vous souhaitez repérer des habitations à partir d’images satellites. Vous entraînez votre modèle sur des données datant par exemple de février 2022, et une fois en production vous essayer de repérer les habitations tous les mois suivants. Vous constatez finalement durant l’été que votre modèle n’est plus du tout aussi performant puisque les images satellites de juillet diffèrent fortement de celle de février. La distribution des données d’entraînement n’est plus proche de celle d’inférence, \\(P_{train}(X) \\neq P_{inference}(X)\\). Les data drifts apparaissent dès lors que les propriétés statistiques des données changent et cela peut venir de plusieurs facteurs en fonction de votre modèle : changements de comportement, dynamique de marché, nouvelles réglementations politiques, problème de qualité des données, etc. Il n’est pas si simple de détecter rapidement des data drifts, cela suppose de surveiller de manière continue la distribution des données en entrée et en sortie de votre modèle sur un certain laps de temps et d’identifier quand celles-ci diffèrent significativement de la distribution des données d’entraînement. Pour obtenir une idée visuelle, on peut créer des représentations graphiques comme des histogrammes pour comparer les distributions à plusieurs périodes dans le temps, voire des boîtes à moustaches. On peut aussi calculer des métriques, qui seront plus simples d’utilisation si l’on souhaite automatiser un système d’alerte, comme des distances entre distributions (distance de Bhattacharyya, divergence de Kullback-Leibler, distance de Hellinger) ou effectuer des tests statistiques (Test de Kolmogorov-Smirnov, Test du χ²). Pour résumer, la détection d’un data drift peut s’effectuer en plusieurs étapes :\n\nDéfinition d’une référence : on définit la distribution de référence (e.g. celle utilisée lors de l’entraînement).\nDéfinition de seuils : on détermine en dessous de quelles valeurs de nos métriques cela peut être considéré comme un data drift.\nSurveillance continue : soit en temps réel, soit de manière périodique (relativement courte), on compare nos distributions et on calcule les métriques définies préalablement.\nAlerte et correction : on met en place un système d’alerte automatique dès lors que nos métriques indiquent la présence d’un data drift, puis on agit en conséquence (ré-entraînement sur de nouvelles données, ajustement des paramètres du modèle, etc.).\n\n\n\nConcept drift\nOn parle de concept drift lorsque l’on observe un changement dans la relation statistique entre les features (\\(X\\)) et la variable à prédire (\\(Y\\)) au cours du temps. En termes mathématiques, on considère qu’il y a un concept drift dès lors que \\(P_{train}(Y|X) \\neq P_{inference}(Y|X)\\) alors même que \\(P_{train}(X) = P_{inference}(X)\\). Cela peut avoir un impact important sur les performances du modèle si la relation diffère fortement. Par exemple, un modèle de prédiction de la demande de masques chirurgicaux entraîné sur des données avant la pandémie de COVID-19 deviendra totalement inadéquat pour effectuer des prédictions lors de cette pandémie, car il y a eu un changement dans la relation entre la demande de masques chirurgicaux et les features utilisées pour prédire cette demande. Dans le cas d’un concept drift, on sera plus tenté de surveiller des métriques de performance pour repérer une potentielle anomalie. Dans le cas où l’on possède un jeu de test gold standard, alors on sera en capacité de calculer de nombreuses métriques usuelles de machine learning (à savoir l’accuracy, la precision, le recall ou le F1-score pour des problèmes de classification, et toutes les métriques d’erreurs - MSE, RMSE, MAE, … - pour les problèmes de régression) et repérer une baisse tendancielle ou brutale des performances. Dans le cas où l’on n’a pas de jeu de test gold standard, on s’attachera à déterminer des proxys qui peuvent être liés à des métriques de performance ou alors utiliser des algorithmes de détection de changement dans le flux de données (Drift Detection Method, Early Drift Detection Method, Adaptive Windowing)."
  },
  {
    "objectID": "chapters/mlops.html#ré-entraînement-dun-modèle-ml",
    "href": "chapters/mlops.html#ré-entraînement-dun-modèle-ml",
    "title": "Introduction aux enjeux du MLOps",
    "section": "4️⃣ Ré-entraînement d’un modèle ML",
    "text": "4️⃣ Ré-entraînement d’un modèle ML\nDès lors que l’on a constaté une baisse de la performance de notre modèle grâce à notre surveillance fine, il faut ensuite pallier au problème et redéployer un modèle avec des performances satisfaisantes. On est donc à la fin du cycle de vie de notre modèle, ce qui va nous reconduire au début du cycle pour un nouveau modèle comme l’illustre la figure Figure 1. Le ré-entraînement est partie intégrante d’un projet de machine learning dès lors que celui-ci est mis en production. Il existe plusieurs méthodes pour ré-entraîner de la plus basique à la plus MLOps-compatible.\nLa méthode classique est de réaliser un nouvel entraînement from scratch en ajoutant les nouvelles données à notre disposition dans le jeu d’entraînement. Cela permet au modèle de connaître les dernières relations entre les features et la variable à prédire. Cependant, ré-entraîner un modèle peut être particulièrement coûteux lorsque l’on travaille sur de gros modèles dont les ressources computationnelles nécessaires sont importantes. Il est aussi possible de fine-tuner un modèle déjà pré-entraîné. Dans ce cas-là, on n’a pas besoin de repartir de zéro, on repart des poids optimisés lors du premier entraînement et on les ré-optimise en utilisant les nouvelles données à notre disposition. Cette méthode est naturellement beaucoup moins longue à réaliser et est moins coûteuse, notamment lorsque la quantité de nouvelles données est faible par rapport à la quantité des données utilisées lors du premier entraînement.\nL’approche MLOps consiste à automatiser ce ré-entraînement, qu’on appelle également entraînement continu, de sorte à obtenir un cycle de vie totalement automatisé. En effet, le ré-entraînement est fondamental pour s’assurer que le modèle de machine learning est constamment en train de fournir des prédictions cohérentes, tout en minimisant les interventions manuelles. L’objectif est donc de créer un processus qui lance de nouveaux entraînements de manière automatique en prenant en compte les dernières informations disponibles. Les entraînements peuvent être déclenchés soit de manière périodique (tous les lundis à 2h du matin), dès lors qu’une alerte a été déclenchée dans notre système de monitoring, ou bien dès qu’on a une quantité de nouvelles données suffisante pour réaliser un online training par exemple.\nL’utilisation d’outils d’orchestration de workflow comme Argo Workflow ou Airflow est donc indispensable pour réaliser cette automatisation de manière pertinente."
  },
  {
    "objectID": "chapters/mlops.html#défis-organisationnels-du-mlops",
    "href": "chapters/mlops.html#défis-organisationnels-du-mlops",
    "title": "Introduction aux enjeux du MLOps",
    "section": "5️⃣ Défis organisationnels du MLOps",
    "text": "5️⃣ Défis organisationnels du MLOps\nOutre les spécificités techniques précédemment explicitées, le MLOps présente également plusieurs défis en termes organisationnels et managériaux. En effet, dans la plupart des organisations, les équipes data transverses ou intégrées dans différents départements métier sont relativement jeunes et peuvent manquer de ressources qualifiées pour gérer le déploiement et le maintien en condition opérationnelle de systèmes ML complexes. Ces équipes se composent principalement de data scientists qui se concentrent sur le développement des modèles de machine learning, mais n’ont pas les compétences nécessaires pour gérer le déploiement et la maintenance d’applications complètes.\nDe plus, les équipes data évoluent encore trop souvent en silo, sans communiquer avec les différentes équipes techniques avec lesquelles elles devraient interagir pour mettre en production leurs modèles. Or ces équipes techniques, souvent composées d’informaticiens/développeurs, ne connaissent pas forcément les spécificités des modèles de machine learning, accentuant d’autant plus la nécessité d’une communication continue entre ces équipes.\nUne autre difficulté pouvant intervenir lors du déploiement est la différence d’environnements utilisés ainsi que les différents langages connus entre les deux équipes. Il n’est pas rare que les data-scientists développent des modèles en Python tandis que les équipes informatiques gèrent leur serveur de production dans un langage différent, comme Java par exemple.\nAinsi, l’approche MLOps engendre aussi des défis managériaux qui impliquent de faire converger les compétences entre les équipes afin de fluidifier la mise en production de modèles de machine learning.\n\n\n\nGouvernance d’un projet de machine learning"
  },
  {
    "objectID": "chapters/mlops.html#pourquoi-mlflow",
    "href": "chapters/mlops.html#pourquoi-mlflow",
    "title": "Introduction aux enjeux du MLOps",
    "section": "Pourquoi MLflow ?",
    "text": "Pourquoi MLflow ?\nIl existe aujourd’hui de nombreux outils pour orchestrer des tâches et des pipelines de données. Parmi les plus populaires (selon leur ⭐ GitHub), on peut citer Airflow, Luigi, MLflow, Argo Workflow, Prefect ou encore Kubeflow, BentoML… Il est difficile d’affirmer s’il y en a un meilleur qu’un autre ; en réalité, votre choix dépend surtout de votre infrastructure informatique et de votre projet. En l’occurrence ici, nous avons fait le choix d’utiliser MLflow pour sa simplicité d’utilisation grâce à une interface web bien faite, parce qu’il intègre l’ensemble du cycle de vie d’un modèle et également parce qu’il s’intègre très bien avec Kubernetes. De plus, il est présent dans le catalogue du SSP Cloud, ce qui simplifie grandement son installation. Afin d’intégrer les dimensions d’intégration et de déploiement continus, nous utiliserons également Argo CD et Argo Workflow dans la boucle. Ceux-ci sont privilégiés par rapport à Airflow car ils sont optimisés pour les clusters Kubernetes qui représentent aujourd’hui la norme des cloud en ligne ou on premise.\n\n\n\nVue d’ensemble de MLFlow. Source: https://dzlab.github.io\n\n\nMLflow est une plateforme qui permet d’optimiser le développement du cycle de vie d’un modèle de machine learning. Elle permet de suivre en détail les différentes expérimentations, de packager son code pour garantir la reproductibilité, et de servir un modèle à des utilisateurs. MLFlow possède également une API qui permet d’être compatible avec la majorité des librairies de machine learning (PyTorch, Scikit-learn, XGBoost, etc.) mais également différents langages (Python, R et Java)."
  },
  {
    "objectID": "chapters/mlops.html#les-projets-mlflow",
    "href": "chapters/mlops.html#les-projets-mlflow",
    "title": "Introduction aux enjeux du MLOps",
    "section": "Les projets MLflow",
    "text": "Les projets MLflow\nMLflow propose un format pour packager son projet de data science afin de favoriser la réutilisation et la reproductibilité du code. Ce format s’appelle tout simplement MLflow Project. Concrètement, un MLflow project n’est rien d’autre qu’un répertoire contenant le code et les ressources nécessaires (données, fichiers de configuration…) pour l’exécution de votre projet. Il est résumé par un fichier MLproject qui liste les différentes commandes pour exécuter une pipeline ainsi que les dépendances nécessaires. En général, un projet MLflow a la structure suivante :\nProjet_ML/\n├── artifacts/\n│   ├── model.bin\n│   └── train_text.txt\n├── code/\n│   ├── main.py\n│   └── preprocessing.py\n├── MLmodel\n├── conda.yaml\n├── python_env.yaml\n├── python_model.pkl\n└── requirements.txt\nEn plus de packager son projet, MLflow permet également de packager son modèle, quel que soit la librairie de machine learning sous-jacente utilisée (parmi celles compatibles avec MLflow, c’est-à-dire toutes les librairies que vous utilisez !). Ainsi, deux modèles entraînés avec des librairies différentes, disons PyTorch et Keras, peuvent être déployés et requêtés de la même manière grâce à cette surcouche ajoutée par MLflow.\n\n\n\n\n\n\n\n\n\n\n\nTip\n\n\n\nIl est également possible de packager son propre modèle personnalisé ! Pour cela vous pouvez suivre le tutoriel présent dans la documentation.\n\n\nAutrement dit, un projet MLFlow archive l’ensemble des éléments nécessaires pour reproduire un entraînement donné d’un modèle ou pour réutiliser celui-ci à tout moment."
  },
  {
    "objectID": "chapters/mlops.html#le-serveur-de-suivi-tracking-server",
    "href": "chapters/mlops.html#le-serveur-de-suivi-tracking-server",
    "title": "Introduction aux enjeux du MLOps",
    "section": "Le serveur de suivi (tracking server)",
    "text": "Le serveur de suivi (tracking server)\nLe tracking server est le lieu où sont archivés l’ensemble des entraînements d’un modèle. Attention, il ne s’agit pas du serveur sur lequel les modèles sont entraînés mais de celui où les entraînements sont archivés après avoir eu lieu. Au-delà de stocker seulement les poids d’un modèle, c’est l’ensemble de l’environnement nécessaire qui peut être retrouvé dans ce serveur.\n\n\n\n\n\nTechniquement, cela prend la forme d’une API et d’une interface utilisateur pour enregistrer les paramètres, les versions du code, les métriques ou encore les artefacts associés à un entraînement.\n\n\n\nSource: Databricks\n\n\nEn arrière plan, MLFlow va enregistrer tout ceci dans un bucket S3. Néanmoins, l’utilisateur n’aura pas à se soucier de cela puisque c’est MLFLow qui fera l’interface entre l’utilisateur et le système de stockage. Avec son API, MLFLow fournit même une manière simplifiée de récupérer ces objets archivés, par exemple avec un code prenant la forme\nimport mlflow\nmodel = mlflow.pyfunc.load_model(model_uri=\"runs:/d16076a3ec534311817565e6527539c\")\nLe tracking server est très utile pour comparer les différentes expérimentations que vous avez effectuées, pour les stocker et également pour être capable de les reproduire. En effet, chaque run sauvegarde la source des données utilisées, mais également le commit sur lequel le run est basé.\nA la manière de Git qui permet d’identifier chaque moment de l’histoire d’un projet à partir d’un identifiant unique, MLFlow permet de récupérer chaque entraînement d’un modèle à partir d’un SHA. Néanmoins, en pratique, certains modèles ont un statut à part, notamment ceux en production."
  },
  {
    "objectID": "chapters/mlops.html#lentrepôt-de-modèles-model-registry",
    "href": "chapters/mlops.html#lentrepôt-de-modèles-model-registry",
    "title": "Introduction aux enjeux du MLOps",
    "section": "L’entrepôt de modèles (model registry)",
    "text": "L’entrepôt de modèles (model registry)\nUne fois que l’on a effectué différentes expérimentations et pu sélectionner les modèles qui nous satisfont, il est temps de passer à l’étape suivante du cycle de vie d’un modèle. En effet, le modèle choisi doit ensuite pouvoir passer dans un environnement de production ou de pré-production. Or, connaître l’état d’un modèle dans son cycle de vie nécessite une organisation très rigoureuse et n’est pas si aisé. MLflow a développé une fonctionnalité qui permet justement de simplifier cette gestion des versions des modèles grâce à son Model Registry. Cet entrepôt permet d’ajouter des tags et des alias à nos modèles pour définir leur position dans leur cycle de vie et ainsi pouvoir les récupérer de manière efficace.\nDe manière générale, un modèle de machine learning passe par 4 stades qu’il est nécessaire de connaître en tout temps :\n\nExpérimental\nEn évaluation\nEn production\nArchivé"
  },
  {
    "objectID": "chapters/mlops.html#mlflow-en-résumé",
    "href": "chapters/mlops.html#mlflow-en-résumé",
    "title": "Introduction aux enjeux du MLOps",
    "section": "MLflow en résumé",
    "text": "MLflow en résumé\nMLflow est donc un projet open-source qui fournit une plateforme pour suivre le cycle de vie d’un modèle de machine learning de bout en bout. Ce n’est pas le seul outil disponible et il n’est peut-être pas le plus adapté à certains de vos projets précis. En revanche, il présente selon nous plusieurs avantages, en premier lieu sa prise en main très simple et sa capacité à répondre aux besoins de l’approche MLOps. Il faut garder à l’esprit que cet environnement est encore très récent et que de nouveaux projets open-source émergent chaque jour, donc il est nécessaire de rester à jour sur les dernières évolutions.\nPour résumer, MLFlow permet :\n\nde simplifier le suivi de l’entraînement des modèles de machine learning grâce à son API et à son tracking server\nd’intégrer les principaux frameworks de machine learning de manière simple\nd’intégrer son propre framework si besoin\nde standardiser son script d’entraînement et donc de pouvoir l’industrialiser, pour réaliser un fine-tuning des hyperparamètres, par exemple\nde packager ses modèles, de sorte à pouvoir les requêter de manière simple et harmonisée entre les différents frameworks\nde stocker ses modèles de manière pertinente en leur affectant des tags et en favorisant le suivi de leur cycle de vie"
  },
  {
    "objectID": "chapters/introduction.html",
    "href": "chapters/introduction.html",
    "title": "Introduction",
    "section": "",
    "text": "Dérouler les slides ci-dessous ou cliquer ici pour afficher les slides en plein écran."
  },
  {
    "objectID": "chapters/introduction.html#origine",
    "href": "chapters/introduction.html#origine",
    "title": "Introduction",
    "section": "Origine",
    "text": "Origine\nLa notion de “bonnes pratiques” qui nous intéresse dans ce cours trouve son origine au sein de la communauté des développeurs logiciels. Elle constitue une réponse à plusieurs constats :\n\nle “code est beaucoup plus souvent lu qu’il n’est écrit” (Guido Van Rossum) ;\nla maintenance d’un code demande souvent (beaucoup) plus de ressources que son développement initial ;\nla personne qui maintient une base de code a de fortes chances de ne pas être celle qui l’a écrite.\n\nFace à ces constats, un ensemble de règles informelles ont été conventionnellement acceptées par la communauté des développeurs comme produisant des logiciels plus fiables, évolutifs et maintenables dans le temps. Comme toutes conventions de langue, certaines peuvent paraître arbitraires. Ces règles favorisent néanmoins la capacité à communiquer du code, un aspect communautaire qui peut paraître secondaire au premier abord mais qui est pourtant le principe ayant fait le succès d’un langage open source en favorisant le partage d’expérience et d’assistance.\n\n\n\n\n\n\nLa 12 Factor App\n\n\n\n\n\nRécemment, dans le contexte d’une évolution des logiciels vers des applications web vivant dans le cloud, un certain nombre de ces bonnes pratiques ont été formalisées dans un manifeste : la 12 Factor App. Le développement du cloud, c’est-à-dire d’infrastructures standardisées hors des systèmes d’information des détenteurs de données, rend les besoins de bonnes pratiques plus prégnant."
  },
  {
    "objectID": "chapters/introduction.html#pourquoi-sintéresser-aux-bonnes-pratiques",
    "href": "chapters/introduction.html#pourquoi-sintéresser-aux-bonnes-pratiques",
    "title": "Introduction",
    "section": "Pourquoi s’intéresser aux bonnes pratiques ?",
    "text": "Pourquoi s’intéresser aux bonnes pratiques ?\n\nEn quoi est-ce pertinent pour le data scientist, dont le rôle n’est pas de développer des applications mais de donner du sens aux données ?\n\nDu fait du développement rapide de la data science et conséquemment de la croissance de la taille moyenne des projets, l’activité du data scientist tend à se rapprocher par certains aspects de celle du développeur :\n\nles projets sur lesquels travaille le data scientist sont intenses en code ;\nil doit travailler de manière collaborative au sein de projets de grande envergure ;\nil est de plus en plus amené à travailler à partir de données massives, ce qui nécessite de travailler sur des infrastructures big data informatiquement complexes ;\nil est amené à interagir avec des profils informatiques pour déployer ses modèles et les rendre accessibles à des utilisateurs.\n\nAussi, il fait sens pour le data scientist moderne de s’intéresser aux bonnes pratiques en vigueur dans la communauté des développeurs. Bien entendu, celles-ci doivent être adaptées aux spécificités des projets basés sur des données. L’effet bénéfique de ces bonnes pratiques est que les projets les adoptant auront un coût bien plus minimal pour évoluer, ce qui les rend plus compétitif dans un écosystème mouvant comme l’est la data science où les données, les outils et les attentes des utilisateurs sont en changements continuels."
  },
  {
    "objectID": "chapters/introduction.html#un-continuum-de-bonnes-pratiques",
    "href": "chapters/introduction.html#un-continuum-de-bonnes-pratiques",
    "title": "Introduction",
    "section": "Un continuum de bonnes pratiques",
    "text": "Un continuum de bonnes pratiques\nLa notion de bonnes pratiques ne doit pas être vue de manière binaire : il n’y a pas d’un côté les projets qui les appliquent et de l’autre ceux qui ne les appliquent pas. Les bonnes pratiques ont un coût, qu’il ne faut pas négliger — même si leur application évite aussi des coûts futurs, notamment en terme de maintenance. Il faut donc plutôt voir les bonnes pratiques comme un spectre, sur lequel on vient positionner son projet en fonction de différents critères, notamment du coût-avantage à avancer d’un niveau dans le spectre de la reproductibilité.\nLa détermination du seuil pertinent doit résulter d’un arbitrage entre différents critères liés au projet :\n\nambitions : le projet est-il amené à évoluer, prendre de l’ampleur ? Est-il destiné à devenir collaboratif, que ce soit dans le cadre d’une équipe en organisation ou bien en open-source ? Les outputs du projet ont-ils vocation à être diffusés au grand public ?\nressources : quels sont les moyens humain du projet ? Pour un projet open-source, existe-t-il une communauté potentielle de contributeurs ?\ncontraintes : le projet a-t-il une échéance proche ? Des exigences de qualité ont-elles été fixées ? Est-il destiné à la mise en production ? Existe-t-il des enjeux de sécurité forts ?\npublic cible: à quels profils s’adresse les différentes valorisations de données de ce projet ? Quel est leur niveau de technicité et le temps qu’elles vont consacrer à suivre votre projet ?\n\nIl n’est donc pas question pour nous de suggérer que tout projet de data science doit respecter toutes les bonnes pratiques présentées dans ce cours. Cela étant dit, nous sommes convaincus qu’il est important pour tout data scientist de réfléchir à ces questions pour améliorer ces pratiques au fil du temps.\nEn particulier, nous pensons qu’il est possible de définir un socle, i.e. un ensemble minimal de bonnes pratiques qui apportent plus d’avantages qu’elles ne coûtent à implémenter. Notre suggestion pour un tel socle est la suivante :\n\nContrôler la qualité de son code en utilisant des outils dédiés (cf. chapitre Qualité du Code) ;\nAdopter une structure standardisée de projet en utilisant des templates prêts à l’emploi (cf. chapitre Architecture des Projets) ;\nUtiliser Git pour versionner le code de ses projets, qu’ils impliquent d’autres développeurs ou seulement vous (cf. chapitre Versionner son code et travailler collaborativement avec Git) ;\ncontrôler les dépendances de son projet en développant dans des environnements virtuels (cf. chapitre Portabilité).\n\nLes étapes suivantes dans l’échelle de la reproductibilité dépendront de l’arbitrage coût-avantage. L’adoption du socle minimal de reproductibilité facilitera énormément l’avancée ultérieure dans l’ambition d’un projet.\nFaisons à présent un tour d’horizon des principes défendus dans ce cours et de la progression logique de celui-ci."
  },
  {
    "objectID": "chapters/introduction.html#le-code-est-un-outil-de-communication",
    "href": "chapters/introduction.html#le-code-est-un-outil-de-communication",
    "title": "Introduction",
    "section": "Le code est un outil de communication",
    "text": "Le code est un outil de communication\nLa première bonne pratique à adopter est de considérer le code comme un outil de communication, et non simplement de manière fonctionnelle. Un code ne sert pas seulement à réaliser une tâche donnée, il a vocation à être diffusé, réutilisé, maintenu, que ce soit dans le contexte d’une équipe dans une organisation ou bien en open-source.\nPour favoriser cette communication du code, des conventions ont été developpées en matière de qualité du code et de structuration des projets, qu’il est utile d’appliquer dans ses projets. Nous présentons ces conventions dans les chapitres Qualité du Code et Architecture des Projets.\nIl est pour les mêmes raisons indispensable d’appliquer les principes du contrôle de version, qui permettent une documentation en continu des projets, ce qui accroît fortement leur réutilisabilité et leur maintenabilité dans le temps. Nous proposons donc un chapitre de rappel sur l’utilisation du logiciel Git dans le chapitre Versionner son code et travailler collaborativement avec Git."
  },
  {
    "objectID": "chapters/introduction.html#travailler-de-manière-collaborative",
    "href": "chapters/introduction.html#travailler-de-manière-collaborative",
    "title": "Introduction",
    "section": "Travailler de manière collaborative",
    "text": "Travailler de manière collaborative\nLe data scientist, quel que soit son contexte de travail, est amené à travailler dans le cadre de projets en équipe. Cela implique de définir une organisation du travail ainsi que d’utiliser des outils permettant de collaborer sur un projet de manière efficace et sécurisée.\nNous présentons une manière moderne de travailler collaborativement avec Git et GitHub dans le chapitre de rappel Versionner son code et travailler collaborativement avec Git. Les autres chapitres prendront pour acquis cette approche collaborative et la raffineront à travers l’approche DevOps4."
  },
  {
    "objectID": "chapters/introduction.html#maximiser-la-reproductibilité",
    "href": "chapters/introduction.html#maximiser-la-reproductibilité",
    "title": "Introduction",
    "section": "Maximiser la reproductibilité",
    "text": "Maximiser la reproductibilité\nLe troisième pilier des bonnes pratiques présentées dans ce cours est la reproductibilité.\nUn projet est dit reproductible lorsque, avec le même code et les mêmes données, il est possible de reproduire les résultats obtenus. Notons bien que le problème de la reproductibilité est différent de celui de la réplicabilité. La réplicabilité est un concept scientifique, qui signifie qu’un même procédé expérimental donne des résultats analogues sur des jeux de données différents. La reproductibilité est un concept technique : elle ne signifie pas que le protocole expérimental est scientifiquement correct, mais qu’il a été spécifié et diffusé d’une manière qui permet à tous de reproduire les résultats obtenus.\nLa notion de reproductibilité est le fil rouge de ce cours : toutes les notions vues dans les différents chapitres y contribuent. Le fait de produire du code et des projets qui respectent les conventions communautaires, comme le fait d’utiliser le contrôle de version, contribuent à rendre le code plus lisible et documenté, et donc reproductible.\nIl faut néanmoins aller plus loin pour atteindre une véritable reproductibilité, et réfléchir à la notion d’environnement d’exécution. Un code n’est pas un objet autonome, il est toujours exécuté sur un environnement (ordinateur personnel, serveur, etc.), et ces environnements peuvent être très différents (système d’exploitation, librairies installées, contraintes de sécurité, etc.). C’est pourquoi il faut réfléchir à la portabilité de son code, i.e. sa capacité à s’exécuter de manière attendue sur différents environnements, ce qui sera l’objet d’un chapitre à part entière."
  },
  {
    "objectID": "chapters/introduction.html#faciliter-la-mise-en-production",
    "href": "chapters/introduction.html#faciliter-la-mise-en-production",
    "title": "Introduction",
    "section": "Faciliter la mise en production",
    "text": "Faciliter la mise en production\nPour qu’un projet de data science crée in fine de la valeur, il faut qu’il soit déployé sous une forme valorisable de sorte à toucher son public. Cela implique deux choses :\n\ntrouver le format de diffusion adapté, i.e. qui valorise au mieux les résultas obtenus auprès des utilisateurs potentiels ;\nfaire transitionner le projet de l’environnement dans lequel il a été développé vers une infrastructure de production, i.e. permettant un déploiement robuste de l’output du projet afin que celui-ci soit disponible à la demande.\n\nDans le chapitre Déployer et valoriser son projet de data science, nous proposons des pistes permettant de répondre à ces deux besoins. Nous présentons un certain nombre de formats standards (API, application, rapport automatisé, site internet) qui permettent à un projet de data science d’être valorisé, ainsi que les outils modernes qui permettent de les produire.\nNous détaillons ensuite les concepts essentiels du déploiement sur une infrastructure de production, et illustrons ces derniers par des exemples de déploiements dans un environnement cloud moderne.\nC’est en quelque sorte la récompense de l’application des bonnes pratiques : dès lors que l’on s’est donné la peine de produire un code et un projet appliquant des standards de qualité, que l’on a bien versionné son code, et que l’on a pris des mesures pour le rendre portable, le déploiement du projet dans un environnement de production s’en trouve largement facilité."
  },
  {
    "objectID": "chapters/introduction.html#une-ouverture-à-lindustrialisation-de-la-production",
    "href": "chapters/introduction.html#une-ouverture-à-lindustrialisation-de-la-production",
    "title": "Introduction",
    "section": "Une ouverture à l’industrialisation de la production",
    "text": "Une ouverture à l’industrialisation de la production\nEn simplifiant la structure d’un projet, on facilite sa production en série. Dans le domaine de la data science, cela prendra par exemple la forme d’une industrialisation des entraînements d’un modèle permettant de choisir le “meilleur” dans un ensemble beaucoup plus complet de modèles que ne le permettrait une approche artisanale.\nNéanmoins, tout modèle apprend du passé et avoir un bon modèle aujourd’hui n’assure en rien que ce dernier sera pertinent demain, lorsqu’on aura réellement besoin de celui-ci. Pour intégrer cette dimension mouvante inhérante à tout projet de data science, nous aurons l’occasion de présenter quelques principes du MLOps. Ce terme, qui est certes un buzz-word mais qui rassemble un ensemble pertinent de pratiques pour les data scientists, sera présenté dans le chapitre consacré."
  },
  {
    "objectID": "chapters/introduction.html#chapitres-supplémentaires",
    "href": "chapters/introduction.html#chapitres-supplémentaires",
    "title": "Introduction",
    "section": "Chapitres supplémentaires",
    "text": "Chapitres supplémentaires\nPlusieurs outils présentés tout au long de ce cours, tels que les logiciels Git et Docker, impliquent l’utilisation du terminal ainsi que des connaissances de base du fonctionnement d’un système Linux. Dans le chapitre Démystifier le terminal Linux pour gagner en autonomie, nous présentons les connaissances essentielles des systèmes Linux qu’un data scientist doit posséder pour pouvoir être autonome dans ses déploiements et dans l’application des bonnes pratiques de développement."
  },
  {
    "objectID": "chapters/introduction.html#approche-pédagogique",
    "href": "chapters/introduction.html#approche-pédagogique",
    "title": "Introduction",
    "section": "Approche pédagogique",
    "text": "Approche pédagogique\nLe parti pris de ce cours est que seule la pratique, et en particulier la confrontation à des problèmes issus de projets réels, permet d’acquérir efficacement des concepts informatiques. Aussi, une large part du cours consistera en l’application des notions étudiées à des cas concrets. Chaque chapitre se concluera par des applications touchant à des sujets réalistes de data science.\nUn exemple fil rouge illustre les progrès dans la conception d’un projet reproductible en appliquant successivement le contenu des chapitres de ce cours.\nPour l’évaluation générale du cours, l’idée sera de partir d’un projet personnel, idéalement terminé, et de lui appliquer un maximum de bonnes pratiques présentées dans ce cours."
  },
  {
    "objectID": "chapters/introduction.html#langages",
    "href": "chapters/introduction.html#langages",
    "title": "Introduction",
    "section": "Langages",
    "text": "Langages\nLes principes présentés dans ce cours sont pour la plupart agnostiques du langage de programmation utilisé.\nCe choix n’est pas qu’éditorial, c’est selon nous un aspect fondamental du sujet des bonnes pratiques. Trop souvent, des différences de langage entre les phases de développement (notamment R ou Python) et de mise en production (ex : Java) érigent des murs artificiels qui réduisent fortement la capacité à valoriser des projets de data science.\nA l’inverse, plus les différentes équipes qui forment le cycle de vie d’un projet s’accordent pour appliquer le même ensemble de bonnes pratiques, plus ces équipes développent un langage commun, et plus les déploiements en sont facilités.\nUn exemple parlant est l’utilisation de la conteneurisation : si le data scientist met à disposition une image Docker comme output de sa phase de développement et que le data engineer s’occupe de déployer cette image sur une infrastructure dédiée, le contenu même de l’application en termes de langage importe finalement assez peu. Cet exemple, certes simpliste, illustre malgré tout l’enjeu des bonnes pratiques en matière de communication au sein d’un projet.\nLes exemples présentés dans ce cours seront pour l’essentiel en Python. La raison principale est que ce langage, malgré ses défauts, est enseigné dans la majorité des cursus de data science mais aussi d’informatique. Il peut faciliter la passerelle entre le monde des utilisateurs de données et celui des développeurs informatiques, passerelle indispensable pour favoriser le dialogue entre ces deux profils, nécessaires tous deux pour un passage en production. Encore une fois, il est tout à fait possible d’appliquer les mêmes principes avec d’autres langages, et nous encourageons d’ailleurs les étudiants à s’essayer à cet exercice formateur."
  },
  {
    "objectID": "chapters/introduction.html#environnement-dexécution",
    "href": "chapters/introduction.html#environnement-dexécution",
    "title": "Introduction",
    "section": "Environnement d’exécution",
    "text": "Environnement d’exécution\nA l’instar du langage, les principes appliqués dans ce cours sont agnostiques à l’infrastructure utilisée pour faire tourner les exemples proposés. Il est donc à la fois possible et souhaitable d’appliquer les bonnes pratiques aussi bien à un projet individuel développé sur un ordinateur personnel qu’à un projet collaboratif visant à être déployé sur une infrastructure de production dédiée.\nCependant, nous choisissons comme environnement de référence tout au long de ce cours le SSP Cloud, une plateforme de services pour la data science développée à l’Insee et accessible aux élèves des écoles statistiques. Les raisons de ce choix sont multiples :\n\nl’environnement de développement est normalisé : les serveurs du SSP Cloud ont une configuration homogène — notamment, ils se basent sur une même distribution Linux (Debian) — ce qui garantit la reproductibilité des exemples présentés tout au long du cours ;\nvia un cluster Kubernetes sous-jacent, le SSP Cloud met à disposition une infrastructure robuste permettant le déploiement automatisé d’applications potentiellement intensives en données, ce qui permet de simuler un véritable environnement de production ;\nle SSP Cloud est construit selon les standards les plus récents des infrastructures data science, et permet donc d’acquérir les bonnes pratiques de manière organique :\n\nles services sont lancés via des conteneurs, configurés par des images Docker. Cela permet de garantir une forte reproductibilité des déploiements, au prix d’une phase de développement un peu plus coûteuse ;\nle SSP Cloud est basé sur une approche dite cloud native : il est construit sur un ensemble modulaire de briques logicielles, qui permettent d’appliquer une séparation nette du code, des données, de la configuration et de l’environnement d’exécution, principe majeur des bonnes pratiques qui reviendra tout au long de ce cours.\n\n\nPour en savoir plus sur cette plateforme, vous pouvez consulter cette page."
  },
  {
    "objectID": "chapters/introduction.html#ressources-complémentaires",
    "href": "chapters/introduction.html#ressources-complémentaires",
    "title": "Introduction",
    "section": "Ressources complémentaires",
    "text": "Ressources complémentaires\n\nMissing semester du MIT"
  },
  {
    "objectID": "chapters/introduction.html#footnotes",
    "href": "chapters/introduction.html#footnotes",
    "title": "Introduction",
    "section": "Footnotes",
    "text": "Footnotes\n\n\nCelui que vous connaissez certainement le mieux est le Notebook Jupyter. Très pratique pour produire du code exploratoire ou pour transmettre un code avec de la documentation, nous aurons l’occasion de découvrir ses limites dans le cadre d’un projet collaboratif ou un projet à grande échelle.↩︎\nNous aurons l’occasion ultérieurement de définir de manière formelle cette notion centrale. En attendant, on peut entendre ce concept comme un environnement disponible en continu afin de mettre à disposition une valorisation de données. Cela prend souvent la forme d’un serveur de production ou d’un cluster informatique qui doit être disponible en continu.↩︎\nL’aspect très intriqué des notions de bonnes pratiques, de reproductibilité et de mise en production nous a d’ailleurs longtemps fait hésiter sur le nom à donner à ce cours. Parmi la shortlist des noms possibles, nous avions “Bonnes pratiques en data science” ou “Bonnes pratiques pour la reproductibilité en data science. Néanmoins, les bonnes pratiques restent un moyen là où la mise en production est la finalité, nous avons ainsi privilégié le fait de mettre en avant cette dernière notion.↩︎\nDémarche consistant à automatiser et intégrer la conception et la production des livrables avant la phase de mise en production. Comme les bonnes pratiques, cette approche issue à l’origine du monde du développement logiciel est devenue incontournable pour les data scientists.↩︎"
  },
  {
    "objectID": "chapters/galerie.html",
    "href": "chapters/galerie.html",
    "title": "Galerie d’exemples",
    "section": "",
    "text": "Une galerie d’exemple de projets à venir\n\n\n\n\n\n\n  \n     \n      \n        \n          \n            \n          \n         \n        \n          \n            Modèle de carte\n            \n\n            \n              \n            \n\n            \n            \n              \n                \n                \n              \n            \n            \n            \n              \n                \n                  Github \n                \n              \n              \n                \n                  Website \n                \n                          \n            \n          \n        \n      \n     \n  \n\n  \n     \n      \n        \n          \n            \n          \n         \n        \n          \n            PrimePredict\n            \n\n            \n              \n            \n\n            \n            \n              \n                \n                \n              \n            \n            \n            \n              \n                \n                  Github \n                \n              \n              \n                \n                  Website \n                \n                          \n            \n          \n        \n      \n     \n  \n\n  \n     \n      \n        \n          \n            \n          \n         \n        \n          \n            ResultAthle\n            \n\n            \n              \n            \n\n            \n            \n              \n                \n                \n              \n            \n            \n            \n              \n                \n                  Github \n                \n              \n              \n                \n                  Website \n                \n                          \n            \n          \n        \n      \n     \n  \n\n\n\n\nNo matching items\n\n\n\n\n\n\nReuseCC BY-NC 4.0"
  },
  {
    "objectID": "chapters/deployment.html",
    "href": "chapters/deployment.html",
    "title": "Déploiement",
    "section": "",
    "text": "Dérouler les slides ci-dessous ou cliquer ici pour afficher les slides en plein écran.\n\n\n\n\n\n\n\nPage en construction.\n\n\n\n\nReuseCC BY-NC 4.0"
  },
  {
    "objectID": "chapters/big-data.html",
    "href": "chapters/big-data.html",
    "title": "Traitement des données volumineuses",
    "section": "",
    "text": "Dérouler les slides ci-dessous ou cliquer ici pour afficher les slides en plein écran.\nLe phénomène du big data est maintenant bien documenté : la génération et la collecte de données par une multitude de sources (capteurs IoT, interactions quotidiennes sur les réseaux sociaux, transactions en ligne, dispositifs mobiles, etc.) démultiplie les volumes de données disponibles pour l’analyse. Les raisons pouvant mener à s’intéresser à de telles données pour des projets de data science sont nombreuses : haute disponibilité, plus grande finesse des phénomènes observés, bases pour l’entraînement de modèles de ML de plus en plus gourmands (comme les LLM), etc.\nOn définit souvent le big data comme étant la situation où les données sont volumineuses au point qu’on ne soit plus en mesure de les traiter sur une unique machine. Cette définition relativiste peut sembler réductrice mais présente néanmoins l’intérêt de souligner qu’une source de données peut, selon les époques et les environnements, faire appel à des compétences différentes. Le fait de passer à des données big data n’est en effet pas seulement un changement de volume: on change souvent de nature d’infrastructure informatique et cela a des implications fortes sur les compétences à mettre en oeuvre pour traiter des données et l’évolutivité des chaines de production en question.\nEn contrepartie, le traitement de ces données génère de nouveaux défis. Ces derniers peuvent être résumés par les “trois V”, une manière désormais admise de caractériser ces nouvelles sources de données (Sagiroglu and Sinanc 2013) :\nLorsque l’on envisage de passer en production un projet de data science basé sur des données volumineuses, l’adoption de bonnes pratiques de développement n’est pas seulement recommandée, elle est indispensable. En effet, les données volumineuses voire massives introduisent une complexité significative dans tous les aspects du cycle de vie d’un projet de data science, de la collecte et du stockage des données à leur traitement et analyse. Les systèmes doivent être conçus pour non seulement gérer le volume actuel de données, mais aussi pour être évolutifs face à une croissance future inévitable. Les bonnes pratiques de développement facilitent cette évolutivité en promouvant des architectures modulaires, des codes réutilisables, et des technologies adaptées au traitement des grandes quantités de données.\nFace à ces enjeux, le choix des technologies est primordial. Dans ce cours, nous présenterons trois axes principaux qui peuvent guider ces choix : l’infrastructure informatique, des formats de données adaptés aux données volumineuses, et des frameworks (solutions logicielles et leur écosystème) utilisés pour le traitement de la donnée."
  },
  {
    "objectID": "chapters/big-data.html#evolution-des-infrastructures-de-données",
    "href": "chapters/big-data.html#evolution-des-infrastructures-de-données",
    "title": "Traitement des données volumineuses",
    "section": "Evolution des infrastructures de données",
    "text": "Evolution des infrastructures de données\nHistoriquement, les données ont été stockées dans des bases de données, c’est à dire des systèmes de stockage et d’organisation de la donnée. Ces objets ont vu le jour dans les années 1950, et ont connu un essor particulier avec les bases de données relationnelles dans les années 1980. Cette technologie se révélant particulièrement pertinente pour organiser le stockage des données “métier” des entreprises, elle a été à la base des data warehouses, qui ont longtemps constitué la référence des infrastructures de stockage de la donnée (Chaudhuri and Dayal 1997). Si leur implémentation technique peut être de nature variée, leur principe est simple : des données de sources multiples et hétérogènes sont intégrées dans un système de bases de données relationnel selon des règles métier grâce à des processus dits ETL (extract-transform-load), afin de les rendre directement accessibles pour une variété d’usages (analyse statistique, reporting, etc.) à l’aide d’un langage normalisé : SQL (Figure 1).\n\n\n\n\n\n\nFigure 1: Architecture d’un data warehouse. Source : airbyte.com\n\n\n\nAu début des années 2000, la montée en puissance des usages de nature big data dans les entreprises met en lumière les limites des data warehouses traditionnels. D’une part, les données traités présentent une diversité croissante de formats (structurés, semi-structurés et non structurés) et un format changeant au gré de l’ajout de fonctionnalités sur les plateformes web collectant des données. Ces éléments rentre difficilement dans le monde ordonné des data warehouses, qui nécessite de spécifier a priori le schéma des données. Pour pallier ces limites, de nouvelles infrastructures de stockage vont être développées : les data lakes, qui permettent la collecte et le stockage de quantités massives de données de nature diverse (Figure 2).\n\n\n\n\n\n\nFigure 2: Architecture d’un data lake. Source : cartelis.com\n\n\n\nD’autre part, la taille considérable de ces données rend de plus en plus difficile leur exploitation sur une unique machine. C’est dans ce contexte que Google publie le paradigme MapReduce (Ghemawat, Gobioff, and Leung 2003; Dean and Ghemawat 2008), posant les bases d’une nouvelle génération de systèmes permettant de traiter de larges volumes de données de manière distribuée. Dans les infrastructures traditionnelles, le passage à l’échelle était réalisé selon un principe de scalabilité verticale, c’est à dire en augmentant la puissance d’une machine de calcul ou en choisissant une machine plus performante. Cette approche devient néanmoins rapidement très coûteuse et se heurte aux limites physiques des composants. A l’inverse, les architectures distribuées adoptent le principe de scalabité horizontale : en installant des serveurs — chacun d’une puissance limitée — en parallèle et en adaptant les algorithmes à cette logique distribuée, on parvient à traiter des données massives avec du matériel standard. Dans la lignée de ces travaux, émerge l’écosystème Hadoop qui offre une combinaison de technologies complémentaires : un data lake (HDFS - Hadoop Distributed File System), un moteur de calcul distribué (MapReduce) et des outils d’intégration et de transformation de la donnée (Figure 3). Cet éco-système est progressivement complété par des outils qui vont démocratiser la capacité à traiter des données big data : Hive, qui convertit des requêtes SQL en traitements MapReduce distribués, puis Spark, qui lève certaines limites techniques de MapReduce et fournit des API dans plusieurs langages (Java, Scala, Python, etc.). Le succès de l’éco-système Hadoop dans les entreprises est considérable dans la mesure où il permet de traiter des volumes de données sans précédent — jusqu’au péta-octet — et des vélocités considérables — jusqu’au temps réel — à l’aide de langages de programmation non réservés aux seuls informaticiens.\nC’est ce mouvement technologique qui a permis l’engouement pour le big data, offrant les moyens techniques pour répondre à de nouvelles questions à partir de sources de données volumineuses. Au delà du sujet technique, ces changements ont entraîné une révolution paradigmatique dans le domaine de la data. Plutôt que de collecter un volume limité de données correspondant à quelques besoins bien identifiés, il est plus simple d’empiler la donnée dans des entrepôts et, seulement ensuite, lors du traitement, se poser la question de la valeur de celles-ci. Cette philosophie est typique des environnements reposant sur l’approche NoSQL (“Not only SQL”) où les données sont, comme dans l’écosystème SQL, enregistrées à chaque événement transactionnel, mais où celles-ci sont empilées dans des formats plus flexibles que dans les bases de données traditionnelles. Parmi les formats de prédilection de ce domaine, le JSON, issu de transactions web, tient la dragée haute. Selon la nature plus ou moins structurée des données, il existe des outils différents pour les requêter: ElasticSearch ou MongoDB pour des données textuelles, Spark pour des données tabulaires, etc. Le trait commun entre ces outils et qu’ils sont très scalables horizontalement, ce qui les rend idéaux pour être utilisés dans des fermes de serveurs.\n\n\n\n\n\n\nFigure 3: Représentation schématique d’une architecture Hadoop. La donnée volumineuse est découpée en blocs, et le stockage ainsi que le traitement des différents blocs sont distribués sur plusieurs nœuds de calcul. Les algorithmes utilisés pour traiter la donnée sont adaptés au mode distribué via le paradigme MapReduce : on applique à chaque bloc une fonction (étape “map” ; par exemple, compter les fréquences des mots qui apparaissent dans les documents d’un bloc), puis on effectue une étape d’agrégation (étape “reduce” ; par exemple, agréger les fréquences des différents blocs pour obtenir des fréquences agrégées sur l’ensemble des données initiales). Les données en sortie de ces deux étapes sont généralement de taille bien inférieure à celle des données source, et peuvent donc être rapatriées en local pour des traitements ultérieurs (ex : faire de la visualisation de données). Source : glennklockwood.com\n\n\n\nÀ la fin des années 2010, les architectures basées sur Hadoop connaissent néanmoins un net déclin de popularité. Dans les environnements Hadoop traditionnels, le stockage et le calcul sont co-localisés par construction : si les données à traiter sont réparties sur plusieurs serveurs, chaque section des données est directement traitée sur la machine hébergeant cette section, afin d’éviter les transferts réseau entre serveurs. Dans ce paradigme, la mise à l’échelle de l’architecture implique une augmentation linéaire à la fois des capacités de calcul et de stockage, indépendamment de la demande réelle. Dans un article volontairement provocateur et intitulé “Big Data is Dead” (Tigani 2023), Jordan Tigani, l’un des ingénieurs fondateurs de Google BigQuery, explique pourquoi ce modèle ne correspond plus à la réalité de la plupart des organisations exploitant intensivement de la donnée. Premièrement, parce que “dans la pratique, la taille des données augmente beaucoup plus rapidement que les besoins en calcul”. Même si la quantité de données générées et nécessitant donc d’être stockées croît de manière rapide au fil du temps, il n’est généralement pas nécessaire d’interroger l’ensemble des données stockées mais seulement les portions les plus récentes, ou seulement certaines colonnes et/ou groupes de lignes. Par ailleurs, Tigani souligne que “la frontière du big data ne cesse de reculer” : les avancées dans les capacités des serveurs et la baisse des coûts du matériel signifient que le nombre de charges de travail ne tenant pas sur une seule machine — une définition simple mais efficace du big data — a diminué de manière continue (Figure 4). L’apparition de nouveaux formats de données rendant plus efficients à la fois le stockage et le traitement de la donnée en mémoire participent également à cette dynamique (voir Section 2). En conséquence, en séparant correctement les fonctions de stockage et de calcul, même les traitements de données substantiels peuvent finir par utiliser “beaucoup moins de calcul que prévu […] et pourraient même ne pas avoir besoin d’un traitement distribué du tout”. Ces enseignements plaident donc de manière générale pour le choix d’infrastructures dans lesquelles ressources de calcul et de stockage sont le plus faiblement couplées possibles.\n\n\n\n\n\n\nFigure 4: “The big data frontier keeps receding” : la part des traitements de données ne pouvant être réalisés sur une seule machine a continuellement diminué au cours de la dernière décennie. Source : motherduck.com"
  },
  {
    "objectID": "chapters/big-data.html#lapport-des-technologies-cloud",
    "href": "chapters/big-data.html#lapport-des-technologies-cloud",
    "title": "Traitement des données volumineuses",
    "section": "L’apport des technologies cloud",
    "text": "L’apport des technologies cloud\nDans la lignée des observations de Tigani, on observe ces dernières années une transition marquée des organisations vers des architectures plus flexibles et faiblement couplées. L’avènement des technologies cloud a joué un rôle déterminant dans cette transition, et ce pour plusieurs raisons. D’abord, une raison technique : par rapport à l’époque où Hadoop constituait l’infrastructure big data de référence, la latence des flux réseaux est devenue une préoccupation bien moindre, rendant le modèle de co-localisation du stockage et des ressources de calcul sur de mêmes machines moins pertinent. Ensuite, une raison liée aux usages : si le volume des données générées continue de croître, c’est surtout la diversification des données exploitées qui marque l’évolution récente de l’éco-système. Les infrastructures modernes doivent doivent non seulement être capables de traiter de grands volumes, mais aussi être adaptables sur de multiples dimensions. Elles doivent pouvoir prendre en charge diverses structures de données (allant des formats structurés et tabulaires aux formats non structurés comme le texte, les images, le son et la vidéo) et permettre une large gamme de techniques computationnelles, du calcul parallèle aux modèles d’apprentissage profond qui nécessitent des GPU, ainsi que le déploiement et la gestion d’applications (Li et al. 2020).\nCes dernières années, deux technologies intimement liée au cloud — justifiant leur qualificatif de technologies cloud-native — ont émergé comme des solutions essentielles pour atteindre ce besoin d’environnements de calcul plus flexibles : la conteneurisation et le stockage objet. La conteneurisation est une technologie centrale dès lors qu’on aborde le sujet de la mise en production, dans la mesure où elle permet de garantir la reproductibilité et la portabilité des projets, c’est à dire leur capacité à fonctionner correctement dans différents environnements de traitement. Par conséquent, la technologie des conteneurs sera présentée en détail dans les chapitres concernant la Portabilité et le Déploiement. Nous nous concentrons dans cette section sur la deuxième technologie cloud-native devenue un standard dans les infrastructures de données modernes : le stockage objet.\nLes conteneurs étant par construction sans état (stateless), il est nécessaire dans une infrastructure conteneurisée de prévoir une couche de persistence pour stocker à la fois les données brutes en entrée des traitements et les données transformées en sortie de ces derniers (Figure 5). Dans l’écosystème des infrastructures de données conteneurisées, le stockage dit “objet” s’est progressivement imposé comme référence, largement popularisée par l’implémentation S3 (Amazon Simple Storage Service) d’Amazon (Mesnier, Ganger, and Riedel 2003; Samundiswary and Dongre 2017). Afin de comprendre cette prédominance, il est utile de comparer ce mode de stockage aux autres modes existants.\nSchématiquement, on peut distinguer trois grandes approches en matière de stockage : le stockage de fichiers (filesystem), le stockage par bloc (block storage) et le stockage d’objets (object storage) (Figure 5). Le stockage de fichiers est le plus intuitif : les données sont organisées sous forme d’une structure hiérarchique de répertoires et de fichiers — comme sur un ordinateur personnel. Facile d’utilisation et adapté aux environnements traditionnels, ce mode de stockage passe difficilement à l’échelle et requiert des interventions manuelles pour monter et gérer les accès aux fichiers, ce qui restreint l’autonomie des utilisateurs et n’est pas adapté aux environnements de traitement éphémères comme les conteneurs. Le stockage par bloc propose un accès de bas niveau aux données sous forme de blocs contigus — à l’image du stockage sur un disque dur — garantissant des performances élevées et une faible latence. Il s’avère donc très pertinent pour des applications qui exigent un accès rapide aux données stockées, comme une base de données. En revanche, il passe là encore difficilement à l’échelle du fait du coût de la technologie et de la difficulté à faire croître horizontalement ce type de stockage. Enfin, le stockage objet divise quant à lui les fichiers de données en morceaux appelés “objets” qui sont ensuite stockés dans un référentiel unique, qui peut être distribué sur plusieurs machines. Chaque objet se voit attribuer un certain nombre de métadonnées (nom de l’objet, taille, date de création, etc.) dont un identifiant unique qui permet au système de retrouver l’objet sans la nécessité d’une structure hiérarchique comme celle d’un filesystem, ce qui réduit drastiquement le coût du stockage.\n\n\n\n\n\n\nFigure 5: Comparaison des principaux systèmes de stockage de la donnée. Source : bytebytego.com\n\n\n\nLes différentes propriétés du stockage objet le rendent particulièrement pertinent pour construire une infrastructure conteneurisée pour la data science. D’abord, il est optimisé pour la scalabilité : les objets stockés ne sont pas limités en taille et la technologie sous-jacente permet un stockage efficient de fichiers potentiellement très volumineux, si besoin en les distribuant horizontalement. Ensuite, il est source d’autonomie pour les utilisateurs : en stockant les données sous forme d’objets enrichis de métadonnées et accessibles via l’API standardisée S3 d’Amazon (Figure 5), il permet aux utilisateurs d’interagir directement avec le stockage via leur code applicatif (en R, Python, etc.) tout en offrant une gestion très fine des permissions — jusqu’aux droits sur un fichier — vie des jetons d’accès, garantissant ainsi une traçabilité accrue des opérations effectuées. Enfin, le stockage objet joue un rôle clé dans l’objectif de construction d’une infrastructure découplée comme celle évoquée précédemment. Dans la mesure où les dépôts de données — appelés “buckets” — sont interrogeables via des requêtes HTTP standards, les environnements de calcul peuvent importer par le biais du réseau les données nécessaires aux traitements réalisés. Ainsi, les ressources de stockage et de calcul n’ont plus besoin d’être sur les mêmes machines ni même nécessairement dans le même lieu, et peuvent ainsi évoluer indépendamment en fonction des besoins spécifiques de l’organisation.\n\n\n\n\n\n\nFigure 6: Dans une infrastructure basée sur des conteneurs — stateless par construction — le stockage objet permet de fournir la couche de persistence. MinIO est une solution open-source de stockage objet qui s’intègre nativement avec Kubernetes. Par ailleurs, elle est compatible avec l’API S3, qui est devenu le standard dominant pour l’interaction avec des systèmes de stockage objet. Ce système de stockage est donc par construction interopérable avec différents environnements de calcul. Source : lemondeinformatique.fr"
  },
  {
    "objectID": "chapters/big-data.html#application-3",
    "href": "chapters/big-data.html#application-3",
    "title": "Traitement des données volumineuses",
    "section": "Application 3",
    "text": "Application 3\n\n\n\n\n\n\nPartie 3a : Et si on filtrait sur les lignes ?\n\n\n\n\n\nAjoutez une étape de filtre sur les lignes dans nos requêtes:\n\nAvec DuckDB, vous devez modifier la requête avec un WHERE DEPT IN ('18', '28', '36')\nAvec Arrow, vous devez modifier l’étape to_table de cette manière: dataset.to_table(filter=pc.field(\"DEPT\").isin(['18', '28', '36']))\n\n\n\nCorrection de cet exercice\nimport pyarrow.dataset as ds\nimport pyarrow.compute as pc\nimport duckdb\n\n@measure_performance\ndef summarize_filter_parquet_arrow(*args, **kwargs):\n\n    dataset = ds.dataset(\"data/RPindividus.parquet\", format=\"parquet\")\n    table = dataset.to_table(filter=pc.field(\"DEPT\").isin(['18', '28', '36']))\n    grouped_table = (\n        table\n        .group_by([\"AGED\", \"DEPT\"])\n        .aggregate([(\"IPONDI\", \"sum\")])\n        .rename_columns([\"AGED\", \"DEPT\", \"n_indiv\"])\n        .to_pandas()\n    )\n\n    return (\n        grouped_table\n    )\n\n@measure_performance\ndef summarize_filter_parquet_duckdb(*args, **kwargs):\n    con = duckdb.connect(\":memory:\")\n    query = \"\"\"\n    FROM read_parquet('data/RPindividus_24.parquet')\n    SELECT AGED, DEPT, SUM(IPONDI) AS n_indiv\n    WHERE DEPT IN ('11','31','34')\n    GROUP BY AGED, DEPT\n    \"\"\"\n\n    return (con.sql(query).to_df())\n\n\nsummarize_filter_parquet_arrow()\nsummarize_filter_parquet_duckdb()\n\n\n\n\n\n❓️ Pourquoi ne gagne-t-on pas de temps avec nos filtres sur les lignes (voire pourquoi en perdons nous?) comme c’est le cas avec les filtres sur les colonnes ?\nLa donnée n’est pas organisée par blocs de lignes comme elle l’est pas bloc de colonne. Heureusement, il existe pour cela un moyen: le partitionnement !\n\n\n\n\n\n\nPartie 3 : Le Parquet partitionné\n\n\n\n\n\nLa lazy evaluation et les optimisations d’Arrow apportent des gain de performance considérables. Mais on peut encore faire mieux ! Lorsqu’on sait qu’on va être amené à filter régulièrement les données selon une variable d’intérêt, on a tout intérêt à partitionner le fichier Parquet selon cette variable.\n\nParcourir la documentation de la fonction pyarrow.parquet.write_to_dataset pour comprendre comment spécifier une clé de partitionnement lors de l’écriture d’un fichier Parquet. Plusieurs méthodes sont possibles.\nImporter la table complète des individus du recensement depuis \"data/RPindividus.parquet\" avec la fonction pyarrow.dataset.dataset et l’exporter en une table partitionnée \"data/RPindividus_partitionne.parquet\", partitionnée par la région (REGION) et le département (DEPT).\nObserver l’arborescence des fichiers de la table exportée pour voir comment la partition a été appliquée.\nModifier nos fonctions d’import, filtre et agrégations via Arrow ou DuckDB pour utiliser, cette fois, le Parquet partitionné. Comparer à l’utilisation du fichier non partitionné.\n\n\n\nCorrection de la question 2 (écriture du Parquet partitionné)\nimport pyarrow.parquet as pq\ndataset = ds.dataset(\n    \"data/RPindividus.parquet\", format=\"parquet\"\n).to_table()\n\npq.write_to_dataset(\n    dataset,\n    root_path=\"data/RPindividus_partitionne\",\n    partition_cols=[\"REGION\", \"DEPT\"]\n)\n\n\n\n\nCorrection de la question 4 (lecture du Parquet partitionné)\nimport pyarrow.dataset as ds\nimport pyarrow.compute as pc\nimport duckdb\n\n@measure_performance\ndef summarize_filter_parquet_partitioned_arrow(*args, **kwargs):\n\n    dataset = ds.dataset(\"data/RPindividus_partitionne/\", partitioning=\"hive\")\n    table = dataset.to_table(filter=pc.field(\"DEPT\").isin(['18', '28', '36']))\n\n    grouped_table = (\n        table\n        .group_by([\"AGED\", \"DEPT\"])\n        .aggregate([(\"IPONDI\", \"sum\")])\n        .rename_columns([\"AGED\", \"DEPT\", \"n_indiv\"])\n        .to_pandas()\n    )\n\n    return (\n        grouped_table\n    )\n\n@measure_performance\ndef summarize_filter_parquet_complete_arrow(*args, **kwargs):\n\n    dataset = ds.dataset(\"data/RPindividus.parquet\")\n    table = dataset.to_table(filter=pc.field(\"DEPT\").isin(['18', '28', '36']))\n\n    grouped_table = (\n        table\n        .group_by([\"AGED\", \"DEPT\"])\n        .aggregate([(\"IPONDI\", \"sum\")])\n        .rename_columns([\"AGED\", \"DEPT\", \"n_indiv\"])\n        .to_pandas()\n    )\n\n    return (\n        grouped_table\n    )\n\n\n@measure_performance\ndef summarize_filter_parquet_complete_duckdb(*args, **kwargs):\n    con = duckdb.connect(\":memory:\")\n    query = \"\"\"\n    FROM read_parquet('data/RPindividus.parquet')\n    SELECT AGED, DEPT, SUM(IPONDI) AS n_indiv\n    WHERE DEPT IN ('11','31','34')\n    GROUP BY AGED, DEPT\n    \"\"\"\n\n    return (con.sql(query).to_df())\n\n\n@measure_performance\ndef summarize_filter_parquet_partitioned_duckdb(*args, **kwargs):\n    con = duckdb.connect(\":memory:\")\n    query = \"\"\"\n    FROM read_parquet('data/RPindividus_partitionne/**/*.parquet', hive_partitioning = True)\n    SELECT AGED, DEPT, SUM(IPONDI) AS n_indiv\n    WHERE DEPT IN ('11','31','34')\n    GROUP BY AGED, DEPT\n    \"\"\"\n\n    return (con.sql(query).to_df())\n\n\nsummarize_filter_parquet_complete_arrow()\nsummarize_filter_parquet_partitioned_arrow()\nsummarize_filter_parquet_complete_duckdb()\nsummarize_filter_parquet_partitioned_duckdb()\n\n\n\n\n\n❓️ Dans le cadre d’une mise à disposition de données en Parquet, comment bien choisir la/les clé(s) de partitionnement ? Quelle est la limite à garder en tête ?"
  },
  {
    "objectID": "chapters/big-data.html#pour-aller-plus-loin",
    "href": "chapters/big-data.html#pour-aller-plus-loin",
    "title": "Traitement des données volumineuses",
    "section": "Pour aller plus loin",
    "text": "Pour aller plus loin\n\nLa formation aux bonnes pratiques R et Git développée par l’Insee avec des éléments très similaires à ceux présentés dans ce chapitre.\nUn atelier sur le format Parquet et l’écosystème DuckDB pour l’EHESS avec des exemples R et Python utilisant la même source de données que l’application.\nLe guide de prise en main des données du recensement au format Parquet avec des exemples d’utilisation de DuckDB en WASM (directement depuis le navigateur, sans installation R ou Python)"
  },
  {
    "objectID": "chapters/application.html",
    "href": "chapters/application.html",
    "title": "Application",
    "section": "",
    "text": "Dérouler les slides ci-dessous ou cliquer ici pour afficher les slides en plein écran."
  },
  {
    "objectID": "chapters/application.html#objectif",
    "href": "chapters/application.html#objectif",
    "title": "Application",
    "section": "Objectif",
    "text": "Objectif\nL’objectif est d’améliorer le projet de manière incrémentale jusqu’à pouvoir le mettre en production, en le valorisant sous une forme adaptée et en adoptant une méthode de travail fluidifiant les évolutions futures.\nLa Figure 1 montre que notre point de départ initial, à savoir un notebook, mélange tout. Ceci rend très complexe la mise à jour de notre modèle ou l’exploitation de notre modèle sur de nouvelles données, ce qui est pourtant la raison d’être du machine learning qui est pensé pour l’extrapolation. Si on vous demande de valoriser votre modèle sur de nouvelles données, vous risquez de devoir refaire tourner tout votre notebook, avec le risque de ne pas retrouver les mêmes résultats que dans la version précédente.\nLa Figure 2 illustre l’horizon auquel nous aboutirons à la fin de cette application. Nous désynchronisons les étapes d’entraînement et de prédiction, en identifiant mieux les pré-requis de chacune et en adoptant des briques technologiques adaptées à celles-ci. Les noms présents sur cette figure sont encore obscurs, c’est normal, mais ils vous deviendrons familiers si vous adoptez une infrastructure et une méthode de travail à l’état de l’art.\n\n\n\n\n\n\nFigure 1: Illustration de notre point de départ\n\n\n\n\n\n\n\n\n\nFigure 2: Illustration de l’horizon vers lequel on se dirige\n\n\n\n\n\n\n\n\n\nImportant\n\n\n\nIl est important de bien lire les consignes et d’y aller progressivement. Certaines étapes peuvent être rapides, d’autres plus fastidieuses ; certaines être assez guidées, d’autres vous laisser plus de liberté. Si vous n’effectuez pas une étape, vous risquez de ne pas pouvoir passer à l’étape suivante qui en dépend.\nBien que l’exercice soit applicable sur toute configuration bien faite, nous recommandons de privilégier l’utilisation du SSP Cloud, où tous les outils nécessaires sont pré-installés et pré-configurés. Le service VSCode ne sera en effet que le point d’entrée pour l’utilisation d’outils plus exigeants sur le plan de l’infrastructure: Argo, MLFLow, etc."
  },
  {
    "objectID": "chapters/application.html#ce-que-cette-application-ne-couvre-pas-pour-le-moment",
    "href": "chapters/application.html#ce-que-cette-application-ne-couvre-pas-pour-le-moment",
    "title": "Application",
    "section": "Ce que cette application ne couvre pas (pour le moment)",
    "text": "Ce que cette application ne couvre pas (pour le moment)\nA l’heure actuelle, cette application se concentre sur la mise en oeuvre fiable de l’entraînement de modèles de machine learning. Comme vous pouvez le voir, quand on part d’aussi loin qu’un projet monolithique dans un notebook, c’est un travail conséquent d’en arriver à un pipeline pensé pour la production. Cette application vise à vous sensibiliser au fait qu’avoir la Figure 2 en tête et adopter une organisation de travail et faire des choix techniques adéquats, vous fera économiser des dizaines voire centaines d’heures lorsque votre modèle aura vocation à passer en production.\nA l’heure actuelle, cette application ne se concentre que sur une partie du cycle de vie d’un projet data ; il y a déjà fort à faire. Nous nous concentrons sur l’entraînement et la mise à disposition d’un modèle à des fins opérationnelles. C’est la première partie du cycle de vie d’un modèle. Dans une approche MLOps, il faut également penser la maintenance de ce modèle et les enjeux que représentent l’arrivée continue de nouvelles données, ou le besoin d’en collecter de nouvelles à travers des annotations, sur la qualité prédictive d’un modèle. Toute entreprise qui ne pense pas cet après est vouée à se faire doubler par un nouveau venu. Une prochaine version de cette application permettra certainement d’illustrer certains des enjeux afférants à la vie en production d’un modèle (supervision, annotations…) sur notre cas d’usage.\nIl convient aussi de noter que nous ne faisons que parcourir la surface des sujets que nous évoquons. Ce cours, déjà dense, deviendrait indigeste si nous devions présenter chaque outil dans le détail. Nous laissons donc les curieux approfondir chacun des outils que nous présentons pour découvrir comment en tirer le maximum (et si vous avez l’impression que nous oublions des éléments cruciaux, les issues et pull requests  sont bienvenues)."
  },
  {
    "objectID": "chapters/application.html#comment-gérer-les-checkpoints",
    "href": "chapters/application.html#comment-gérer-les-checkpoints",
    "title": "Application",
    "section": "Comment gérer les checkpoints ?",
    "text": "Comment gérer les checkpoints ?\nPour simplifier la reprise en cours de ce fil rouge, nous proposons un système de checkpoints qui s’appuient sur des tags Git. Ces tags figent le projet tel qu’il est à l’issue d’un exercice donné.\nSi vous faites évoluer votre projet de manière expérimentale mais désirez tout de même utiliser à un moment ces checkpoints, il va falloir faire quelques acrobaties Git. Pour cela, nous mettons à disposition un script qui permet de sauvegarder votre avancée dans un tag donné (au cas où, à un moment, vous vouliez revenir dessus) et écraser la branche main avec le tag en question. Par exemple, si vous désirez reprendre après l’exercice 9, vous devrez faire tourner le code dans cette boite :\n  \n    \n      \n        \n      \n      \n        Checkpoint d'exemple      \n      \n    \n    \n      \n\n        \n        \n          \n            terminal\n          \n          \n            curl -sSL https://raw.githubusercontent.com/ensae-reproductibilite/website/refs/heads/main/chapters/applications/overwrite.sh -o update.sh && chmod +x update.sh\n./update.sh appli92\nrm -f update.sh\n          \n        \n        \n          1\n          Récupérer le script de checkpoint\n          2\n          Avancer à l’état à l’issue de l’application appli9\n          3\n          Nettoyer derrière nous\n        \n\n        \n          \n            \n          \n        \n      \n    \n  \n  \nCelui-ci sauvegarde votre avancée dans un tag nommé dev_before_appli9, le pousse sur votre dépôt Github  puis force votre branche à adopter l’état du tag appli9."
  },
  {
    "objectID": "chapters/application.html#étape-1-sassurer-que-le-script-sexécute-correctement",
    "href": "chapters/application.html#étape-1-sassurer-que-le-script-sexécute-correctement",
    "title": "Application",
    "section": "Étape 1 : s’assurer que le script s’exécute correctement",
    "text": "Étape 1 : s’assurer que le script s’exécute correctement\nOn va partir du fichier notebook.py qui reprend le contenu du notebook2 mais dans un script classique. Le travail de nettoyage en sera facilité.\nLa première étape est simple, mais souvent oubliée : vérifier que le code fonctionne correctement. Pour cela, nous recommandons de faire un aller-retour entre le script ouvert dans VSCode et un terminal pour le lancer.\n\n\n\n\n\n\nApplication 1: corriger les erreurs\n\n\n\n\nOuvrir dans VSCode le script titanic.py ;\nExécuter le script en ligne de commande (python titanic.py)3 pour détecter les erreurs ;\nCorriger les deux erreurs qui empêchent la bonne exécution ;\nVérifier le fonctionnement du script en utilisant la ligne de commande:\n\n\n\nterminal\n\n$ python titanic.py\n\nLe code devrait afficher des sorties.\n\n\nAide sur les erreurs rencontrées\n\nLa première erreur rencontrée est une alerte FileNotFoundError, la seconde est liée à un package.\n\nIl est maintenant temps de commit les changements effectués avec Git4 :\n\n\nterminal\n\n$ git add titanic.py\n$ git commit -m \"Corrige l'erreur qui empêchait l'exécution\"\n$ git push\n\n\n\n\n  \n    \n      \n        \n      \n      \n        Checkpoint post appli1      \n      \n    \n    \n      \n\n        \n        \n          \n            terminal\n          \n          \n            curl -sSL https://raw.githubusercontent.com/ensae-reproductibilite/website/refs/heads/main/chapters/applications/overwrite.sh -o update.sh && chmod +x update.sh\n./update.sh appli12\nrm -f update.sh\n          \n        \n        \n          1\n          Récupérer le script de checkpoint\n          2\n          Avancer à l’état à l’issue de l’application appli1\n          3\n          Nettoyer derrière nous"
  },
  {
    "objectID": "chapters/application.html#étape-2-utiliser-un-linter-puis-un-formatter",
    "href": "chapters/application.html#étape-2-utiliser-un-linter-puis-un-formatter",
    "title": "Application",
    "section": "Étape 2: utiliser un linter puis un formatter",
    "text": "Étape 2: utiliser un linter puis un formatter\nOn va maintenant améliorer la qualité de notre code en appliquant les standards communautaires. Pour cela, on va utiliser le linter classique PyLint et le formatter Black. Si vous désirez un outil deux en un, il est possible d’utiliser Ruff en complément ou substitut.\nCe nettoyage automatique du code permettra, au passage, de restructurer notre script de manière plus naturelle.\n\n\n\n\n\n\nImportant\n\n\n\nPyLint, Black et Ruff sont des packages Python qui s’utilisent principalement en ligne de commande.\nSi vous avez une erreur qui suggère que votre terminal ne connait pas PyLint, Black, ou Ruff, n’oubliez pas d’exécuter la commande pip install pylint, pip install black ou pip install ruff.\n\n\nLe linter PyLint renvoie alors une série d’irrégularités, en précisant à chaque fois la ligne de l’erreur et le message d’erreur associé (ex : mauvaise identation). Il renvoie finalement une note sur 10, qui estime la qualité du code à l’aune des standards communautaires évoqués dans la partie Qualité du code.\n\n\n\n\n\n\nApplication 2: rendre lisible le script\n\n\n\n\nDiagnostiquer et évaluer la qualité de titanic.py avec PyLint. Regarder la note obtenue.\nUtiliser black titanic.py --diff --color pour observer les changements de forme que va induire l’utilisation du formatter Black. Cette étape n’applique pas les modifications, elle ne fait que vous les montrer.\nAppliquer le formatter Black\nRéutiliser PyLint pour diagnostiquer l’amélioration de la qualité du script et le travail qui reste à faire.\nComme la majorité du travail restant est à consacrer aux imports:\n\nMettre tous les imports ensemble en début de script\nRetirer les imports redondants en s’aidant des diagnostics de votre éditeur\nRéordonner les imports si PyLint vous indique de le faire\nCorriger les dernières fautes formelles suggérées par PyLint\n\nDélimiter des parties dans votre code pour rendre sa structure plus lisible. Si des parties vous semblent être dans le désordre, vous pouvez réordonner le script (mais n’oubliez pas de le tester)\n\n\n\n\n  \n    \n      \n        \n      \n      \n        Checkpoint post appli2      \n      \n    \n    \n      \n\n        \n        \n          \n            terminal\n          \n          \n            curl -sSL https://raw.githubusercontent.com/ensae-reproductibilite/website/refs/heads/main/chapters/applications/overwrite.sh -o update.sh && chmod +x update.sh\n./update.sh appli22\nrm -f update.sh\n          \n        \n        \n          1\n          Récupérer le script de checkpoint\n          2\n          Avancer à l’état à l’issue de l’application appli2\n          3\n          Nettoyer derrière nous\n        \n\n        \n          \n            \n          \n        \n      \n    \n  \n  \nLe code est maintenant lisible, il obtient à ce stade une note formelle proche de 10. Mais il n’est pas encore totalement intelligible ou fiable. Il y a notamment quelques redondances de code auxquelles nous allons nous attaquer par la suite. Néanmoins, avant cela, occupons-nous de mieux gérer certains paramètres du script: jetons d’API et chemin des fichiers."
  },
  {
    "objectID": "chapters/application.html#étape-3-gestion-des-paramètres",
    "href": "chapters/application.html#étape-3-gestion-des-paramètres",
    "title": "Application",
    "section": "Étape 3: gestion des paramètres",
    "text": "Étape 3: gestion des paramètres\n  \n    \n      \n        \n      \n      \n        Reprendre à partir d'ici      \n      \n    \n    \n      \n\n        Si vous n'avez plus de VSCode actif avec la configuration proposée dans l'application préliminaire, vous pouvez repartir de ce service:    \n      \n    \n    Et ensuite, après avoir clôné le dépôt\n        \n          \n            terminal\n          \n          \n            curl -sSL https://raw.githubusercontent.com/ensae-reproductibilite/website/refs/heads/main/chapters/applications/overwrite.sh -o update.sh && chmod +x update.sh\n./update.sh appli22\nrm -f update.sh\n          \n        \n        \n          1\n          Récupérer le script de checkpoint\n          2\n          Avancer à l’état à l’issue de l’application appli2\n          3\n          Nettoyer derrière nous\n        \n\n        \n          \n            \n          \n        \n      \n    \n  \n  \nL’exécution du code et les résultats obtenus dépendent de certains paramètres définis dans le code. L’étude de résultats alternatifs, en jouant sur des variantes des (hyper)paramètres, est à ce stade compliquée car il est nécessaire de parcourir le code pour trouver ces paramètres. De plus, certains paramètres personnels comme des jetons d’API ou des mots de passe n’ont pas vocation à être présents dans le code.\nIl est plus judicieux de considérer ces paramètres comme des variables d’entrée du script. Cela peut être fait de deux manières:\n\nAvec des arguments optionnels appelés depuis la ligne de commande (Application 3a). Cela peut être pratique pour mettre en oeuvre des tests automatisés mais n’est pas forcément pertinent pour toutes les variables. Nous allons montrer cet usage avec le nombre d’arbres de notre random forest ;\nEn utilisant un fichier de configuration dont les valeurs sont importées dans le script principal (Application 3b).\n\n\n\nUn exemple de définition d’un argument pour l’utilisation en ligne de commande\n\n\n\nprenom.py\n\nimport argparse\nparser = argparse.ArgumentParser(description=\"Qui êtes-vous?\")\nparser.add_argument(\n    \"--prenom\", type=str, default=\"Toto\", help=\"Un prénom à afficher\"\n)\nargs = parser.parse_args()\nprint(args.prenom)\n\nExemples d’utilisations en ligne de commande\n\n\nterminal\n\n$ python prenom.py\n$ python prenom.py --prenom \"Zinedine\"\n\n\n\n\n\n\n\n\nApplication 3a: Paramétrisation du script\n\n\n\n\nEn s’inspirant de l’exemple ci-dessus 👆️, créer une variable n_trees qui peut éventuellement être paramétrée en ligne de commande et dont la valeur par défaut est 20 ;\nTester cette paramétrisation en ligne de commande avec la valeur par défaut puis 2, 10 et 50 arbres.\n\n\n\nL’exercice suivant permet de mettre en application le fait de paramétriser un script en utilisant des variables définies dans un fichier YAML.\n\n\n\n\n\n\nApplication 3b: La configuration dans un fichier dédié\n\n\n\n\nInstaller le package python-dotenv que nous allons utiliser pour charger notre jeton d’API à partir d’une variable d’environnement.\nA partir de l’exemple de la documentation, utiliser la fonction load_dotenv pour charger dans Python nos variables d’environnement à partir d’un fichier (vous pouvez le créer mais ne pas le remplir encore avec les valeurs voulues, ce sera fait ensuite)\nCréer la variable et vérifier la sortie de Python en faisant tourner titanic.py en ligne de commande\n\n\n\ntitanic.py\n\njeton_api = os.environ.get(\"JETON_API\", \"\")\n\nif jeton_api.startswith(\"$\"):\n    print(\"API token has been configured properly\")\nelse:\n    print(\"API token has not been configured\")\n\n\nMaintenant introduire la valeur voulue pour le jeton d’API dans le fichier d’environnement lu par dotenv\nS’il n’existe pas déjà, créer un fichier .gitignore (cf. Chapitre Git). Ajouter dans ce fichier .env car il ne faut pas committer ce fichier. Au passage ajouter __pycache__/ au .gitignore5, cela évitera d’avoir à le faire ultérieurement ;\nCréer un fichier README.md où vous indiquez qu’il faut créer un fichier .env pour pouvoir utiliser l’API.\n\n\n\n  \n    \n      \n        \n      \n      \n        Checkpoint post appli3      \n      \n    \n    \n      \n\n        \n        \n          \n            terminal\n          \n          \n            curl -sSL https://raw.githubusercontent.com/ensae-reproductibilite/website/refs/heads/main/chapters/applications/overwrite.sh -o update.sh && chmod +x update.sh\n./update.sh appli32\nrm -f update.sh\n          \n        \n        \n          1\n          Récupérer le script de checkpoint\n          2\n          Avancer à l’état à l’issue de l’application appli3\n          3\n          Nettoyer derrière nous"
  },
  {
    "objectID": "chapters/application.html#étape-4-privilégier-la-programmation-fonctionnelle",
    "href": "chapters/application.html#étape-4-privilégier-la-programmation-fonctionnelle",
    "title": "Application",
    "section": "Étape 4 : Privilégier la programmation fonctionnelle",
    "text": "Étape 4 : Privilégier la programmation fonctionnelle\nNous allons mettre en fonctions les parties importantes de l’analyse. Ceci facilitera l’étape ultérieure de modularisation de notre projet. Comme cela est évoqué dans les éléments magistraux de ce cours, l’utilisation de fonctions va rendre notre code plus concis, plus traçable, mieux documenté.\nCet exercice étant chronophage, il n’est pas obligatoire de le réaliser en entier. L’important est de comprendre la démarche et d’adopter fréquemment une approche fonctionnelle6. Pour obtenir une chaine entièrement fonctionnalisée, vous pouvez reprendre le checkpoint.\nPour commencer, cet exercice fait un petit pas de côté pour faire comprendre la manière dont les pipelines scikit sont un outil au service des bonnes pratiques.\n\n\n\n\n\n\nApplication 4 (optionnelle): pourquoi utiliser un pipeline Scikit ?\n\n\n\n\nLe pipeline Scikit d’estimation et d’évaluation vous a été donné tel quel. Regardez, ci-dessous, le code équivalent sans utiliser de pipeline Scikit:\n\n\n\nLe code équivalent sans pipeline\n\nfrom sklearn.impute import SimpleImputer\nfrom sklearn.preprocessing import MinMaxScaler, OneHotEncoder\nfrom sklearn.compose import ColumnTransformer\nfrom sklearn.ensemble import RandomForestClassifier\nfrom sklearn.metrics import confusion_matrix\n\nimport pandas as pd\nimport numpy as np\n\n# Définition des variables\nnumeric_features = [\"Age\", \"Fare\"]\ncategorical_features = [\"Embarked\", \"Sex\"]\n\n# PREPROCESSING ----------------------------\n\n# Handling missing values for numerical features\nnum_imputer = SimpleImputer(strategy=\"median\")\nX_train[numeric_features] = num_imputer.fit_transform(X_train[numeric_features])\nX_test[numeric_features] = num_imputer.transform(X_test[numeric_features])\n\n# Scaling numerical features\nscaler = MinMaxScaler()\nX_train[numeric_features] = scaler.fit_transform(X_train[numeric_features])\nX_test[numeric_features] = scaler.transform(X_test[numeric_features])\n\n# Handling missing values for categorical features\ncat_imputer = SimpleImputer(strategy=\"most_frequent\")\nX_train[categorical_features] = cat_imputer.fit_transform(X_train[categorical_features])\nX_test[categorical_features] = cat_imputer.transform(X_test[categorical_features])\n\n# One-hot encoding categorical features\nencoder = OneHotEncoder(handle_unknown='ignore', sparse_output=False)\nX_train_encoded = encoder.fit_transform(X_train[categorical_features])\nX_test_encoded = encoder.transform(X_test[categorical_features])\n\n# Convert encoded features into a DataFrame\nX_train_encoded = pd.DataFrame(X_train_encoded, columns=encoder.get_feature_names_out(categorical_features), index=X_train.index)\nX_test_encoded = pd.DataFrame(X_test_encoded, columns=encoder.get_feature_names_out(categorical_features), index=X_test.index)\n\n# Drop original categorical columns and concatenate encoded ones\nX_train = X_train.drop(columns=categorical_features).join(X_train_encoded)\nX_test = X_test.drop(columns=categorical_features).join(X_test_encoded)\n\n# MODEL TRAINING ----------------------------\n\n# Defining the model\nmodel = RandomForestClassifier(n_estimators=n_trees)\n\n# Fitting the model\nmodel.fit(X_train, y_train)\n\n# EVALUATION ----------------------------\n\n# Scoring\nrdmf_score = model.score(X_test, y_test)\nprint(f\"{rdmf_score:.1%} de bonnes réponses sur les données de test pour validation\")\n\n# Confusion matrix\nprint(20 * \"-\")\nprint(\"matrice de confusion\")\nprint(confusion_matrix(y_test, model.predict(X_test)))\n\n\nVoyez-vous l’intérêt de l’approche par pipeline en termes de lisibilité, évolutivité et fiabilité ?\nCréer un notebook qui servira de brouillon. Y introduire le code suivant:\n\n\n\nLe code à copier-coller dans un notebook\n\nimport pandas as pd\nfrom sklearn.preprocessing import OneHotEncoder, MinMaxScaler\nfrom sklearn.ensemble import RandomForestClassifier\nfrom sklearn.impute import SimpleImputer\nfrom sklearn.pipeline import Pipeline\nfrom sklearn.compose import ColumnTransformer\n\ntrain = pd.read_csv(\"train.csv\")\ntest = pd.read_csv(\"test.csv\")\nX_train, y_train = train.drop(\"Survived\", axis=\"columns\"), train[\"Survived\"]\nX_test, y_test = test.drop(\"Survived\", axis=\"columns\"), train[\"Survived\"]\n\nMAX_DEPTH = None\nMAX_FEATURES = \"sqrt\"\nn_trees=20\n\nnumeric_features = [\"Age\", \"Fare\"]\ncategorical_features = [\"Embarked\", \"Sex\"]\n\n# Variables numériques\nnumeric_transformer = Pipeline(\n    steps=[\n        (\"imputer\", SimpleImputer(strategy=\"median\")),\n        (\"scaler\", MinMaxScaler()),\n    ]\n)\n\n# Variables catégorielles\ncategorical_transformer = Pipeline(\n    steps=[\n        (\"imputer\", SimpleImputer(strategy=\"most_frequent\")),\n        (\"onehot\", OneHotEncoder()),\n    ]\n)\n\n# Preprocessing\npreprocessor = ColumnTransformer(\n    transformers=[\n        (\"Preprocessing numerical\", numeric_transformer, numeric_features),\n        (\n            \"Preprocessing categorical\",\n            categorical_transformer,\n            categorical_features,\n        ),\n    ]\n)\n\n# Pipeline\npipe = Pipeline(\n    [\n        (\"preprocessor\", preprocessor),\n        (\"classifier\", RandomForestClassifier(\n            n_estimators=n_trees,\n            max_depth=MAX_DEPTH,\n            max_features=MAX_FEATURES\n        )),\n    ]\n)\n\npipe.fit(X_train, y_train)\n\n\nAfficher ce pipeline dans une cellule de votre notebook. Cela vous aide-t-il mieux à comprendre les différentes étapes du pipeline de modélisation ?\nComment pouvez-vous accéder aux étapes de preprocessing ?\n\n\n\nComment pouvez-vous faire pour appliquer le pipeline de preprocessing des variables numériques (et uniquement celui-ci) à ce DataFrame ?\n\n\n\nLe DataFrame à créer pour appliquer un bout de notre pipeline\n\nimport numpy as np\n\nnew_data = {\n    \"Age\": [22, np.nan, 35, 28, np.nan],\n    \"Fare\": [7.25, 8.05, np.nan, 13.00, 15.50]\n}\n\nnew_data = pd.DataFrame(new_data)\n\n\n\nNormalement ce code ne devrait pas prendre plus d’une demie-douzaine de lignes. Sans pipeline le code équivalent, beaucoup plus verbeux et moins fiable, ressemble à celui-ci\n\n\n\nLe code équivalent, sans pipeline\n\nimport pandas as pd\nimport numpy as np\nfrom sklearn.impute import SimpleImputer\nfrom sklearn.preprocessing import MinMaxScaler\n\n# Définition des nouvelles données\nnew_data = pd.DataFrame({\n    \"Age\": [25, np.nan, 40, 33, np.nan],\n    \"Fare\": [10.50, 7.85, np.nan, 22.00, 12.75]\n})\n\n# Définition des transformations (même que dans le pipeline)\nnum_imputer = SimpleImputer(strategy=\"median\")\nscaler = MinMaxScaler()\n\n# Apprentissage des transformations sur X_train (assumant que vous l'avez déjà)\nX_train_numeric = X_train[[\"Age\", \"Fare\"]]  # Supposons que X_train existe\nnum_imputer.fit(X_train_numeric)\nscaler.fit(num_imputer.transform(X_train_numeric))\n\n# Transformation des nouvelles données\nnew_data_imputed = num_imputer.transform(new_data)\nnew_data_scaled = scaler.transform(new_data_imputed)\n\n# Création du DataFrame final\nnew_data_preprocessed = pd.DataFrame(\n    new_data_scaled,\n    columns=[\"Age_scaled\", \"Fare_scaled\"]  # Générer des noms de colonnes adaptés\n)\n\n# Affichage du DataFrame\nprint(new_data_preprocessed)\n\n\nImaginons que vous ayez déjà des données préprocessées:\n\n\n\nCréer des données préprocessées\n\nimport numpy as np\nimport pandas as pd\n\nnew_data = pd.DataFrame({\n    \"Age\": [25, np.nan, 40, 33, np.nan],\n    \"Fare\": [10.50, 7.85, np.nan, 22.00, 12.75],\n    \"Embarked\": [\"S\", \"C\", np.nan, \"Q\", \"S\"],\n    \"Sex\": [\"male\", \"female\", \"male\", np.nan, \"female\"]\n})\nnew_y = np.random.randint(0, 2, size=len(new_data))\n\npreprocessed_data = pd.DataFrame(\n    pipe[:-1].transform(new_data),\n    columns = preprocessor_numeric.get_feature_names_out()\n)\npreprocessed_data\n\n\nDéterminer le score en prédiction sur ces données\n\n\n\n\nMaintenant, revenons à notre chaine de production et appliquons des fonctions pour la rendre plus lisible, plus fiable et plus modulaire.\n\n\n\n\n\n\nApplication 4: adoption des standards de programmation fonctionnelle\n\n\n\nCette application peut être chronophage, vous pouvez aller plus ou moins loin dans la fonctionalisation de votre script en fonction du temps dont vous disposez.\n\nCréer une fonction qui intègre les différentes étapes du pipeline (preprocessing et définition du modèle). Cette fonction prend en paramètre le nombre d’arbres (argument obligatoire) et des arguments optionnels supplémentaires (les colonnes sur lesquelles s’appliquent les différentes étapes du pipeline, max_depth et max_features).\nCréer une fonction d’évaluation renvoyant le score obtenu et la matrice de confusion, à l’issue d’une estimation (mais cette estimation est faite en amont de la fonction, pas au sein de celle-ci)\nDéplacer toutes les fonctions ensemble, en début de script. Si besoin, ajouter des paramètres à votre fichier d’environnement pour créer de nouvelles variables comme les chemins des données.\nEn profiter pour supprimer le code zombie qu’on a gardé jusqu’à présent mais qui ne correspond pas vraiment à des opérations utiles à notre chaine de production\n\n\n\n  \n    \n      \n        \n      \n      \n        Checkpoint post appli4      \n      \n    \n    \n      \n\n        \n        \n          \n            terminal\n          \n          \n            curl -sSL https://raw.githubusercontent.com/ensae-reproductibilite/website/refs/heads/main/chapters/applications/overwrite.sh -o update.sh && chmod +x update.sh\n./update.sh appli42\nrm -f update.sh\n          \n        \n        \n          1\n          Récupérer le script de checkpoint\n          2\n          Avancer à l’état à l’issue de l’application appli4\n          3\n          Nettoyer derrière nous\n        \n\n        \n          \n            \n          \n        \n      \n    \n  \n  \nCela ne se remarque pas encore vraiment car nous avons de nombreuses définitions de fonctions mais notre chaine de production est beaucoup plus concise (le script fait environ 150 lignes dont une centaine issues de définitions de fonctions génériques). Cette auto-discipline facilitera grandement les étapes ultérieures. Cela aurait été néanmoins beaucoup moins coûteux en temps d’adopter ces bons gestes de manière plus précoce."
  },
  {
    "objectID": "chapters/application.html#étape-1-modularisation",
    "href": "chapters/application.html#étape-1-modularisation",
    "title": "Application",
    "section": "Étape 1 : modularisation",
    "text": "Étape 1 : modularisation\nNous allons profiter de la modularisation pour adopter une structure applicative pour notre code. Celui-ci n’étant en effet plus lancé que depuis la ligne de commande, on peut considérer qu’on construit une application générique où un script principal (main.py) encapsule des éléments issus d’autres scripts Python.\n\n\n\n\n\n\nApplication 5: modularisation\n\n\n\n\nDéplacer les fonctions dans une série de fichiers dédiés:\n\nbuild_pipeline.py: script avec la définition du pipeline\ntrain_evaluate.py: script avec les fonctions d’évaluation du projet\n\nSpécifier les dépendances (i.e. les packages à importer) dans les modules pour que ceux-ci puissent s’exécuter indépendamment ;\nRenommer titanic.py en main.py pour suivre la convention de nommage des projets Python ;\nImporter les fonctions nécessaires à partir des modules.\nVérifier que tout fonctionne bien en exécutant le script main à partir de la ligne de commande :\n\n\n\nterminal\n\n$ python main.py\n\n\nOptionnel: profitez en pour mettre un petit coup de formatter à votre projet, si vous ne l’avez pas fait régulièrement.\n\n\n\n  \n    \n      \n        \n      \n      \n        Checkpoint post appli5      \n      \n    \n    \n      \n\n        \n        \n          \n            terminal\n          \n          \n            curl -sSL https://raw.githubusercontent.com/ensae-reproductibilite/website/refs/heads/main/chapters/applications/overwrite.sh -o update.sh && chmod +x update.sh\n./update.sh appli52\nrm -f update.sh\n          \n        \n        \n          1\n          Récupérer le script de checkpoint\n          2\n          Avancer à l’état à l’issue de l’application appli5\n          3\n          Nettoyer derrière nous"
  },
  {
    "objectID": "chapters/application.html#étape-2-adopter-une-architecture-standardisée-de-projet",
    "href": "chapters/application.html#étape-2-adopter-une-architecture-standardisée-de-projet",
    "title": "Application",
    "section": "Étape 2 : adopter une architecture standardisée de projet",
    "text": "Étape 2 : adopter une architecture standardisée de projet\nOn dispose maintenant d’une application Python fonctionnelle. Néanmoins, le projet est certes plus fiable mais sa structuration laisse à désirer et il serait difficile de rentrer à nouveau dans le projet dans quelques temps.\n\n\nEtat actuel du projet 🙈\n\n├── .gitignore\n├── .env\n├── data.csv\n├── train.csv\n├── test.csv\n├── README.md\n├── build_pipeline.py\n├── train_evaluate.py\n├── titanic.ipynb\n└── main.py\n\nComme cela est expliqué dans la partie Structure des projets, on va adopter une structure certes arbitraire mais qui va faciliter l’autodocumentation de notre projet. De plus, une telle structure va faciliter des évolutions optionnelles comme la packagisation du projet. Passer d’une structure modulaire bien faite à un package est quasi-immédiat en Python.\nOn va donc modifier l’architecture de notre projet pour la rendre plus standardisée. Pour cela, on va s’inspirer des structures cookiecutter qui génèrent des templates de projet. En l’occurrence notre source d’inspiration sera le template datascience issu d’un effort communautaire.\n\n\n\n\n\n\nNote\n\n\n\nL’idée de cookiecutter est de proposer des templates que l’on utilise pour initialiser un projet, afin de bâtir à l’avance une structure évolutive. La syntaxe à utiliser dans ce cas est la suivante :\n\n\nterminal\n\n$ pip install cookiecutter\n$ cookiecutter https://github.com/drivendata/cookiecutter-data-science\n\nIci, on a déjà un projet, on va donc faire les choses dans l’autre sens : on va s’inspirer de la structure proposée afin de réorganiser celle de notre projet selon les standards communautaires.\n\n\nEn s’inspirant du cookiecutter data science on va adopter la structure suivante:\n\n\nStructure recommandée\n\napplication\n├── main.py\n├── .env\n├── README.md\n├── data\n│   ├── raw\n│   │   └── data.csv\n│   └── derived\n│       ├── test.csv\n│       └── train.csv\n├── notebooks\n│   └── titanic.ipynb\n└── src\n    ├── pipeline\n    │   └── build_pipeline.py\n    └── models\n        └── train_evaluate.py\n\n\n\n\n\n\n\nApplication 6: adopter une structure lisible\n\n\n\n\n(optionnel) Analyser et comprendre la structure de projet proposée par le template ;\nModifier l’arborescence du projet selon le modèle ;\nMettre à jour l’import des dépendances, le fichier de configuration et main.py avec les nouveaux chemins ;\n\n\n\n  \n    \n      \n        \n      \n      \n        Checkpoint post appli6      \n      \n    \n    \n      \n\n        \n        \n          \n            terminal\n          \n          \n            curl -sSL https://raw.githubusercontent.com/ensae-reproductibilite/website/refs/heads/main/chapters/applications/overwrite.sh -o update.sh && chmod +x update.sh\n./update.sh appli62\nrm -f update.sh\n          \n        \n        \n          1\n          Récupérer le script de checkpoint\n          2\n          Avancer à l’état à l’issue de l’application appli6\n          3\n          Nettoyer derrière nous"
  },
  {
    "objectID": "chapters/application.html#étape-3-mieux-tracer-notre-chaine-de-production",
    "href": "chapters/application.html#étape-3-mieux-tracer-notre-chaine-de-production",
    "title": "Application",
    "section": "Étape 3: mieux tracer notre chaine de production",
    "text": "Étape 3: mieux tracer notre chaine de production\n\nIndiquer l’environnement minimal de reproductibilité\nLe script main.py nécessite un certain nombre de packages pour être fonctionnel. Chez vous les packages nécessaires sont bien sûr installés mais êtes-vous assuré que c’est le cas chez la personne qui testera votre code ?\nAfin de favoriser la portabilité du projet, il est d’usage de “fixer l’environnement”, c’est-à-dire d’indiquer dans un fichier toutes les dépendances utilisées ainsi que leurs version. Nous proposons de créer un fichier requirements.txt minimal, sur lequel nous reviendrons dans la partie consacrée aux environnements reproductibles.\nLe fichier requirements.txt est conventionnellement localisé à la racine du projet. Ici on ne va pas fixer les versions, on raffinera ce fichier ultérieurement.\n\n\n\n\n\n\nApplication 7a: création du requirements.txt\n\n\n\n\nCréer un fichier requirements.txt avec la liste des packages nécessaires\nAjouter une indication dans README.md sur l’installation des packages grâce au fichier requirements.txt\n\n\n\n\n\nTracer notre chaîne\nQuand votre projet passera en production, vous aurez un accès limité à celui-ci. Il est donc important de faire remonter, par le biais du logging des informations critiques sur votre projet qui vous permettront de savoir où il en est (si vous avez accès à la console où il tourne) ou là où il s’est arrêté.\nL’utilisation de print montre rapidement ses limites pour cela. Les informations enregistrées ne persistent pas après la session et sont quelques peu rudimentaires.\nPour faire du logging, la librairie consacrée depuis longtemps en Python est… logging. Il existe aussi une librairie nommée loguru qui est un peu plus simple à configurer (l’instanciation du logger est plus aisée) et plus agréable grâce à ses messages en couleurs qui permettent de visuellement trier les informations.\n\nL’exercice suivant peut être fait avec les deux librairies, cela ne change pas grand chose. Les prochaines applications repartiront de la version utilisant la librairie standard logging.\n\n\n\n\n\n\nApplication 7b: remontée de messages par logging\n\n\n\n\nVersion utilisant loggingVersion utilisant loguru\n\n\n\nAller sur la documentation de la librairie ici et sur ce tutoriel pour trouver des sources d’inspiration sur la configuration et l’utilisation de logging.\nPour afficher les messages dans la console et dans un fichier de log, s’inspirer de cette réponse sur stack overflow.\nTester en ligne de commande votre code et observer le fichier de log\n\n\n\n\nInstaller loguru et l’ajouter au requirements.txt\nEn s’aidant du README du projet sur Github, remplacer nos print par différents types de messages (info, success, etc.).\nTester l’exécution du script en ligne de commande et observer vos sorties\nMettre à jour le logger pour enregistrer dans un fichier de log. Ajouter celui-ci au .gitignore puis tester en ligne de commande votre script. Ouvrir le fichier en question, refaites tourner le script et regardez son évolutoin.\nIl est possible avec loguru de capturer les erreurs des fonctions grâce au système de cache décrit ici. Introduire une erreur dans une des fonctions (par exemple dans create_pipeline) avec un code du type raise ValueError(\"Problème ici\")\n\n\n\n\n\n\n  \n    \n      \n        \n      \n      \n        Checkpoint post appli7      \n      \n    \n    \n      \n\n        \n        \n          \n            terminal\n          \n          \n            curl -sSL https://raw.githubusercontent.com/ensae-reproductibilite/website/refs/heads/main/chapters/applications/overwrite.sh -o update.sh && chmod +x update.sh\n./update.sh appli72\nrm -f update.sh\n          \n        \n        \n          1\n          Récupérer le script de checkpoint\n          2\n          Avancer à l’état à l’issue de l’application appli7\n          3\n          Nettoyer derrière nous"
  },
  {
    "objectID": "chapters/application.html#stockageS3",
    "href": "chapters/application.html#stockageS3",
    "title": "Application",
    "section": "Étape 4 : stocker les données de manière externe",
    "text": "Étape 4 : stocker les données de manière externe\nPour cette partie, il faut avoir un service VSCode dont les jetons d’authentification à S3 sont valides. Pour cela, si vous êtes sur le SSPCloud, le plus simple est de recréer un nouveau service avec le bouton suivant\n\net remplir l’onglet Git comme ça votre VSCode sera pré à l’emploi (cf. application 0).\nUne fois que vous avez un VSCode fonctionnel, il est possible de reprendre cette application fil rouge depuis le checkpoint précédent.\n  \n    \n      \n        \n      \n      \n        Reprendre à partir d'ici      \n      \n    \n    \n      \n\n        Si vous n'avez plus de VSCode actif avec la configuration proposée dans l'application préliminaire, vous pouvez repartir de ce service:    \n      \n    \n    Et ensuite, après avoir clôné le dépôt\n        \n          \n            terminal\n          \n          \n            curl -sSL https://raw.githubusercontent.com/ensae-reproductibilite/website/refs/heads/main/chapters/applications/overwrite.sh -o update.sh && chmod +x update.sh\n./update.sh appli72\nrm -f update.sh\n          \n        \n        \n          1\n          Récupérer le script de checkpoint\n          2\n          Avancer à l’état à l’issue de l’application appli7\n          3\n          Nettoyer derrière nous\n        \n\n        \n          \n            \n          \n        \n      \n    \n  \n  \nEnfin, il vous suffira d’ouvrir un terminal et faire pip install -r requirements.txt && python main.py pour pouvoir démarrer l’application.\nL’étape précédente nous a permis d’isoler la configuration. Nous avons conceptuellement isolé les données du code lors des applications précédentes. Cependant, nous n’avons pas été au bout du chemin car le stockage des données reste conjoint à celui du code. Nous allons maintenant dissocier ces deux éléments.\n\n\n\n\n\n\nPour en savoir plus sur le système de stockage S3\n\n\n\n\n\nPour mettre en oeuvre cette étape, il peut être utile de comprendre un peu comme fonctionne le SSP Cloud. Vous devrez suivre la documentation du SSP Cloud pour la réaliser. Une aide-mémoire est également disponible dans le cours de 2e année de l’ENSAE Python pour la data science.\n\n\n\n\n\n\n\n\n\nPour en savoir plus sur le format Parquet\n\n\n\n\n\nL’objectif de cette application est de montrer comment utiliser le format Parquet dans une chaîne production ; un objectif somme toute modeste.\nSi vous voulez aller plus loin dans la découverte du format Parquet, vous pouvez consulter cette ressource R très similaire à ce cours (oui elle est faite par les mêmes auteurs…) et essayer de faire les exercices avec votre librairie Python de prédilection (PyArrow ou DuckDB)\n\n\n\n\n\n\n\n\n\nEt si vous utilisez une infrastructure cloud qui n’est pas le SSPCloud ? (une idée saugrenue mais sait-on jamais)\n\n\n\n\n\nLes exemples à venir peuvent très bien être répliqués sur n’importe quel cloud provider qui propose une solution de type S3, qu’il s’agisse d’un cloud provider privé (AWS, GCP, Azure, etc.) ou d’une réinstanciation ad hoc du projet Onyxia, le logiciel derrière le SSPCloud.\nPour un système de stockage S3, il suffit de changer les paramètres de connexion de s3fs (endpoint, region, etc.). Pour les stockages sur GCP, les codes sont presque équivalents, il suffit de remplacer la librairie s3fs par gcfs; ces deux librairies sont en fait des briques d’un standard plus général de gestion de systèmes de fichiers en Python ffspec.\n\n\n\nLe chapitre sur la structure des projets développe l’idée qu’il est recommandé de converger vers un modèle où environnements d’exécution, de stockage du code et des données sont conceptuellement séparés. Ce haut niveau d’exigence est un gain de temps important lors de la mise en production car au cours de cette dernière, le projet est amené à être exécuté sur une infrastructure informatique dédiée qu’il est bon d’anticiper. Schématiquement, nous visons la structure de projet suivante:\n\nA l’heure actuelle, les données sont stockées dans le dépôt. C’est une mauvaise pratique. En premier lieu, Git n’est techniquement pas bien adapté au stockage de données. Ici ce n’est pas très grave car il ne s’agit pas de données volumineuses et ces dernières ne sont pas modifiées au cours de notre chaine de traitement.\nLa raison principale est que les données traitées par les data scientists sont généralement soumises à des clauses de confidentialités (RGPD, secret statistique…). Mettre ces données sous contrôle de version c’est prendre le risque de les divulguer à un public non habilité. Il est donc recommandé de privilégier des outils techniques adaptés au stockage de données.\nL’idéal, dans notre cas, est d’utiliser une solution de stockage externe. On va utiliser pour cela MinIO, la solution de stockage de type S3 offerte par le SSP Cloud. Cela nous permettra de supprimer les données de Github tout en maintenant la reproductibilité de notre projet 7.\nPlus concrètement, nous allons adopter le pipeline suivant pour notre projet:\n\nLe scénario type est que nous avons une source brute, reçue sous forme de CSV, dont on ne peut changer le format. Il aurait été idéal d’avoir un format plus adapté au traitement de données pour ce fichier mais ce n’était pas de notre ressort. Notre chaine va aller chercher ce fichier, travailler dessus jusqu’à valoriser celui-ci sous la forme de notre matrice de confusion. Si on imagine que notre chaine prend un certain temps, il n’est pas inutile d’écrire des données intermédiaires. Pour faire cela, puisque nous avons la main, autant choisir un format adapté, à savoir le format Parquet.\nCette application va se dérouler en trois temps:\n\nUpload de notre source brute (CSV) sur S3\nIllustration de l’usage des librairies cloud native pour lire celle-ci\nPartage public de cette donnée pour la rendre accessible de manière plus simple à nos futures applications.\n\n\n\n\n\n\n\nApplication 8a: ajout de données sur le système de stockage S3\n\n\n\nPour commencer, à partir de la ligne de commande, utiliser l’utilitaire MinIO pour copier les données data/raw/data.csv vers votre bucket personnel. Les données intermédiaires peuvent être laissées en local mais doivent être ajoutées au .gitignore.\n\n\nIndice\n\nStructure à adopter:\n\n\nterminal\n\nBUCKET_PERSONNEL=\"nom_utilisateur_sspcloud\"\nmc cp data/raw/data.csv s3/${BUCKET_PERSONNEL}/ensae-reproductibilite/data/raw/data.csv\n\nen modifiant la variable BUCKET_PERSONNEL, l’emplacement de votre bucket personnel\n\nPour se simplifier la vie, dans les prochaines applications, on va utiliser des URL de téléchargement des fichiers (comme si ceux-ci étaient sur n’importe quel espace de stockage) plutôt que d’utiliser une librairie S3 compatible comme boto3 ou s3fs.\nNéanmoins, il est utile de les utiliser une fois pour comprendre la logique. Pour aller plus loin sur ces librairies, vous pouvez consulter cette page du cours de 2A de Python pour la data science.\nPour commencer, on va lister les fichiers se trouvant dans un bucket. En ligne de commande, sur notre poste local, on ferait ls (cf. Linux 101). Cela ne va pas beaucoup différer avec les librairies cloud native:\n\nAvec s3fsAvec mc\n\n\nDans un notebook, copier-coller ce code, le modifier et exécuter:\nimport s3fs\n\nfs = s3fs.S3FileSystem(client_kwargs={\"endpoint_url\": \"https://minio.lab.sspcloud.fr\"})\n\n1MY_BUCKET = \"mon_nom_utilisateur_sspcloud\"\n2CHEMIN = \"ensae-reproductibilite/data/raw\"\nfs.ls(f\"s3://{MY_BUCKET}/{CHEMIN}\")\n\n1\n\nChanger avec le bucket\n\n2\n\nChanger en fonction du chemin voulu\n\n\n\n\nDans un terminal, copier-coller ligne à ligne ce code, le modifier et exécuter:\nimport s3fs\n\n1MY_BUCKET=\"mon_nom_utilisateur_sspcloud\"\n2CHEMIN = \"ensae-reproductibilite/data/raw\"\nmc ls s3/${MY_BUCKET}/${CHEMIN}\n\n1\n\nChanger avec le bucket\n\n2\n\nChanger en fonction du chemin voulu\n\n\n\n\n\n\n\nOn va maintenant lire directement une donnée stockée sur S3. Pour illustrer le fait que cela change peu notre code d’être sur un système cloud avec les librairies adaptées, on va lire directement un fichier CSV stocké sur le SSPCloud, sans passer par un fichier en local8.\n\n\n\n\n\n\nApplication 8b: importer une donnée depuis un système de stockage S3\n\n\n\nPour illustrer la cohérence avec un système de fichier local, voici trois solutions pour lire le fichier que vous venez de mettre sur S3. Attention, il faut avoir des jetons de connexion à S3 à jour. Si vous avez cette erreur\n\nA client error (InvalidAccessKeyId) occurred when calling the ListBuckets operation: The AWS Access Key Id you provided does not exist in our records.\n\nc’est que vos identifiants de connexion ne sont plus à jour (pour des raisons de sécurité, ils sont régulièrement renouvelés). Dans ce cas, recréez un service VSCode avec le bouton proposé plus haut.\nDans un notebook, copier-coller et mettre à jour ces deux variables qui seront utilisées dans différents exemples:\n1MY_BUCKET = \"mon_nom_utilisateur_sspcloud\"\n2CHEMIN_FICHIER = \"ensae-reproductibilite/data/raw/data.csv\"\n\n1\n\nChanger avec le bucket\n\n2\n\nChanger en fonction du chemin voulu\n\n\n\nAvec Pandas et s3fsAvec Pyarrow et s3fsAvec DuckDB\n\n\nimport s3fs\nimport pandas as pd\n\nfs = s3fs.S3FileSystem(client_kwargs={\"endpoint_url\": \"https://minio.lab.sspcloud.fr\"})\n\nwith fs.open(f\"s3://{MY_BUCKET}/{CHEMIN_FICHIER}\") as f:\n    df = pd.read_csv(f)\n\ndf\n\n\nimport s3fs\nfrom pyarrow import csv\n\nfs = s3fs.S3FileSystem(client_kwargs={\"endpoint_url\": \"https://minio.lab.sspcloud.fr\"})\n\nwith fs.open(f\"s3://{MY_BUCKET}/{CHEMIN_FICHIER}\") as f:\n    df = csv.read_csv(f)\n\ndf\n\n\nimport os\nimport duckdb\n\ncon = duckdb.connect(database=\":memory:\")\n\ncon.execute(\n    f\"\"\"\nCREATE SECRET secret (\n    TYPE S3,\n    KEY_ID '{os.environ[\"AWS_ACCESS_KEY_ID\"]}',\n    SECRET '{os.environ[\"AWS_SECRET_ACCESS_KEY\"]}',\n    ENDPOINT 'minio.lab.sspcloud.fr',\n    SESSION_TOKEN '{os.environ[\"AWS_SESSION_TOKEN\"]}',\n    REGION 'us-east-1',\n    URL_STYLE 'path',\n    SCOPE 's3://{MY_BUCKET}/'\n);\n\"\"\"\n)\n\nquery_definition = f\"SELECT * FROM read_csv('s3://{MY_BUCKET}/{CHEMIN_FICHIER}')\"\ndf = con.sql(query_definition)\n\ndf\n\n\n\nPour illustrer le fonctionnement encore plus simple de S3 avec les fichiers Parquet, on propose de copier un Parquet mis à disposition dans un bucket collectiv vers votre bucket personnel:\n1BUCKET_PERSONNEL=\"nom_utilisateur_sspcloud\"\n\n2curl -o rp.parquet \"https://minio.lab.sspcloud.fr/projet-formation/bonnes-pratiques/data/REGION=11/part-0.parquet\"\n\nmc cp rp.parquet s3/${BUCKET_PERSONNEL}/ensae-reproductibilite/data/example/rp.parquet\n\nrm rp.parquet\n\n1\n\nRemplacer par le nom de votre bucket.\n\n2\n\nTélécharger le fichier Parquet mis à dispositoin\n\n\nPour lire ceux-ci, tester les exemples de code suivants:\n1MY_BUCKET = \"mon_nom_utilisateur_sspcloud\"\nCHEMIN_FICHIER = \"ensae-reproductibilite/data/example/rp.parquet\"\n\n1\n\nRemplacer ici par la valeur appropriée\n\n\n\nAvec Pandas et s3fsAvec Pyarrow et s3fsAvec DuckDB\n\n\nimport s3fs\nimport pandas as pd\n\nfs = s3fs.S3FileSystem(client_kwargs={\"endpoint_url\": \"https://minio.lab.sspcloud.fr\"})\n\ndf = pd.read_parquet(f\"s3://{MY_BUCKET}/{CHEMIN_FICHIER}\", filesystem=fs)\n\ndf\n\n\nimport pyarrow as pa\nimport pyarrow.parquet as pq\n\ns3 = pa.fs.S3FileSystem(endpoint_override =\"https://minio.lab.sspcloud.fr\")\n\ndf = pq.read_table(f\"{MY_BUCKET}/{CHEMIN_FICHIER}\", filesystem=s3)\n\ndf\n\n\nimport os\nimport duckdb\n\ncon = duckdb.connect(database=\":memory:\")\n\ncon.execute(\n    f\"\"\"\nCREATE SECRET secret (\n    TYPE S3,\n    KEY_ID '{os.environ[\"AWS_ACCESS_KEY_ID\"]}',\n    SECRET '{os.environ[\"AWS_SECRET_ACCESS_KEY\"]}',\n    ENDPOINT 'minio.lab.sspcloud.fr',\n    SESSION_TOKEN '{os.environ[\"AWS_SESSION_TOKEN\"]}',\n    REGION 'us-east-1',\n    URL_STYLE 'path',\n    SCOPE 's3://{MY_BUCKET}/'\n);\n\"\"\"\n)\n\nquery_definition = f\"SELECT * FROM read_parquet('s3://{MY_BUCKET}/{CHEMIN_FICHIER}')\"\ndf = con.sql(query_definition)\n\ndf\n\n\n\nPour aller plus loin sur le format Parquet, notamment découvrir comment importer des données partitionnées, vous pouvez traduire en Python les exemples issus de la formation aux bonnes pratiques avec R de l’Insee.\n\n\n\n\n\n\n\n\nApplication 8c: privilégier le format Parquet dans notre chaîne\n\n\n\nDans main.py, remplacer le format csv initialement prévu par un format parquet:\ndata_train_path = os.environ.get(\"train_path\", \"data/derived/train.parquet\")\ndata_test_path = os.environ.get(\"test_path\", \"data/derived/test.parquet\")\nEt modifier l’écriture des données pour utiliser to_parquet plutôt que to_csv pour écrire les fichiers intermédiaires:\n\n\nmain.py\n\npd.concat([X_train, y_train], axis = 1).to_parquet(data_train_path)\npd.concat([X_test, y_test], axis = 1).to_parquet(data_test_path)\n\n\n\n\n\n\n\n\n\nApplication 8d: partage de données sur le système de stockage S3\n\n\n\nPar défaut, le contenu de votre bucket est privé, seul vous y avez accès. Pour pouvoir lire votre donnée, vos applications externes devront utiliser des jetons vous identifiant. Ici, comme nous utilisons une donnée publique, vous pouvez rendre accessible celle-ci à tous en lecture. Dans le jargon S3, cela signifie donner un accès anonyme à votre donnée.\nLe modèle de commande à utiliser dans le terminal est le suivant:\n\n\nterminal\n\n1$ BUCKET_PERSONNEL=\"nom_utilisateur_sspcloud\"\n$ mc anonymous set download s3/${BUCKET_PERSONNEL}/ensae-reproductibilite/data/raw/\n\n\n1\n\nRemplacer par le nom de votre bucket.\n\n\nLes URL de téléchargement seront de la forme https://minio.lab.sspcloud.fr/&lt;BUCKET_PERSONNEL&gt;/ensae-reproductibilite/data/raw/data.csv\n\nRemplacer la définition de data_path pour utiliser, par défaut, directement l’URL dans l’import. Modifier, si cela est pertinent, aussi votre fichier .env.\n\n1URL_RAW = \"\"\ndata_path = os.environ.get(\"data_path\", URL_RAW)\n\n1\n\nModifier avec URL_RAW un lien de la forme \"https://minio.lab.sspcloud.fr/${BUCKET_PERSONNEL}/ensae-reproductibilite/data/raw/data.csv\" (ne laissez pas ${BUCKET_PERSONNEL}, remplacez par la vraie valeur!).\n\n\n\nAjouter le dossier data/ au .gitignore ainsi que les fichiers *.parquet\nSupprimer le dossier data de votre projet et faites git rm --cached -r data\nVérifier le bon fonctionnement de votre application.\n\n\n\nMaintenant qu’on a arrangé la structure de notre projet, c’est l’occasion de supprimer le code qui n’est plus nécessaire au bon fonctionnement de notre projet (cela réduit la charge de maintenance9).\nPour vous aider, vous pouvez utiliser vulture de manière itérative pour vous assister dans le nettoyage de votre code.\n\n\nterminal\n\npip install vulture\nvulture .\n\n\n\nExemple de sortie\n\n\n\nterminal\n\n$ vulture .\n\nsrc/data/import_data.py:3: unused function 'split_and_count' (60% confidence)\nsrc/pipeline/build_pipeline.py:12: unused function 'split_train_test' (60% confidence)\n\n  \n    \n      \n        \n      \n      \n        Checkpoint post appli8      \n      \n    \n    \n      \n\n        \n        \n          \n            terminal\n          \n          \n            curl -sSL https://raw.githubusercontent.com/ensae-reproductibilite/website/refs/heads/main/chapters/applications/overwrite.sh -o update.sh && chmod +x update.sh\n./update.sh appli82\nrm -f update.sh\n          \n        \n        \n          1\n          Récupérer le script de checkpoint\n          2\n          Avancer à l’état à l’issue de l’application appli8\n          3\n          Nettoyer derrière nous"
  },
  {
    "objectID": "chapters/application.html#étape-1-proposer-des-tests-unitaires-optionnel",
    "href": "chapters/application.html#étape-1-proposer-des-tests-unitaires-optionnel",
    "title": "Application",
    "section": "Étape 1 : proposer des tests unitaires (optionnel)",
    "text": "Étape 1 : proposer des tests unitaires (optionnel)\nNotre code comporte un certain nombre de fonctions génériques. On peut vouloir tester leur usage sur des données standardisées, différentes de celles du Titanic.\nMême si la notion de tests unitaires prend plus de sens dans un package, nous pouvons proposer dans le projet des exemples d’utilisation de la fonction, ceci peut être pédagogique.\nNous allons utiliser unittest pour effectuer des tests unitaires. Cette approche nécessite quelques notions de programmation orientée objet ou une bonne discussion avec ChatGPT.\n\n\n\n\n\n\nApplication 9: test unitaire (optionnel)\n\n\n\nDans le dossier tests/, créer avec l’aide de ChatGPT ou de Copilot un test pour la fonction split_and_count.\n\nEffectuer le test unitaire en ligne de commande avec unittest (python -m unittest tests/test_split.py). Corriger le test unitaire en cas d’erreur.\nSi le temps le permet, proposer des variantes ou d’autres tests.\n\n\n\n  \n    \n      \n        \n      \n      \n        Checkpoint post appli9      \n      \n    \n    \n      \n\n        \n        \n          \n            terminal\n          \n          \n            curl -sSL https://raw.githubusercontent.com/ensae-reproductibilite/website/refs/heads/main/chapters/applications/overwrite.sh -o update.sh && chmod +x update.sh\n./update.sh appli92\nrm -f update.sh\n          \n        \n        \n          1\n          Récupérer le script de checkpoint\n          2\n          Avancer à l’état à l’issue de l’application appli9\n          3\n          Nettoyer derrière nous\n        \n\n        \n          \n            \n          \n        \n      \n    \n  \n  \n\n\n\n\n\n\nNote\n\n\n\nLorsqu’on effectue des tests unitaires, on cherche généralement à tester le plus de lignes possibles de son code. On parle de taux de couverture (coverage rate) pour désigner la statistique mesurant cela.\nCela peut s’effectuer de la manière suivante avec le package coverage:\n\n\nterminal\n\n$ coverage run -m unittest tests/test_create_variable_title.py\n$ coverage report -m\n\nName                                  Stmts   Miss  Cover   Missing\n-------------------------------------------------------------------\nsrc/features/build_features.py           34     21    38%   35-36, 48-58, 71-74, 85-89, 99-101, 111-113\ntests/test_create_variable_title.py      21      1    95%   54\n-------------------------------------------------------------------\nTOTAL                                    55     22    60%\nLe taux de couverture est souvent mis en avant par les gros projets comme indicateur de leur qualité. Il existe d’ailleurs des badges Github dédiés."
  },
  {
    "objectID": "chapters/application.html#étape-2-transformer-son-projet-en-package-optionnel",
    "href": "chapters/application.html#étape-2-transformer-son-projet-en-package-optionnel",
    "title": "Application",
    "section": "Étape 2 : transformer son projet en package (optionnel)",
    "text": "Étape 2 : transformer son projet en package (optionnel)\nNotre projet est modulaire, ce qui le rend assez simple à transformer en package, en s’inspirant de la structure du cookiecutter adapté, issu de cet ouvrage.\nOn va créer un package nommé titanicml qui encapsule tout notre code et qui sera appelé par notre script main.py. La structure attendue est la suivante:\n\n\nStructure visée\n\nensae-reproductibilite-application\n├── docs                                    ┐\n│   ├── main.py                             │\n│   └── notebooks                           │ Package documentation and examples\n│       └── titanic.ipynb                   │\n├── configuration                           ┐ Configuration (pas à partager avec Git)\n│   └── config.yaml                         ┘\n├── README.md\n├── pyproject.toml                          ┐\n├── requirements.txt                        │\n├── titanicml                               │\n│   ├── __init__.py                         │ Package source code, metadata\n│   ├── data                                │ and build instructions\n│   │   ├── import_data.py                  │\n│   │   └── test_create_variable_title.py   │\n│   ├── features                            │\n│   │   └── build_features.py               │\n│   └── models                              │\n│       └── train_evaluate.py               ┘\n└── tests                                   ┐\n    └── test_create_variable_title.py       ┘ Package tests\n\n\n\nRappel: structure actuelle\n\nensae-reproductibilite-application\n├── notebooks\n│   └── titanic.ipynb\n├── configuration\n│   └── config.yaml\n├── main.py\n├── README.md\n├── requirements.txt\n└── src\n    ├── data\n    │   ├── import_data.py\n    │   └── test_create_variable_title.py\n    ├── features\n    │   └── build_features.py\n    └── models\n        └── train_evaluate.py\n\nIl existe plusieurs frameworks pour construire un package. Nous allons privilégier Poetry à Setuptools.\n\n\n\n\n\n\nNote\n\n\n\nPour créer la structure minimale d’un package, le plus simple est d’utiliser le cookiecutter adapté, issu de cet ouvrage.\nComme on a déjà une structure très modulaire, on va plutôt recréer cette structure dans notre projet déjà existant. En fait, il ne manque qu’un fichier essentiel, le principal distinguant un projet classique d’un package : pyproject.toml.\n\n\nterminal\n\n$ cookiecutter https://github.com/py-pkgs/py-pkgs-cookiecutter.git\n\n\n\nDérouler pour voir les choix possibles\n\nauthor_name [Monty Python]: Daffy Duck\npackage_name [mypkg]: titanicml\npackage_short_description []: Impressive Titanic survival analysis\npackage_version [0.1.0]:\npython_version [3.9]:\nSelect open_source_license:\n1 - MIT\n2 - Apache License 2.0\n3 - GNU General Public License v3.0\n4 - Creative Commons Attribution 4.0\n5 - BSD 3-Clause\n6 - Proprietary\n7 - None\nChoose from 1, 2, 3, 4, 5, 6 [1]:\nSelect include_github_actions:\n1 - no\n2 - ci\n3 - ci+cd\nChoose from 1, 2, 3 [1]:\n\n\n\n\n\n\n\n\n\nApplication 10: packagisation (optionnel)\n\n\n\n\nRenommer le dossier titanicml pour respecter la nouvelle arborescence ;\nCréer un fichier pyproject.toml sur cette base ;\n\n#| code-summary: \"pyproject.toml\"\n#| filename: \"pyproject.toml\"\n[tool.poetry]\nname = \"titanicml\"\nversion = \"0.0.1\"\ndescription = \"Awesome Machine Learning project\"\nauthors = [\"Daffy Duck &lt;daffy.duck@fauxmail.fr&gt;\", \"Mickey Mouse\"]\nlicense = \"MIT\"\nreadme = \"README.md\"\n\n[build-system]\nrequires = [\"poetry-core\"]\nbuild-backend = \"poetry.core.masonry.api\"\n\n[tool.pytest.ini_options]\nlog_cli = true\nlog_cli_level = \"WARNING\"\nlog_cli_format = \"%(asctime)s [%(levelname)8s] %(message)s (%(filename)s:%(lineno)s)\"\nlog_cli_date_format = \"%Y-%m-%d %H:%M:%S\"\n\nCréer le dossier docs et mettre les fichiers indiqués dedans\nDans titanicml/, créer un fichier __init__.py10\n\n#| code-summary: \"__init__.py\"\n#| filename: \"__init__.py\"\nfrom .data.import_data import (\n    split_and_count\n)\nfrom .pipeline.build_pipeline import (\n    split_train_test,\n    create_pipeline\n)\nfrom .models.train_evaluate import (\n    evaluate_model\n)\n__all__ = [\n    \"split_and_count\",\n    \"split_train_test\",\n    \"create_pipeline\",\n    \"evaluate_model\"\n]\n\nInstaller le package en local avec pip install -e .\nModifier le contenu de docs/main.py pour importer les fonctions de notre package titanicml et tester en ligne de commande notre fichier main.py\n\n\n\n  \n    \n      \n        \n      \n      \n        Checkpoint post appli10      \n      \n    \n    \n      \n\n        \n        \n          \n            terminal\n          \n          \n            curl -sSL https://raw.githubusercontent.com/ensae-reproductibilite/website/refs/heads/main/chapters/applications/overwrite.sh -o update.sh && chmod +x update.sh\n./update.sh appli102\nrm -f update.sh\n          \n        \n        \n          1\n          Récupérer le script de checkpoint\n          2\n          Avancer à l’état à l’issue de l’application appli10\n          3\n          Nettoyer derrière nous"
  },
  {
    "objectID": "chapters/application.html#anaconda",
    "href": "chapters/application.html#anaconda",
    "title": "Application",
    "section": "Étape 1 : un environnement pour rendre le projet portable",
    "text": "Étape 1 : un environnement pour rendre le projet portable\nPour qu’un projet soit portable, il doit remplir deux conditions:\n\nNe pas nécessiter de dépendance qui ne soient pas renseignées quelque part ;\nNe pas proposer des dépendances inutiles, qui ne sont pas utilisées dans le cadre du projet.\n\nLe prochain exercice vise à mettre ceci en oeuvre. Comme expliqué dans le chapitre portabilité, le choix du gestionnaire d’environnement est laissé libre. Il est recommandé de privilégier venv si vous découvrez la problématique de la portabilité.\n\nEnvironnement virtuel venvEnvironnement condaEnvironnement virtuel via uv\n\n\nL’approche la plus légère est l’environnement virtuel. Nous avons en fait implicitement déjà commencé à aller vers cette direction en créant un fichier requirements.txt.\n\n\n\n\n\n\nApplication 11a: environnement virtuel venv\n\n\n\n\nExécuter pip freeze en ligne de commande et observer la (très) longue liste de package\nCréer l’environnement virtuel titanic en s’inspirant de la documentation officielle11 ou du chapitre dédié\nUtiliser ls pour observer et comprendre le contenu du dossier titanic/bin installé\nLe SSPCloud, par défaut, fonctionne sur un environnement conda. Le désactiver en faisant conda deactivate.\nActiver l’environnement et vérifier l’installation de Python maintenant utilisée par votre machine \nVérifier directement depuis la ligne de commande que Python exécute bien une commande12 avec:\n\n\n\nterminal\n\n$ python -c \"print('Hello')\"\n\n\nFaire la même chose mais avec import pandas as pd\nInstaller les packages à partir du requirements.txt. Tester à nouveau import pandas as pd pour comprendre la différence.\nExécuter pip freeze et comprendre la différence avec la situation précédente.\nVérifier que le script main.py fonctionne bien. Sinon ajouter les packages manquants dans le requirements.txt et reprendre de manière itérative à partir de la question 7.\nAjouter le dossier titanic/ au .gitignore pour ne pas ajouter ce dossier à Git.\n\n\n\nAide pour la question 4\n\nAprès l’activation, vous pouvez vérifier quel python est utilisé de cette manière\n\n\nterminal\n\n(titanic) $ which python\n\n\n\n\n  \n    \n      \n        \n      \n      \n        Checkpoint post appli11a      \n      \n    \n    \n      \n\n        \n        \n          \n            terminal\n          \n          \n            curl -sSL https://raw.githubusercontent.com/ensae-reproductibilite/website/refs/heads/main/chapters/applications/overwrite.sh -o update.sh && chmod +x update.sh\n./update.sh appli11a2\nrm -f update.sh\n          \n        \n        \n          1\n          Récupérer le script de checkpoint\n          2\n          Avancer à l’état à l’issue de l’application appli11a\n          3\n          Nettoyer derrière nous\n        \n\n        \n          \n            \n          \n        \n      \n    \n  \n  \n\n\nLes environnements conda sont plus lourds à mettre en oeuvre que les environnements virtuels mais peuvent permettre un contrôle plus formel des dépendances.\n\n\n\n\n\n\nApplication 11b: environnement conda\n\n\n\n\nExécuter conda env export en ligne de commande et observer la (très) longue liste de package\nCréer un environnement titanic avec conda create\nActiver l’environnement et vérifier l’installation de Python maintenant utilisée par votre machine \nVérifier directement depuis la ligne de commande que Python exécute bien une commande13 avec:\n\n\n\nterminal\n\n$ python -c \"print('Hello')\"\n\n\nFaire la même chose mais avec import pandas as pd\nInstaller les packages qu’on avait listé dans le requirements.txt précédemment. Ne pas faire un pip install -r requirements.txt afin de privilégier conda install\nExécuter à nouveau conda env export et comprendre la différence avec la situation précédente14.\nVérifier que le script main.py fonctionne bien. Sinon installer les packages manquants et reprndre de manière itérative à partir de la question 7.\nQuand main.py fonctionne, faire conda env export &gt; environment.yml pour figer l’environnement de travail.\n\n\n\n  \n    \n      \n        \n      \n      \n        Checkpoint post appli11b      \n      \n    \n    \n      \n\n        \n        \n          \n            terminal\n          \n          \n            curl -sSL https://raw.githubusercontent.com/ensae-reproductibilite/website/refs/heads/main/chapters/applications/overwrite.sh -o update.sh && chmod +x update.sh\n./update.sh appli11b2\nrm -f update.sh\n          \n        \n        \n          1\n          Récupérer le script de checkpoint\n          2\n          Avancer à l’état à l’issue de l’application appli11b\n          3\n          Nettoyer derrière nous\n        \n\n        \n          \n            \n          \n        \n      \n    \n  \n  \n\n\nuv est le new kid in the game pour gérer les environnements virtuels avec Python.\n\n\n\n\n\n\nApplication 11c: environnement virtuel venv (via uv)\n\n\n\n\nAprès avoir installé uv, exécuter uv init . et supprimer le fichier hello.py généré. Ouvrir le pyproject.toml et observer sa structure.\nExécuter uv pip freeze en ligne de commande et observer la (très) longue liste de package\nCréer un environnement virtuel titanic par le biais d’uv (documentation) sous le nom titanic\nUtiliser ls pour observer et comprendre le contenu du dossier titanic/bin installé\nActiver l’environnement et vérifier l’installation de Python maintenant utilisée par votre machine \nVérifier directement depuis la ligne de commande que Python exécute bien une commande15 avec:\n\n\n\nterminal\n\n$ python -c \"print('Hello')\"\n\n\nFaire la même chose mais avec import pandas as pd. Maintenant, essayer uv run main.py en ligne de commande: comprenez-vous ce qu’il se passe ?\nInstaller de manière itérative les packages à partir d’uv add (documentation) et en testant avec uv run main.py: avez-vous remarqué la vitesse à laquelle cela a été quand vous avez fait uv add pandas ?\nObserver votre pyproject.toml. Regarder le lockfile uv.lock. Générer automatiquement le requirements.txt en faisant pip compile et regarder celui-ci.\nAjouter le dossier titanic/ au .gitignore pour ne pas ajouter ce dossier à Git.\n\n\n\nAide pour la question 5\n\nAprès l’activation, vous pouvez vérifier quel python est utilisé de cette manière\n\n\nterminal\n\n(titanic) $ which python\n\n\n\n\n  \n    \n      \n        \n      \n      \n        Checkpoint post appli11c      \n      \n    \n    \n      \n\n        \n        \n          \n            terminal\n          \n          \n            curl -sSL https://raw.githubusercontent.com/ensae-reproductibilite/website/refs/heads/main/chapters/applications/overwrite.sh -o update.sh && chmod +x update.sh\n./update.sh appli11c2\nrm -f update.sh\n          \n        \n        \n          1\n          Récupérer le script de checkpoint\n          2\n          Avancer à l’état à l’issue de l’application appli11c\n          3\n          Nettoyer derrière nous"
  },
  {
    "objectID": "chapters/application.html#shell",
    "href": "chapters/application.html#shell",
    "title": "Application",
    "section": "Étape 2: construire l’environnement de notre application via un script shell",
    "text": "Étape 2: construire l’environnement de notre application via un script shell\nLes environnements virtuels permettent de mieux spécifier les dépendances de notre projet, mais ne permettent pas de garantir une portabilité optimale. Pour cela, il faut recourir à la technologie des conteneurs. L’idée est de construire une machine, en partant d’une base quasi-vierge, qui permette de construire étape par étape l’environnement nécessaire au bon fonctionnement de notre projet. C’est le principe des conteneurs Docker .\nLeur méthode de construction étant un peu difficile à prendre en main au début, nous allons passer par une étape intermédiaire afin de bien comprendre le processus de production.\n\nNous allons d’abord créer un script shell, c’est à dire une suite de commandes Linux permettant de construire l’environnement à partir d’une machine vierge ;\nNous transformerons celui-ci en Dockerfile dans un deuxième temps. C’est l’objet de l’étape suivante.\n\n\nEnvironnement virtuel venvEnvironnement conda\n\n\n\n\n\n\n\n\nApplication 12a : créer un fichier d’installation de A à Z\n\n\n\n\nCréer un service ubuntu sur le SSP Cloud\nOuvrir un terminal\nCloner le dépôt\nSe placer dans le dossier du projet avec cd\nSe placer au niveau du checkpoint 11a avec git checkout appli11a\nVia l’explorateur de fichiers, créer le fichier install.sh à la racine du projet avec le contenu suivant:\n\n\n\nScript à créer sous le nom install.sh\n\n\n\ninstall.sh\n\n#!/bin/bash\n# Install Python\napt-get -y update\napt-get install -y python3-pip python3-venv\n# Create empty virtual environment\npython3 -m venv titanic\nsource titanic/bin/activate\n# Install project dependencies\npip install -r requirements.txt\n\n\n\nChanger les permissions sur le script pour le rendre exécutable\n\n\n\nterminal\n\n$ chmod +x install.sh\n\n\nExécuter le script depuis la ligne de commande avec des droits de super-utilisateur (nécessaires pour installer des packages via apt)\n\n\n\nterminal\n\n$ sudo ./install.sh\n\n\nVérifier que le script main.py fonctionne correctement dans l’environnement virtuel créé\n\n\n\nterminal\n\n$ source titanic/bin/activate\n$ python3 main.py\n\n\n\n  \n    \n      \n        \n      \n      \n        Checkpoint post appli12a      \n      \n    \n    \n      \n\n        \n        \n          \n            terminal\n          \n          \n            curl -sSL https://raw.githubusercontent.com/ensae-reproductibilite/website/refs/heads/main/chapters/applications/overwrite.sh -o update.sh && chmod +x update.sh\n./update.sh appli12a2\nrm -f update.sh\n          \n        \n        \n          1\n          Récupérer le script de checkpoint\n          2\n          Avancer à l’état à l’issue de l’application appli12a\n          3\n          Nettoyer derrière nous\n        \n\n        \n          \n            \n          \n        \n      \n    \n  \n  \n\n\n\n\n\n\n\n\nApplication 12b : créer un fichier d’installation de A à Z\n\n\n\n\nCréer un service ubuntu sur le SSP Cloud\nOuvrir un terminal\nCloner le dépôt\nSe placer dans le dossier du projet avec cd\nSe placer au niveau du checkpoint 11b avec git checkout appli11b\nVia l’explorateur de fichiers, créer le fichier install.sh à la racine du projet avec le contenu suivant:\n\n\n\nScript à créer sous le nom install.sh\n\n\n\ninstall.sh\n\napt-get -y update && apt-get -y install wget\nwget https://repo.anaconda.com/miniconda/Miniconda3-latest-Linux-x86_64.sh && \\\n    bash Miniconda3-latest-Linux-x86_64.sh -b -p /miniconda && \\\n    rm -f Miniconda3-latest-Linux-x86_64.sh\nPATH=\"/miniconda/bin:${PATH}\"\n# Create environment\nconda create -n titanic pandas PyYAML scikit-learn -c conda-forge\nconda activate titanic\nPATH=\"/miniconda/envs/titanic/bin:${PATH}\"\npython main.py\n\n\n\nChanger les permissions sur le script pour le rendre exécutable\n\n\n\nterminal\n\n$ chmod +x install.sh\n\n\nExécuter le script depuis la ligne de commande avec des droits de super-utilisateur (nécessaires pour installer des packages via apt)\n\n\n\nterminal\n\n$ sudo ./install.sh\n\n\nVérifier que le script main.py fonctionne correctement dans l’environnement virtuel créé\n\n\n\nterminal\n\n$ conda activate titanic\n$ python3 main.py\n\n\n\n  \n    \n      \n        \n      \n      \n        Checkpoint post appli12b      \n      \n    \n    \n      \n\n        \n        \n          \n            terminal\n          \n          \n            curl -sSL https://raw.githubusercontent.com/ensae-reproductibilite/website/refs/heads/main/chapters/applications/overwrite.sh -o update.sh && chmod +x update.sh\n./update.sh appli12b2\nrm -f update.sh\n          \n        \n        \n          1\n          Récupérer le script de checkpoint\n          2\n          Avancer à l’état à l’issue de l’application appli12b\n          3\n          Nettoyer derrière nous"
  },
  {
    "objectID": "chapters/application.html#docker",
    "href": "chapters/application.html#docker",
    "title": "Application",
    "section": "Étape 3: conteneuriser l’application avec Docker",
    "text": "Étape 3: conteneuriser l’application avec Docker\n\n\n\n\n\n\nNote\n\n\n\nCette application nécessite l’accès à une version interactive de Docker. Il n’y a pas beaucoup d’instances en ligne disponibles.\nNous proposons deux solutions:\n\nInstaller Docker sur sa machine ;\nSe rendre sur l’environnement bac à sable Play with Docker\n\nSinon, elle peut être réalisée en essai-erreur par le biais des services d’intégration continue de Github  ou Gitlab . Néanmoins, nous présenterons l’utilisation de ces services plus tard, dans la prochaine partie.\n\n\nMaintenant qu’on sait que ce script préparatoire fonctionne, on va le transformer en Dockerfile pour anticiper la mise en production. Comme la syntaxe Docker est légèrement différente de la syntaxe Linux classique (voir le chapitre portabilité), il va être nécessaire de changer quelques instructions mais ceci sera très léger.\nOn va tester le Dockerfile dans un environnement bac à sable pour ensuite pouvoir plus facilement automatiser la construction de l’image Docker.\n\n\n\n\n\n\nApplication 13: création de l’image Docker\n\n\n\nSe placer dans un environnement avec Docker, par exemple Play with Docker\n\nCréation du Dockerfile\n\nDans le terminal Linux, cloner votre dépôt Github\nRepartir de la dernière version à disposition. Par exemple, si vous avez privilégié l’environnement virtuel venv, ce sera:\n\n\n\nterminal\n\n1$ git stash\n$ git checkout appli12a\n\n\n1\n\nPour annuler les modifications depuis le dernier commit\n\n\n\nCréer via la ligne de commande un fichier texte vierge nommé Dockerfile (la majuscule au début du mot est importante)\n\n\n\nCommande pour créer un Dockerfile vierge depuis la ligne de commande\n\n\n\nterminal\n\n$ touch Dockerfile\n\n\n\nOuvrir ce fichier via un éditeur de texte et copier le contenu suivant dedans:\n\n\n\nPremier Dockerfile\n\n\n\nterminal\n\nFROM ubuntu:22.04\n# Install Python\nRUN apt-get -y update && \\\n    apt-get install -y python3-pip\n# Install project dependencies\nCOPY requirements.txt .\nRUN pip install -r requirements.txt\nCMD [\"python3\", \"main.py\"]\n\n\n\n\nConstruire (build) l’image\n\nUtiliser docker build pour créer une image avec le tag my-python-app\n\n\n\nterminal\n\n$ docker build . -t my-python-app\n\n\nVérifier les images dont vous disposez. Vous devriez avoir un résultat proche de celui-ci :\n\n\n\nterminal\n\n$ docker images\n\nREPOSITORY      TAG       IMAGE ID       CREATED              SIZE\nmy-python-app   latest    188957e16594   About a minute ago   879MB\n\n\nTester l’image: découverte du cache\nL’étape de build a fonctionné: une image a été construite.\nMais fait-elle effectivement ce que l’on attend d’elle ?\nPour le savoir, il faut passer à l’étape suivante, l’étape de run.\n\n\nterminal\n\n$ docker run -it my-python-app\n\npython3: can't open file '/~/titanic/main.py': [Errno 2] No such file or directory\nLe message d’erreur est clair : Docker ne sait pas où trouver le fichier main.py. D’ailleurs, il ne connait pas non plus les autres fichiers de notre application qui sont nécessaires pour faire tourner le code, par exemple le dossier src.\n\nAvant l’étape CMD, copier les fichiers nécessaires sur l’image afin que l’application dispose de tous les éléments nécessaires pour être en mesure de fonctionner.\n\n\n\nNouveau Dockerfile\n\n\n\nterminal\n\nFROM ubuntu:22.04\n# Install Python\nRUN apt-get -y update && \\\n    apt-get install -y python3-pip\n# Install project dependencies\nCOPY requirements.txt .\nRUN pip install -r requirements.txt\nCOPY main.py .\nCOPY src ./src\nCMD [\"python3\", \"main.py\"]\n\n\n\nRefaire tourner l’étape de build\nRefaire tourner l’étape de run. A ce stade, la matrice de confusion doit fonctionner 🎉. Vous avez créé votre première application reproductible !\n\n\n\n\n\n\n\n\n\n\nNote\n\n\n\nIci, le cache permet d’économiser beaucoup de temps. Par besoin de refaire tourner toutes les étapes, Docker agit de manière intelligente en faisant tourner uniquement les étapes qui ont changé.\n\n\n  \n    \n      \n        \n      \n      \n        Checkpoint post appli13      \n      \n    \n    \n      \n\n        \n        \n          \n            terminal\n          \n          \n            curl -sSL https://raw.githubusercontent.com/ensae-reproductibilite/website/refs/heads/main/chapters/applications/overwrite.sh -o update.sh && chmod +x update.sh\n./update.sh appli132\nrm -f update.sh\n          \n        \n        \n          1\n          Récupérer le script de checkpoint\n          2\n          Avancer à l’état à l’issue de l’application appli13\n          3\n          Nettoyer derrière nous"
  },
  {
    "objectID": "chapters/application.html#étape-1-mise-en-place-de-tests-automatisés",
    "href": "chapters/application.html#étape-1-mise-en-place-de-tests-automatisés",
    "title": "Application",
    "section": "Étape 1: mise en place de tests automatisés",
    "text": "Étape 1: mise en place de tests automatisés\nAvant d’essayer de mettre en oeuvre la création de notre image Docker de manière automatisée, nous allons présenter la logique de l’intégration continue en testant de manière automatisée notre script main.py.\nPour cela, nous allons partir de la structure proposée dans l’action officielle. La documentation associée est ici. Des éléments succincts de présentation de la logique déclarative des actions Github sont disponibles dans le chapitre sur la mise en production. Néanmoins, la meilleure école pour comprendre le fonctionnement de celles-ci est de parcourir la documentation du service et d’observer les actions Github mises en oeuvre par vos projets favoris, celles-ci seront fort instructives !\n\n\n\n\n\n\nApplication 14: premier script d’intégration continue\n\n\n\nA partir de l’exemple présent dans la documentation officielle de Github , on a déjà une base de départ qui peut être modifiée. Les questions suivantes permettront d’automatiser les tests et le diagnostic qualité de notre code16\n\nCréer un fichier .github/workflows/test.yaml avec le contenu de l’exemple de la documentation\nAvec l’aide de la documentation, introduire une étape d’installation des dépendances. Utiliser le fichier requirements.txt pour installer les dépendances.\nUtiliser pylint pour vérifier la qualité du code. Ajouter l’argument --fail-under=6 pour renvoyer une erreur en cas de note trop basse17\nUtiliser une étape appelant notre application en ligne de commande (python main.py) pour tester que la matrice de confusion s’affiche bien.\nCréer un secret stockant une valeur du JETON_API. Ne le faites pas commencer par un “$” comme ça vous pourrez regarder la log ultérieurement\nAller voir votre test automatisé dans l’onglet Actions de votre dépôt sur Github\n(optionnel): Créer un artefact à partir du fichier de log que vous créez dans main.py\n\n\n\n  \n    \n      \n        \n      \n      \n        Checkpoint post appli14      \n      \n    \n    \n      \n\n        \n        \n          \n            terminal\n          \n          \n            curl -sSL https://raw.githubusercontent.com/ensae-reproductibilite/website/refs/heads/main/chapters/applications/overwrite.sh -o update.sh && chmod +x update.sh\n./update.sh appli142\nrm -f update.sh\n          \n        \n        \n          1\n          Récupérer le script de checkpoint\n          2\n          Avancer à l’état à l’issue de l’application appli14\n          3\n          Nettoyer derrière nous\n        \n\n        \n          \n            \n          \n        \n      \n    \n  \n  \nMaintenant, nous pouvons observer que l’onglet Actions s’est enrichi. Chaque commit va entraîner une série d’actions automatisées.\nSi l’une des étapes échoue, ou si la note de notre projet est mauvaise, nous aurons une croix rouge (et nous recevrons un mail). On pourra ainsi détecter, en développant son projet, les moments où on dégrade la qualité du script afin de la rétablir immédiatemment."
  },
  {
    "objectID": "chapters/application.html#étape-2-automatisation-de-la-livraison-de-limage-docker",
    "href": "chapters/application.html#étape-2-automatisation-de-la-livraison-de-limage-docker",
    "title": "Application",
    "section": "Étape 2: Automatisation de la livraison de l’image Docker",
    "text": "Étape 2: Automatisation de la livraison de l’image Docker\nMaintenant, nous allons automatiser la mise à disposition de notre image sur DockerHub (le lieu de partage des images Docker). Cela facilitera sa réutilisation mais aussi des valorisations ultérieures.\nLà encore, nous allons utiliser une série d’actions pré-configurées.\nPour que Github puisse s’authentifier auprès de DockerHub, il va falloir d’abord interfacer les deux plateformes. Pour cela, nous allons utiliser un jeton (token) DockerHub que nous allons mettre dans un espace sécurisé associé à votre dépôt Github.\n\n\n\n\n\n\nApplication 15a: configuration\n\n\n\n\nSe rendre sur https://hub.docker.com/ et créer un compte. Il est recommandé d’associer ce compte à votre compte Github.\nCréer un dépôt public application\nAller dans les paramètres de votre compte et cliquer, à gauche, sur Security\nCréer un jeton personnel d’accès, ne fermez pas l’onglet en question, vous ne pouvez voir sa valeur qu’une fois.\nDans le dépôt Github de votre projet, cliquer sur l’onglet Settings et cliquer, à gauche, sur Secrets and variables puis dans le menu déroulant en dessous sur Actions. Sur la page qui s’affiche, aller dans la section Repository secrets\nCréer un jeton DOCKERHUB_TOKEN à partir du jeton que vous aviez créé sur Dockerhub. Valider\nCréer un deuxième secret nommé DOCKERHUB_USERNAME ayant comme valeur le nom d’utilisateur que vous avez créé sur Dockerhub\n\n\n\nEtape optionnelle supplémentaire si on met en production un site web\n\n\nDans le dépôt Github de votre projet, cliquer sur l’onglet Settings et cliquer, à gauche, sur Actions. Donner les droits d’écriture à vos actions sur le dépôt du projet (ce sera nécessaire pour Github Pages)\n\n\n\n\n\nA ce stade, nous avons donné les moyens à Github de s’authentifier avec notre identité sur Dockerhub. Il nous reste à mettre en oeuvre l’action en s’inspirant de la documentation officielle. On ne va modifier que trois éléments dans ce fichier. Effectuer les actions suivantes:\n\n\n\n\n\n\nApplication 15b: automatisation de l’image Docker\n\n\n\n\nEn s’inspirant de ce template, créer le fichier .github/workflows/prod.yml qui va build et push l’image sur le DockerHub. Il va être nécessaire de changer légèrement ce modèle :\n\nRetirer la condition restrictive sur les commits pour lesquels sont lancés cette automatisation. Pour cela, remplacer le contenu de on de sorte à avoir\n\non:\n  push:\n    branches:\n      - main\n      - dev\n\nChanger le tag à la fin pour mettre username/application:latest où username est le nom d’utilisateur sur DockerHub;\nOptionnel: changer le nom de l’action\n\nFaire un commit et un push de ces fichiers\n\nComme on est fier de notre travail, on va afficher ça avec un badge sur le README (partie optionnelle).\n\nSe rendre dans l’onglet Actions et cliquer sur une des actions listées.\nEn haut à droite, cliquer sur ...\nSélectionner Create status badge\nRécupérer le code Markdown proposé\nCopier dans votre README.md le code markdown proposé\n\n\n\nCréer le badge\n\n\n\n\n\nMaintenant, il nous reste à tester notre application dans l’espace bac à sable ou en local, si Docker est installé.\n\n\n\n\n\n\nApplication 15b (partie optionnelle): Tester l’application\n\n\n\n\nSe rendre sur l’environnement bac à sable Play with Docker ou dans votre environnement Docker de prédilection.\nRécupérer et lancer l’image :\n\n\n\nterminal\n\n$ docker run -it username/application:latest\n\n🎉 La matrice de confusion doit s’afficher ! Vous avez grandement facilité la réutilisation de votre image.\n\n\n  \n    \n      \n        \n      \n      \n        Checkpoint post appli15      \n      \n    \n    \n      \n\n        \n        \n          \n            terminal\n          \n          \n            curl -sSL https://raw.githubusercontent.com/ensae-reproductibilite/website/refs/heads/main/chapters/applications/overwrite.sh -o update.sh && chmod +x update.sh\n./update.sh appli152\nrm -f update.sh\n          \n        \n        \n          1\n          Récupérer le script de checkpoint\n          2\n          Avancer à l’état à l’issue de l’application appli15\n          3\n          Nettoyer derrière nous"
  },
  {
    "objectID": "chapters/application.html#étape-1-développer-une-api-en-local",
    "href": "chapters/application.html#étape-1-développer-une-api-en-local",
    "title": "Application",
    "section": "Étape 1: développer une API en local",
    "text": "Étape 1: développer une API en local\nLe premier livrable devenu classique dans un projet impliquant du machine learning est la mise à disposition d’un modèle par le biais d’une API (voir chapitre sur la mise en production). Le framework FastAPI va permettre de rapidement transformer notre application Python en une API fonctionnelle.\n  \n    \n      \n        \n      \n      \n        Reprendre à partir d'ici      \n      \n    \n    \n      \n\n        Si vous n'avez plus de VSCode actif avec la configuration proposée dans l'application préliminaire, vous pouvez repartir de ce service:    \n      \n    \n    Et ensuite, après avoir clôné le dépôt\n        \n          \n            terminal\n          \n          \n            curl -sSL https://raw.githubusercontent.com/ensae-reproductibilite/website/refs/heads/main/chapters/applications/overwrite.sh -o update.sh && chmod +x update.sh\n./update.sh appli152\nrm -f update.sh\n          \n        \n        \n          1\n          Récupérer le script de checkpoint\n          2\n          Avancer à l’état à l’issue de l’application appli15\n          3\n          Nettoyer derrière nous\n        \n\n        \n          \n            \n          \n        \n      \n    \n  \n  \n\n\n\n\n\n\nApplication 16: Mise à disposition sous forme d’API locale\n\n\n\n\nInstaller fastAPI et uvicorn puis les ajouter au requirements.txt\nRenommer le fichier main.py en train.py.\nDans ce script, ajouter une sauvegarde du modèle après l’avoir entraîné, sous le format joblib.\nFaire tourner\n\n\n\nterminal\n\n$ python train.py\n\npour enregistrer en local votre modèle de production.\n\nModifier les appels à main.py dans votre Dockerfile et vos actions Github sous peine d’essuyer des échecs lors de vos actions Github après le prochain push.\nAjouter model.joblib au .gitignore car Git n’est pas fait pour ce type de fichiers.\n\nNous allons maintenant passer au développement de l’API. Comme découvrir FastAPI n’est pas l’objet de cet enseignement, nous donnons directement le modèle pour créer l’API. Si vous désirez tester de vous-mêmes, vous pouvez créer votre fichier sans vous référer à l’exemple.\n\nCréer le fichier app/api.py permettant d’initialiser l’API:\n\n\n\nFichier app/api.py\n\n\n\napp/api.py\n\n\"\"\"A simple API to expose our trained RandomForest model for Tutanic survival.\"\"\"\nfrom fastapi import FastAPI\nfrom joblib import load\n\nimport pandas as pd\n\nmodel = load('model.joblib')\n\napp = FastAPI(\n    title=\"Prédiction de survie sur le Titanic\",\n    description=\n    \"Application de prédiction de survie sur le Titanic 🚢 &lt;br&gt;Une version par API pour faciliter la réutilisation du modèle 🚀\" +\\\n        \"&lt;br&gt;&lt;br&gt;&lt;img src=\\\"https://media.vogue.fr/photos/5faac06d39c5194ff9752ec9/1:1/w_2404,h_2404,c_limit/076_CHL_126884.jpg\\\" width=\\\"200\\\"&gt;\"\n    )\n\n\n@app.get(\"/\", tags=[\"Welcome\"])\ndef show_welcome_page():\n    \"\"\"\n    Show welcome page with model name and version.\n    \"\"\"\n\n    return {\n        \"Message\": \"API de prédiction de survie sur le Titanic\",\n        \"Model_name\": 'Titanic ML',\n        \"Model_version\": \"0.1\",\n    }\n\n\n@app.get(\"/predict\", tags=[\"Predict\"])\nasync def predict(\n    sex: str = \"female\",\n    age: float = 29.0,\n    fare: float = 16.5,\n    embarked: str = \"S\"\n) -&gt; str:\n    \"\"\"\n    \"\"\"\n\n    df = pd.DataFrame(\n        {\n            \"Sex\": [sex],\n            \"Age\": [age],\n            \"Fare\": [fare],\n            \"Embarked\": [embarked],\n        }\n    )\n\n    prediction = \"Survived 🎉\" if int(model.predict(df)) == 1 else \"Dead ⚰️\"\n\n    return prediction\n\n\n\nConstruire et déployer en local l’API avec la commande\n\n\n\nterminal\n\n$ uvicorn api:app --reload --host \"0.0.0.0\" --port 5000\n\n\nEn retournant sur la page Mes Services du SSPCloud, ouvrir le README de votre service19. Se rendre sur l’URL de déploiement, ajouter /docs/ à celui-ci et observer la documentation de l’API\nSe servir de la documentation pour tester les requêtes /predict\nRécupérer l’URL d’une des requêtes proposées. La tester dans le navigateur et depuis Python avec requests :\n\nimport request\nrequests.get(url).json()\n\nUne fois que vous avez testé, vous pouvez tuer l’application en faisant CTRL+C. Retester votre bout de code Python et comprendre l’origine du problème.\n\n\n\n  \n    \n      \n        \n      \n      \n        Checkpoint post appli16      \n      \n    \n    \n      \n\n        \n        \n          \n            terminal\n          \n          \n            curl -sSL https://raw.githubusercontent.com/ensae-reproductibilite/website/refs/heads/main/chapters/applications/overwrite.sh -o update.sh && chmod +x update.sh\n./update.sh appli162\nrm -f update.sh\n          \n        \n        \n          1\n          Récupérer le script de checkpoint\n          2\n          Avancer à l’état à l’issue de l’application appli16\n          3\n          Nettoyer derrière nous"
  },
  {
    "objectID": "chapters/application.html#étape-2-déployer-lapi-de-manière-manuelle",
    "href": "chapters/application.html#étape-2-déployer-lapi-de-manière-manuelle",
    "title": "Application",
    "section": "Étape 2: déployer l’API de manière manuelle",
    "text": "Étape 2: déployer l’API de manière manuelle\n  \n    \n      \n        \n      \n      \n        Reprendre à partir d'ici      \n      \n    \n    \n      \n\n        Si vous n'avez plus de VSCode actif avec la configuration proposée dans l'application préliminaire, vous pouvez repartir de ce service:    \n      \n    \n    Et ensuite, après avoir clôné le dépôt\n        \n          \n            terminal\n          \n          \n            curl -sSL https://raw.githubusercontent.com/ensae-reproductibilite/website/refs/heads/main/chapters/applications/overwrite.sh -o update.sh && chmod +x update.sh\n./update.sh appli162\nrm -f update.sh\n          \n        \n        \n          1\n          Récupérer le script de checkpoint\n          2\n          Avancer à l’état à l’issue de l’application appli16\n          3\n          Nettoyer derrière nous\n        \n\n        \n          \n            \n          \n        \n      \n    \n  \n  \nA ce stade, nous avons déployé l’API seulement localement, dans le cadre d’un terminal qui tourne en arrière-plan. C’est une mise en production manuelle, pas franchement pérenne. Ce mode de déploiement est très pratique pour la phase de développement, afin de s’assurer que l’API fonctionne comme attendue. Pour pérenniser la mise en production, on va éliminer l’aspect artisanal de celle-ci.\nIl est temps de passer à l’étape de déploiement, qui permettra à notre API d’être accessible, à tout moment, via une URL sur le web et d’avoir un serveur, en arrière plan, qui effectuera les opérations pour répondre à une requête. Pour se faire, on va utiliser les possibilités offertes par Kubernetes, technologie sur laquelle est basée l’infrastructure SSP Cloud.\n\n\n\n\n\n\nEt si vous n’utilisez pas le SSPCloud ? (une idée saugrenue mais sait-on jamais)\n\n\n\n\n\nLes exemples à venir peuvent très bien être répliqués sur n’importe quel cloud provider qui propose une solution d’ordonnancement type Kubernetes. Il existe également des fournisseurs de services dédiés, généralement associés à une implémentation, par exemple pour Streamlit. Ces services sont pratiques si on n’a pas le choix mais il faut garder à l’esprit qu’ils peuvent constituer un mur de la production car vous ne contrôlez pas l’environnement en question, qui peut se distinguer de votre environnement de développement.\nEt si jamais vous voulez avoir un SSPCloud dans votre entreprise c’est possible: le logiciel Onyxia sur lequel repose cette infrastructure est open source et est, déjà, réimplémenté par de nombreux acteurs. Pour bénéficier d’un accompagnement dans la création d’une telle infrastructure, rdv sur le Slack du projet Onyxia:\n\n\n\n\n\n\n\n\n\n\nApplication 17: Dockeriser l’API (intégration continue)\n\n\n\n\nCréer un script app/run.sh à la racine du projet qui lance le script train.py puis déploie localement l’API\n\n\n\nFichier run.sh\n\n\n\napi/run.sh\n\n#/bin/bash\npython3 train.py\nuvicorn app.api:app --reload --host \"0.0.0.0\" --port 5000\n\n\n\nDonner au script api/run.sh des permissions d’exécution : chmod +x api/run.sh\nAjouter COPY app ./app pour avoir les fichiers nécessaires au lancement dans l’API dans l’image\nModifier COPY train.py . pour tenir compte du nouveau nom du fichier\nChanger l’instruction CMD du Dockerfile pour exécuter le script api/run.sh au lancement du conteneur (CMD [\"bash\", \"-c\", \"./app/run.sh\"])\nMettre à jour votre requirements.txt pour tenir compte des nouveaux packages utilisés\nCommit et push les changements\nUne fois le CI terminé, récupérer la nouvelle image dans votre environnement de test de Docker et vérifier que l’API se déploie correctement\n\n\n\n  \n    \n      \n        \n      \n      \n        Checkpoint post appli17      \n      \n    \n    \n      \n\n        \n        \n          \n            terminal\n          \n          \n            curl -sSL https://raw.githubusercontent.com/ensae-reproductibilite/website/refs/heads/main/chapters/applications/overwrite.sh -o update.sh && chmod +x update.sh\n./update.sh appli172\nrm -f update.sh\n          \n        \n        \n          1\n          Récupérer le script de checkpoint\n          2\n          Avancer à l’état à l’issue de l’application appli17\n          3\n          Nettoyer derrière nous\n        \n\n        \n          \n            \n          \n        \n      \n    \n  \n  \nNous avons préparé la mise à disposition de notre API mais à l’heure actuelle elle n’est pas accessible de manière aisée car il est nécessaire de lancer manuellement une image Docker pour pouvoir y accéder. Ce type de travail est la spécialité de Kubernetes que nous allons utiliser pour gérer la mise à disposition de notre API.\n\n\n\n\n\n\nApplication 18b: Mettre à disposition l’API (déploiement manuel)\n\n\n\nCette partie nécessite d’avoir à disposition une infrastructure cloud.\n\nCréer un dossier deployment à la racine du projet qui va contenir les fichiers de configuration nécessaires pour déployer sur un cluster Kubernetes\nEn vous inspirant de la documentation, y ajouter un premier fichier deployment.yaml qui va spécifier la configuration du Pod à lancer sur le cluster\n\n\n\nFichier deployment/deployment.yaml\n\n#| filename: \"deployment/deployment.yaml\"\n#| source-line-numbers: \"19\"\napiVersion: apps/v1\nkind: Deployment\nmetadata:\n  name: titanic-deployment\n  labels:\n    app: titanic\nspec:\n  replicas: 1\n  selector:\n    matchLabels:\n      app: titanic\n  template:\n    metadata:\n      labels:\n        app: titanic\n    spec:\n      containers:\n      - name: titanic\n1        image:\n        ports:\n        - containerPort: 5000\n\n1\n\nMettre ici l’image Docker utilisée, sous la forme username/image:latest\n\n\n\n\nEn vous inspirant de la documentation, y ajouter un second fichier service.yaml qui va créer une ressource Service permettant de donner une identité fixe au Pod précédemment créé au sein du cluster\n\n\n\nFichier deployment/service.yaml\n\n\n\ndeployment/service.yaml\n\napiVersion: v1\nkind: Service\nmetadata:\n  name: titanic-service\nspec:\n  selector:\n    app: titanic\n  ports:\n    - protocol: TCP\n      port: 80\n      targetPort: 5000\n\n\n\nEn vous inspirant de la documentation, y ajouter un troisième fichier ingress.yaml qui va créer une ressource Ingress permettant d’exposer le service via une URL en dehors du cluster\n\n\n\nFichier deployment/ingress.yaml\n\n#| filename: \"deployment/ingress.yaml\"\n#| source-line-numbers: \"16-19\"\napiVersion: networking.k8s.io/v1\nkind: Ingress\nmetadata:\n  name: titanic-ingress\n  annotations:\n    nginx.ingress.kubernetes.io/rewrite-target: /\n    # Enable CORS by adding these annotations\n    nginx.ingress.kubernetes.io/enable-cors: \"true\"\n    nginx.ingress.kubernetes.io/cors-allow-methods: \"PUT, GET, POST, DELETE, PATCH, OPTIONS\"\n    nginx.ingress.kubernetes.io/cors-allow-credentials: \"true\"\n    nginx.ingress.kubernetes.io/cors-allow-headers: \"DNT,X-CustomHeader,Keep-Alive,User-Agent,X-Requested-With,If-Modified-Since,Cache-Control,Content-Type,Authorization\"\n    nginx.ingress.kubernetes.io/cors-allow-origin: \"*\"\nspec:\n  ingressClassName: nginx\n  tls:\n  - hosts:\n1    -\n  rules:\n2  - host:\n    http:\n      paths:\n      - path: /\n        pathType: Prefix\n        backend:\n          service:\n            name: titanic-service\n            port:\n              number: 80\n\n1\n\nMettez l’URL auquel vous voulez exposer votre service. Sur le modèle de titanic.kub.sspcloud.fr (mais ne tentez pas celui-là, il est déjà pris 😃)\n\n2\n\nMettre ce même URL ici aussi\n\n\n\n\nAppliquer ces fichiers de configuration sur le cluster : kubectl apply -f deployment/\nSi tout a correctement fonctionné, vous devriez pouvoir accéder depuis votre navigateur à l’API à l’URL spécifiée dans le fichier deployment/ingress.yaml. Par exemple https://toto.kub.sspcloud.fr/ si vous avez mis celui-ci plus tôt (et https://toto.kub.sspcloud.fr/docs pour la documentation).\n\n\n\n  \n    \n      \n        \n      \n      \n        Checkpoint post appli18      \n      \n    \n    \n      \n\n        \n        \n          \n            terminal\n          \n          \n            curl -sSL https://raw.githubusercontent.com/ensae-reproductibilite/website/refs/heads/main/chapters/applications/overwrite.sh -o update.sh && chmod +x update.sh\n./update.sh appli182\nrm -f update.sh\n          \n        \n        \n          1\n          Récupérer le script de checkpoint\n          2\n          Avancer à l’état à l’issue de l’application appli18\n          3\n          Nettoyer derrière nous\n        \n\n        \n          \n            \n          \n        \n      \n    \n  \n  \n\n\n\n\n\n\nGérer le CORS\n\n\n\n\n\nNotre API est accessible sans problème depuis Python ou notre navigateur.\nEn revanche, si on désire utiliser JavaScript pour créer une application interactive il est indispensable de mettre les lignes un peu obscure sur le CORS dans le fichier ingress.yaml.\nComme c’est un point technique qui ne concerne pas les compétences liées à ce cours, nous avons donné directement les lignes correspondantes dans ce fichier.\n\n\n\nOn peut remarquer quelques voies d’amélioration de notre approche qui seront ultérieurement traitées:\n\nL’entraînement du modèle est ré-effectué à chaque lancement d’un nouveau conteneur. On relance donc autant de fois un entraînement qu’on déploie de conteneurs pour répondre à nos utilisateurs. Ce sera l’objet de la partie MLOps de fiabiliser et optimiser cette partie du pipeline.\nil est nécessaire de (re)lancer manuellement kubectl apply -f deployment/ à chaque changement de notre code. Autrement dit, lors de cette application, on a amélioré la fiabilité du lancement de notre API mais un lancement manuel est encore indispensable. Comme dans le reste de ce cours, on va essayer d’éviter un geste manuel pouvant être source d’erreur en privilégiant l’automatisation et l’archivage dans des scripts. C’est l’objet de la prochaine étape."
  },
  {
    "objectID": "chapters/application.html#etape-3-automatiser-le-déploiement-déploiement-en-continu",
    "href": "chapters/application.html#etape-3-automatiser-le-déploiement-déploiement-en-continu",
    "title": "Application",
    "section": "Etape 3: automatiser le déploiement (déploiement en continu)",
    "text": "Etape 3: automatiser le déploiement (déploiement en continu)\n\n\n\n\n\n\nClarification sur la branche de travail et les tags\n\n\n\nA partir de maintenant, il est nécessaire de clarifier la branche principale sur laquelle nous travaillons. De manière traditionnelle, on utilise la branche main. Si vous avez changé de branche, vous pouvez continuer 1/ continuer mais en tenir compte dans les exemples ultérieurs ou 2/ fusionner celle-ci à main.\nSi vous avez utilisé un tag pour sauter une ou plusieurs étapes, il va être nécessaire de se placer sur une branche car vous êtes en head detached. Si vous avez utilisé les scripts automatisés de checkpoint, cette gymnastique a été faite pour vous.\n\n\nQu’est-ce qui peut déclencher une évolution nécessitant de mettre à jour l’ensemble de notre processus de production ?\nRegardons à nouveau notre pipeline:\n\nLes inputs de notre pipeline sont donc:\n\nLa configuration. Ici, on peut considérer que notre .env de configuration, les secrets renseignés à Github ou encore le requirements.txt relèvent de cette catégorie ;\nLes données. Nos données sont statiques et n’ont pas vocation à évoluer. Si c’était le cas, il faudrait en tenir compte dans notre automatisation [@note-versionning-data]. ;\nLe code. C’est l’élément principal qui évolue chez nous. Idéalement, on veut automatiser le processus au maximum en faisant en sorte qu’à chaque mise à jour de notre code (un push sur Github), les étapes ultérieures (production de l’image Docker, etc.) se lancent. Néanmoins, on veut aussi éviter qu’une erreur puisse donner lieu à une mise en production non-fonctionnelle, on va donc maintenir une action manuelle minimale comme garde-fou.\n\n\n\n\n\n\n\nEt le versionning des données ?\n\n\n\nIci, nous nous plaçons dans le cas simple où les données brutes reçues sont figées. Ce qui peut changer est la manière dont on constitue nos échantillons train/test. Il sera donc utile de logguer les données en question par le biais de MLFlow. Mais il n’est pas nécessaire de versionner les données brutes.\nSi celles-ci évoluaient, il pourrait être utile de versionner les données, à la manière dont on le fait pour le code. Git n’est pas l’outil approprié pour cela. Parmi les outils populaires de versionning de données, bien intégrés avec S3, il y a, sur le SSPCloud, lakefs.\n\n\nPour automatiser au maximum la mise en production, on va utiliser un nouvel outil : ArgoCD. Ainsi, au lieu de devoir appliquer manuellement la commande kubectl apply à chaque modification des fichiers de déploiement (présents dans le dossier kubernetes/), c’est l’opérateur ArgoCD, déployé sur le cluster, qui va détecter les changements de configuration du déploiement et les appliquer automatiquement.\nC’est l’approche dite GitOps : le dépôt Git du déploiement fait office de source de vérité unique de l’état voulu de l’application, tout changement sur ce dernier doit donc se répercuter immédiatement sur le déploiement effectif.\n\n\n\n\n\n\nApplication 19a: Automatiser la mise à disposition de l’API (déploiement continu)\n\n\n\n\nLancer un service ArgoCD sur le SSPCloud depuis la page Mes services (catalogue Automation). Laisser les configurations par défaut.\nSur GitHub, créer un dépôt application-deployment qui va servir de dépôt GitOps, c’est à dire un dépôt qui spécifie le paramétrage du déploiement de votre application.\nAjouter un dossier deployment à votre dépôt GitOps, dans lequel on mettra les trois fichiers de déploiement qui permettent de déployer notre application sur Kubernetes (deployment.yaml, service.yaml, ingress.yaml).\nA la racine de votre dépôt GitOps, créez un fichier application.yml avec le contenu suivant, en prenant bien soin de modifier les lignes surlignées avec les informations pertinentes :\n\n\napplication.yaml\n\napiVersion: argoproj.io/v1alpha1\nkind: Application\nmetadata:\n  name: ensae-mlops\nspec:\n  project: default\n  source:\n1    repoURL: https://github.com/&lt;your_github_username&gt;/application-deployment.git\n2    targetRevision: main\n3    path: deployment\n  destination:\n    server: https://kubernetes.default.svc\n4    namespace: user-&lt;your_sspcloud_username&gt;\n  syncPolicy:\n    automated:\n      selfHeal: true\n\n\n1\n\nL’URL de votre dépôt Github  faisant office de dépôt GitOps.\n\n2\n\nLa branche à partir de laquelle vous déployez.\n\n3\n\nLe nom du dossier contenant vos fichiers de déploiement Kubernetes.\n\n4\n\nVotre namespace Kubernetes. Sur le SSPCloud, cela prend la forme user-${username}.\n\n\nPousser sur Github le dépôt GitOps.\nDans ArgoCD, cliquez sur New App puis Edit as a YAML. Copiez-collez le contenu de application.yml et cliquez sur Create.\nObservez dans l’interface d’ArgoCD le déploiement progressif des ressources nécessaires à votre application sur le cluster. Joli non ?\nVérifiez que votre API est bien déployée en utilisant l’URL définie dans le fichier ingress.yml.\nSupprimer du code applicatif le dossier deployment puisque c’est maintenant votre dépôt de déploiement qui le contrôle.\nIndiquer dans le README.md que le déploiement de votre application (dont vous pouvez mettre l’URL dans le README) est contrôlé par un autre dépôt.\n\n\n\nSi cela a fonctionné, vous devriez maintenant voir votre application dans votre tableau de bord ArgoCD:\n\n  \n    \n      \n        \n      \n      \n        Checkpoint post appli19a      \n      \n    \n    \n      \n\n        \n        \n          \n            terminal\n          \n          \n            curl -sSL https://raw.githubusercontent.com/ensae-reproductibilite/website/refs/heads/main/chapters/applications/overwrite.sh -o update.sh && chmod +x update.sh\n./update.sh appli19a2\nrm -f update.sh\n          \n        \n        \n          1\n          Récupérer le script de checkpoint\n          2\n          Avancer à l’état à l’issue de l’application appli19a\n          3\n          Nettoyer derrière nous\n        \n\n        \n          \n            \n          \n        \n      \n    \n  \n  \nA présent, nous avons tous les outils à notre disposition pour construire un vrai pipeline de CI/CD, automatisé de bout en bout. Il va nous suffire pour cela de mettre à bout les composants :\n\ndans la partie 4 de l’application, nous avons construit un pipeline de CI : on a donc seulement à faire un commit sur le dépôt de l’application pour lancer l’étape de build et de mise à disposition de la nouvelle image sur le DockerHub ;\ndans l’application précédente, nous avons construit un pipeline de CD : ArgoCD suit en permanence l’état du dépôt GitOps, tout commit sur ce dernier lancera donc automatiquement un redéploiement de l’application.\n\nIl y a donc un élément qui fait la liaison entre ces deux pipelines et qui nous sert de garde-fou en cas d’erreur : la version de l’application.\n\n\n\n\n\n\nApplication 19b : Mettre à jour la version en production\n\n\n\nJusqu’à maintenant, on a utilisé le tag latest pour définir la version de notre application. En pratique, lorsqu’on passe de la phase de développement à celle de production, on a plutôt envie de versionner proprement les versions de l’application afin de savoir ce qui est déployé. On va pour cela utiliser les tags avec Git, qui vont se propager au nommage de l’image Docker.\n\nModifier le fichier de CI prod.yml pour assurer la propagation des tags.\n\n\n\nFichier .github/workflows/prod.yml\n\n\n\n.github/workflows/prod.yml\n\nname: Construction image Docker\n\non:\n  push:\n    branches:\n      - main\n      - dev\n    tags:\n      - 'v*.*.*'\n\njobs:\n  docker:\n    runs-on: ubuntu-latest\n    steps:\n      -\n        name: Set up QEMU\n        uses: docker/setup-qemu-action@v3\n      -\n        name: Set up Docker Buildx\n        uses: docker/setup-buildx-action@v3\n\n      -\n        name: Docker meta\n        id: meta\n        uses: docker/metadata-action@v5\n        with:\n1          images: linogaliana/application\n\n      -\n        name: Login to Docker Hub\n        uses: docker/login-action@v3\n        with:\n          username: ${{ secrets.DOCKERHUB_USERNAME }}\n          password: ${{ secrets.DOCKERHUB_TOKEN }}\n      -\n        name: Build and push\n        uses: docker/build-push-action@v5\n        with:\n          push: true\n          tags: ${{ steps.meta.outputs.tags }}\n          labels: ${{ steps.meta.outputs.labels }}\n\n\n1\n\nModifier ici !\n\n\n\n\nDans le dépôt de l’application, mettre à jour le code dans app/main.py pour changer un élément de l’interface de votre documentation. Par exemple, mettre en gras un titre.\n\n\napp/main.py\n\napp = FastAPI(\n    title=\"Démonstration du modèle de prédiction de survie sur le Titanic\",\n    description=\n    \"&lt;b&gt;Application de prédiction de survie sur le Titanic&lt;/b&gt; 🚢 &lt;br&gt;Une version par API pour faciliter la réutilisation du modèle 🚀\" +\\\n        \"&lt;br&gt;&lt;br&gt;&lt;img src=\\\"https://media.vogue.fr/photos/5faac06d39c5194ff9752ec9/1:1/w_2404,h_2404,c_limit/076_CHL_126884.jpg\\\" width=\\\"200\\\"&gt;\"\n    )\n\nCommit et push les changements.\nTagger le commit effectué précédemment et push le nouveau tag :\n\n\nterminal\n\n$ git tag v0.0.1\n$ git push --tags\n\nVérifier sur le dépôt GitHub de l’application que ce commit lance bien un pipeline de CI associé au tag v1.0.0. Une fois terminé, vérifier sur le DockerHub que le tag v0.0.1 existe bien parmi les tags disponibles de l’image.\n\nLa partie CI a correctement fonctionné. Intéressons-nous à présent à la partie CD.\n\nSur le dépôt GitOps, mettre à jour la version de l’image à déployer en production dans le fichier deployment/deployment.yaml\n\n\n\nFichier deployment/deployment.yaml\n\n\n\ndeployment/deployment.yaml\n\napiVersion: apps/v1\nkind: Deployment\nmetadata:\n  name: titanic-deployment\n  labels:\n    app: titanic\nspec:\n  replicas: 1\n  selector:\n    matchLabels:\n      app: titanic\n  template:\n    metadata:\n      labels:\n        app: titanic\n    spec:\n      containers:\n      - name: titanic\n1        image: linogaliana/application:v0.0.1\n        ports:\n        - containerPort: 5000\n\n\n1\n\nRemplacer ici par le dépôt applicatif adéquat\n\n\n\n\nAprès avoir committé et pushé, observer dans ArgoCD le statut de votre application. Normalement, l’opérateur devrait avoir automatiquement identifié le changement, et mettre à jour le déploiement pour en tenir compte.\n\n\n\nVérifier que l’API a bien été mise à jour.\n\n\n\n  \n    \n      \n        \n      \n      \n        Checkpoint post appli19b      \n      \n    \n    \n      \n\n        \n        \n          \n            terminal\n          \n          \n            curl -sSL https://raw.githubusercontent.com/ensae-reproductibilite/website/refs/heads/main/chapters/applications/overwrite.sh -o update.sh && chmod +x update.sh\n./update.sh appli19b2\nrm -f update.sh\n          \n        \n        \n          1\n          Récupérer le script de checkpoint\n          2\n          Avancer à l’état à l’issue de l’application appli19b\n          3\n          Nettoyer derrière nous"
  },
  {
    "objectID": "chapters/application.html#etape-4-construire-un-site-web",
    "href": "chapters/application.html#etape-4-construire-un-site-web",
    "title": "Application",
    "section": "Etape 4: construire un site web",
    "text": "Etape 4: construire un site web\n\n\n\n\n\n\nSi vous prenez ce projet fil rouge en cours de route\n\n\n\n\n\n\n\nterminal\n\n$ git checkout appli19\n$ git checkout -b dev\n$ git push origin dev\n\n\n\n\n\n\n\n\n\nOn va proposer un nouveau livrable pour parler à un public plus large. Pour faire ce site web, on va utiliser Quarto et déployer sur Github Pages.\n\n\n\n\n\n\nApplication 20: Création d’un site web pour valoriser le projet\n\n\n\n\n\nterminal\n\n$ quarto create project website mysite\n\n\nFaire remonter d’un niveau _quarto.yml\nSupprimer about.qmd, déplacer index.qmd vers la racine de notre projet.\nRemplacer le contenu de index.qmd par celui-ci et retirer about.qmd des fichiers à compiler.\nDéplacer styles.css à la racine du projet\nMettre à jour le .gitignore avec les instructions suivantes\n\n/.quarto/\n*.html\n*_files\n_site/\n\nEn ligne de commande, faire quarto preview (ajouter les arguments --port 5000 --host 0.0.0.0 si vous passez par le SSPCloud)\nObserver le site web généré en local\n\nEnfin, on va construire et déployer automatiquement ce site web grâce au combo Github Actions et Github Pages:\n\nCréer une branche gh-pages à partir des lignes suivantes\n\ngit checkout --orphan gh-pages\ngit reset --hard # make sure all changes are committed before running this!\ngit commit --allow-empty -m \"Initialising gh-pages branch\"\ngit push origin gh-pages\n\nRevenir à votre branche principale (main normalement)\nCréer un fichier .github/workflows/website.yaml avec le contenu de ce fichier\nModifier le README pour indiquer l’URL de votre site web et de votre API\n\n\n\n  \n    \n      \n        \n      \n      \n        Checkpoint post appli20      \n      \n    \n    \n      \n\n        \n        \n          \n            terminal\n          \n          \n            curl -sSL https://raw.githubusercontent.com/ensae-reproductibilite/website/refs/heads/main/chapters/applications/overwrite.sh -o update.sh && chmod +x update.sh\n./update.sh appli202\nrm -f update.sh\n          \n        \n        \n          1\n          Récupérer le script de checkpoint\n          2\n          Avancer à l’état à l’issue de l’application appli20\n          3\n          Nettoyer derrière nous"
  },
  {
    "objectID": "chapters/application.html#revenir-sur-le-code-dentraînement-du-modèle-pour-faire-de-la-validation-croisée",
    "href": "chapters/application.html#revenir-sur-le-code-dentraînement-du-modèle-pour-faire-de-la-validation-croisée",
    "title": "Application",
    "section": "Revenir sur le code d’entraînement du modèle pour faire de la validation croisée",
    "text": "Revenir sur le code d’entraînement du modèle pour faire de la validation croisée\nPour pouvoir faire ceci, il va falloir changer un tout petit peu notre code applicatif dans sa phase d’entraînement.\n\n\n\n\n\n\nApplication 21 (optionnelle): restructuration de la chaîne\n\n\n\n\nFaire les modifications suivantes pour restructurer notre pipeline afin de mieux distinguer les étapes d’estimation et d’évaluation\n\n\n\nModification de train.py pour faire une grid search\n\n\n\ntrain.py\n\n\"\"\"\nPrediction de la survie d'un individu sur le Titanic\n\"\"\"\n\nimport os\nfrom dotenv import load_dotenv\nimport argparse\nfrom loguru import logger\n\nimport pathlib\nfrom joblib import dump\nimport pandas as pd\nfrom sklearn.model_selection import GridSearchCV\n\nfrom src.pipeline.build_pipeline import split_train_test, create_pipeline\nfrom src.models.train_evaluate import evaluate_model\n\n\n# ENVIRONMENT CONFIGURATION ---------------------------\n\nlogger.add(\"recording.log\", rotation=\"500 MB\")\nload_dotenv()\n\nparser = argparse.ArgumentParser(description=\"Paramètres du random forest\")\nparser.add_argument(\n    \"--n_trees\", type=int, default=20, help=\"Nombre d'arbres\"\n)\nargs = parser.parse_args()\n\nURL_RAW = \"https://minio.lab.sspcloud.fr/lgaliana/ensae-reproductibilite/data/raw/data.csv\"\n\nn_trees = args.n_trees\njeton_api = os.environ.get(\"JETON_API\", \"\")\ndata_path = os.environ.get(\"data_path\", URL_RAW)\ndata_train_path = os.environ.get(\"train_path\", \"data/derived/train.parquet\")\ndata_test_path = os.environ.get(\"test_path\", \"data/derived/test.parquet\")\nMAX_DEPTH = None\nMAX_FEATURES = \"sqrt\"\n\nif jeton_api.startswith(\"$\"):\n    logger.info(\"API token has been configured properly\")\nelse:\n    logger.warning(\"API token has not been configured\")\n\n\n# IMPORT ET STRUCTURATION DONNEES --------------------------------\n\np = pathlib.Path(\"data/derived/\")\np.mkdir(parents=True, exist_ok=True)\n\nTrainingData = pd.read_csv(data_path)\n\nX_train, X_test, y_train, y_test = split_train_test(\n    TrainingData, test_size=0.1,\n    train_path=data_train_path,\n    test_path=data_test_path\n)\n\n\n# PIPELINE ----------------------------\n\n\n# Create the pipeline\npipe = create_pipeline(\n    n_trees, max_depth=MAX_DEPTH, max_features=MAX_FEATURES\n)\n\n\nparam_grid = {\n    \"classifier__n_estimators\": [10, 20, 50],\n    \"classifier__max_leaf_nodes\": [5, 10, 50],\n}\n\n\npipe_cross_validation = GridSearchCV(\n    pipe,\n    param_grid=param_grid,\n    scoring=[\"accuracy\", \"precision\", \"recall\", \"f1\"],\n    refit=\"f1\",\n    cv=5,\n    n_jobs=5,\n    verbose=1,\n)\npipe = pipe_cross_validation.best_estimator_\n\n# ESTIMATION ET EVALUATION ----------------------\n\npipe.fit(X_train, y_train)\n\ndump(pipe, 'model.joblib')\n\n\n# Evaluate the model\nscore, matrix = evaluate_model(pipe, X_test, y_test)\n\nlogger.success(f\"{score:.1%} de bonnes réponses sur les données de test pour validation\")\nlogger.debug(20 * \"-\")\nlogger.info(\"Matrice de confusion\")\nlogger.debug(matrix)\n\n\n\nDans le code de l’API (app/api.py), changer la version du modèle mis en oeuvre en “0.2”\nAprès avoir committé cette nouvelle version du code applicatif, tagguer ce dépôt avec le tag v0.0.2\nModifier deployment/deployment.yaml dans le code GitOps pour utiliser ce tag.\n\n\n\n  \n    \n      \n        \n      \n      \n        Checkpoint post appli21      \n      \n    \n    \n      \n\n        \n        \n          \n            terminal\n          \n          \n            curl -sSL https://raw.githubusercontent.com/ensae-reproductibilite/website/refs/heads/main/chapters/applications/overwrite.sh -o update.sh && chmod +x update.sh\n./update.sh appli212\nrm -f update.sh\n          \n        \n        \n          1\n          Récupérer le script de checkpoint\n          2\n          Avancer à l’état à l’issue de l’application appli21\n          3\n          Nettoyer derrière nous"
  },
  {
    "objectID": "chapters/application.html#garder-une-trace-des-entraînements-de-notre-modèle-grâce-au-register-de-mlflow",
    "href": "chapters/application.html#garder-une-trace-des-entraînements-de-notre-modèle-grâce-au-register-de-mlflow",
    "title": "Application",
    "section": "Garder une trace des entraînements de notre modèle grâce au register de MLFlow",
    "text": "Garder une trace des entraînements de notre modèle grâce au register de MLFlow\n  \n    \n      \n        \n      \n      \n        Reprendre à partir d'ici      \n      \n    \n    \n      \n\n        Si vous n'avez plus de VSCode actif avec la configuration proposée dans l'application préliminaire, vous pouvez repartir de ce service:    \n      \n    \n    Et ensuite, après avoir clôné le dépôt\n        \n          \n            terminal\n          \n          \n            curl -sSL https://raw.githubusercontent.com/ensae-reproductibilite/website/refs/heads/main/chapters/applications/overwrite.sh -o update.sh && chmod +x update.sh\n./update.sh appli212\nrm -f update.sh\n          \n        \n        \n          1\n          Récupérer le script de checkpoint\n          2\n          Avancer à l’état à l’issue de l’application appli21\n          3\n          Nettoyer derrière nous"
  },
  {
    "objectID": "chapters/application.html#enregistrer-nos-premiers-entraînements",
    "href": "chapters/application.html#enregistrer-nos-premiers-entraînements",
    "title": "Application",
    "section": "Enregistrer nos premiers entraînements",
    "text": "Enregistrer nos premiers entraînements\n\n\n\n\n\n\nApplication 22 : archiver nos entraînements avec MLFlow\n\n\n\n\nLancer MLFlow depuis l’onflet Mes services du SSPCloud. Attendre que le service soit bien lancé. Cela créera un service dont l’URL est de la forme https://user-{username}.user.lab.sspcloud.fr. Ce service MLFlow communiquera avec les VSCode que vous ouvrirez ultérieurement à partir de cet URL ainsi qu’avec le système de stockage S320.\nRegarder la page Experiments. Elle ne contient que Default à ce stade, c’est normal.\n\n\nUne fois le service MLFlow fonctionnel, lancer un nouveau VSCode pour bénéficier de la connexion automatique entre les services interactifs du SSPCloud et les services d’automatisation comme MLFlow.\nClôner votre projet, vous situer sur la branche de travail.\nDans la section de passage des paramètres de notre ligne de commande, introduire ce morceau de code:\n\nparser = argparse.ArgumentParser(description=\"Paramètres du random forest\")\nparser.add_argument(\n    \"--n_trees\", type=int, default=20, help=\"Nombre d'arbres\"\n)\nparser.add_argument(\n    \"--experiment_name\", type=str, default=\"titanicml\", help=\"MLFlow experiment name\"\n)\nargs = parser.parse_args()\n\nFaire tourner train.py en ligne de commande puis retourner sur l’UI de MLFlow et observer la différence, à gauche.\nA la fin du script train.py, ajouter le code suivant\n\n\n\nCode à ajouter\n\n\n\nfin de train.py\n\n# LOGGING IN MLFLOW -----------------\n\ninput_data_mlflow = mlflow.data.from_pandas(\n    TrainingData, source=data_path, name=\"Raw dataset\"\n)\ntraining_data_mlflow = mlflow.data.from_pandas(\n    pd.concat([X_train, y_train], axis=1), source=data_path, name=\"Training data\"\n)\n\n\nwith mlflow.start_run():\n\n    # Log datasets\n    mlflow.log_input(input_data_mlflow, context=\"raw\")\n    mlflow.log_input(training_data_mlflow, context=\"raw\")\n\n    # Log parameters\n    mlflow.log_param(\"n_trees\", n_trees)\n    mlflow.log_param(\"max_depth\", MAX_DEPTH)\n    mlflow.log_param(\"max_features\", MAX_FEATURES)\n\n    # Log best hyperparameters from GridSearchCV\n    best_params = pipe_cross_validation.best_params_\n    for param, value in best_params.items():\n        mlflow.log_param(param, value)\n\n    # Log metrics\n    mlflow.log_metric(\"accuracy\", score)\n\n    # Log confusion matrix as an artifact\n    matrix_path = \"confusion_matrix.txt\"\n    with open(matrix_path, \"w\") as f:\n        f.write(str(matrix))\n    mlflow.log_artifact(matrix_path)\n\n    # Log model\n    mlflow.sklearn.log_model(pipe, \"model\")\n\n\n\nAjouter mlruns/* dans .gitignore\nTester train.py en ligne de commande\nObserver l’évolution de la page Experiments. Cliquer sur un des run. Observer toutes les métadonnées archivées (hyperparamètres, métriques d’évaluation, requirements.txt dont MLFlow a fait l’inférence, etc.)\nObserver le code proposé par MLFlow pour récupérer le run en question. Tester celui-ci dans un notebook sur le fichier intermédiaire de test au format Parquet\nEn ligne de commande, faites tourner pour une autre valeur de n_trees. Retourner à la liste des runs en cliquant à nouveau sur “titanicml” dans les expérimentations\nDans l’onglet Table, sélectionner plusieurs expérimentations, cliquer sur Columns et ajouter la statistique d’accuracy. Ajuster la taille des colonnes pour la voir et classer les modèles par score décroissants\nCliquer sur Compare après en avoir sélectionné plusieurs. Afficher un scatterplot des performances en fonction du nombre d’estimateurs. Conclure.\n\n\n\n  \n    \n      \n        \n      \n      \n        Checkpoint post appli22      \n      \n    \n    \n      \n\n        \n        \n          \n            terminal\n          \n          \n            curl -sSL https://raw.githubusercontent.com/ensae-reproductibilite/website/refs/heads/main/chapters/applications/overwrite.sh -o update.sh && chmod +x update.sh\n./update.sh appli222\nrm -f update.sh\n          \n        \n        \n          1\n          Récupérer le script de checkpoint\n          2\n          Avancer à l’état à l’issue de l’application appli22\n          3\n          Nettoyer derrière nous\n        \n\n        \n          \n            \n          \n        \n      \n    \n  \n  \nCette appplication illustre l’un des premiers apports de MLFlow: on garde une trace de nos expérimentations: le modèle est archivé avec les paramètres et des métriques de performance. On peut donc retrouver de plusieurs manières un modèle qui nous avait tapé dans l’oeil.\nNéanmoins, persistent un certain nombre de voies d’amélioration dans notre pipeline.\n\nOn entraîne le modèle en local, de manière séquentielle, et en lançant nous-mêmes le script train.py.\nPis encore, à l’heure actuelle, cette étape d’estimation n’est pas séparée de la mise à disposition du modèle par le biais de notre API. On archive des modèles mais on les utilise pas ultérieurement.\n\nLes prochaines applications permettront d’améliorer ceci."
  },
  {
    "objectID": "chapters/application.html#consommation-dun-modèle-archivé-sur-mlflow",
    "href": "chapters/application.html#consommation-dun-modèle-archivé-sur-mlflow",
    "title": "Application",
    "section": "Consommation d’un modèle archivé sur MLFlow",
    "text": "Consommation d’un modèle archivé sur MLFlow\nA l’heure actuelle, notre pipeline est linéaire:\n\nCeci nous gêne pour faire évoluer notre modèle: on ne dissocie pas ce qui relève de l’entraînement du modèle de son utilisation. Un pipeline plus cyclique permettra de mieux dissocier l’expérimentation de la production:\n\n\n\n\n\n\n\nApplication 23 : passer en production un modèle avec MLFlow\n\n\n\n\nSi vous avez entraîné plusieurs modèles avec des n_trees différents, utiliser l’interface de MLFlow pour sélectionner le “meilleur”. Cliquer sur le modèle en question et faire l’action “Register Model”. L’enregistrer comme le modèle de “production”\nRendez-vous sur l’onglet Models et observez cet entrepôt de modèles. Cliquez sur le modèle de production. Vous pourrez par ce biais suivre ses différentes versions.\nOuvrir un notebook temporaire et observer le résultat.\n\nimport mlflow\nimport pandas as pd\n\nmodel_name = \"production\"\nmodel_version = \"latest\"\n\n# Load the model from the Model Registry\nmodel_uri = f\"models:/{model_name}/{model_version}\"\nlogged_model = mlflow.sklearn.load_model(model_uri)\n\n\n# GENERATE PREDICTION DATA ---------------------\n\ndef create_data(\n    sex: str = \"female\",\n    age: float = 29.0,\n    fare: float = 16.5,\n    embarked: str = \"S\",\n) -&gt; str:\n    \"\"\"\n    \"\"\"\n\n    df = pd.DataFrame(\n        {\n            \"Sex\": [sex],\n            \"Age\": [age],\n            \"Fare\": [fare],\n            \"Embarked\": [embarked],\n        }\n    )\n\n    return df\n\n\ndata = pd.concat(\n    [create_data(age=40), create_data(sex=\"male\")]\n)\n\n# PREDICTION ---------------------\n\nlogged_model.predict(pd.DataFrame(data))\n\nOn va adapter le code applicatif de notre API pour tenir compte de ce modèle de production.\n\n\"\"\"A simple API to expose our trained RandomForest model for Tutanic survival.\"\"\"\nfrom fastapi import FastAPI\nimport mlflow\n\nimport pandas as pd\n\n# Preload model -------------------\n\nmodel_name = \"production\"\nmodel_version = \"latest\"\n\n# Load the model from the Model Registry\nmodel_uri = f\"models:/{model_name}/{model_version}\"\nmodel = mlflow.sklearn.load_model(model_uri)\n\n# Define app -------------------------\n\n\napp = FastAPI(\n    title=\"Prédiction de survie sur le Titanic\",\n    description=\n    \"Application de prédiction de survie sur le Titanic 🚢 &lt;br&gt;Une version par API pour faciliter la réutilisation du modèle 🚀\" +\\\n        \"&lt;br&gt;&lt;br&gt;&lt;img src=\\\"https://media.vogue.fr/photos/5faac06d39c5194ff9752ec9/1:1/w_2404,h_2404,c_limit/076_CHL_126884.jpg\\\" width=\\\"200\\\"&gt;\"\n    )\n\n\n@app.get(\"/\", tags=[\"Welcome\"])\ndef show_welcome_page():\n    \"\"\"\n    Show welcome page with model name and version.\n    \"\"\"\n\n    return {\n        \"Message\": \"API de prédiction de survie sur le Titanic\",\n        \"Model_name\": 'Titanic ML',\n        \"Model_version\": \"0.3\",\n    }\n\n\n@app.get(\"/predict\", tags=[\"Predict\"])\nasync def predict(\n    sex: str = \"female\",\n    age: float = 29.0,\n    fare: float = 16.5,\n    embarked: str = \"S\"\n) -&gt; str:\n    \"\"\"\n    \"\"\"\n\n    df = pd.DataFrame(\n        {\n            \"Sex\": [sex],\n            \"Age\": [age],\n            \"Fare\": [fare],\n            \"Embarked\": [embarked],\n        }\n    )\n\n    prediction = \"Survived 🎉\" if int(model.predict(df)) == 1 else \"Dead ⚰️\"\n\n    return prediction\nLes changements principaux de ce code sont:\n\non va chercher le modèle de production\non met à jour la version de notre API pour signaler à nos clients que celle-ci a évolué\n\n\nOn va retirer l’entraînement de la séquence d’opération du api/run.sh. En supprimant la ligne relative à l’entraînement du modèle, vous devriez avoir\n\n#/bin/bash\nuvicorn api.main:app --reload --host \"0.0.0.0\" --port 5000\nMettons en production cette nouvelle version. Cela implique de faire les gestes suivants:\n\nPublier un tag v0.0.3 pour le code applicatif\nMettre à jour notre manifeste dans le dépôt GitOps. En premier lieu, il faut changer la version de référence pour utiliser le tag v0.0.3. De plus, il faut déclarer la variable d’environnement MLFLOW_TRACKING_URI qui indique à Python l’entrepôt de modèles où aller chercher celui en production. La bonne pratique est de définir ceci hors du code, dans un fichier de configuration donc, ce qui est l’objet de notre manifeste deployment.yaml. On peut donc changer de cette manière ce fichier:\n\n\napiVersion: apps/v1\nkind: Deployment\nmetadata:\n  name: titanic-deployment\n  labels:\n    app: titanic\nspec:\n  replicas: 1\n  selector:\n    matchLabels:\n      app: titanic\n  template:\n    metadata:\n      labels:\n        app: titanic\n    spec:\n      containers:\n      - name: titanic\n1        image: linogaliana/application:v0.0.3\n        ports:\n        - containerPort: 5000\n        env:\n          - name: MLFLOW_TRACKING_URI\n2            value: https://user-${USERNAME}-mlflow.user.lab.sspcloud.fr\n        resources:\n          limits:\n            memory: \"2Gi\"\n            cpu: \"1000m\"\n\n\n1\n\nLe tag de notre code applicatif\n\n2\n\nLa variable d’environnement à adapter en fonction de l’adresse du dépôt de modèles utilisé\n\n\n\n\n\n\nA ce stade, nous avons amélioré la fiabilité de notre application car nous utilisons le meilleur modèle. Néanmoins, nos entraînements sont encore manuels. Là encore il y a des gains à avoir car cela paraît pénible à la longue de devoir systématiquement relancer des entraînements manuellement pour tester des variations de tel ou tel paramètre. Heureusement, nous allons pouvoir automatiser ceci également.\n\n\n\n\n\n\nCheckpoint\n\n\n\n\n\n\n\nterminal\n\n1$ git stash\n$ git checkout appli23\n\n\n1\n\nPour annuler les modifications depuis le dernier commit\n\n\n\n\n\n\n\n\n\n\n\nIndustrialiser les entraînements de nos modèles\nPour industrialiser nos entraînements, nous allons créer des processus parallèles indépendants pour chaque combinaison de nos hyperparamètres. Pour cela, l’outil pratique sur le SSPCloud est Argo workflows.\nChaque combinaison d’hyperparamètres sera un processus isolé à l’issue duquel sera loggué le résultat dans MLFlow. Ces entraînements auront lieu en parallèle.\n\n\nLancer un service Argo Workflows\nDans le dépôt GitOps, créer un fichier argo-workflow/manifest.yaml\n\napiVersion: argoproj.io/v1alpha1\nkind: Workflow\nmetadata:\n  generateName: titanic-training-workflow-\n  namespace: user-lgaliana\nspec:\n  entrypoint: main\n  serviceAccountName: workflow\n  arguments:\n    parameters:\n      # The MLflow tracking server is responsible to log the hyper-parameter and model metrics.\n      - name: mlflow-tracking-uri\n1        value: https://user-lgaliana-argo-workflows.user.lab.sspcloud.fr\n      - name: mlflow-experiment-name\n2        value: titanicml\n      - name: model-training-conf-list\n        value: |\n          [\n            { \"n_trees\": 10, \"max_features\": \"log2\" },\n            { \"n_trees\": 20, \"max_features\": \"sqrt\" },\n            { \"n_trees\": 20, \"max_features\": \"log2\" },\n            { \"n_trees\": 50, \"max_features\": \"sqrt\" }\n          ]\n  templates:\n    # Entrypoint DAG template\n    - name: main\n      dag:\n        tasks:\n          # Task 0: Start pipeline\n          - name: start-pipeline\n            template: start-pipeline-wt\n          # Task 1: Train model with given params\n          - name: train-model-with-params\n            dependencies: [ start-pipeline ]\n            template: run-model-training-wt\n            arguments:\n              parameters:\n                - name: max_features\n                  value: \"{{item.max_features}}\"\n                - name: n_trees\n                  value: \"{{item.n_trees}}\"\n            # Pass the inputs to the task using \"withParam\"\n            withParam: \"{{workflow.parameters.model-training-conf-list}}\"\n\n    # Now task container templates are defined\n    # Worker template for task 0 : start-pipeline\n    - name: start-pipeline-wt\n      inputs:\n      container:\n        image: busybox\n        command: [ sh, -c ]\n        args: [ \"echo Starting pipeline\" ]\n\n    # Worker template for task-1 : train model with params\n    - name: run-model-training-wt\n      inputs:\n        parameters:\n          - name: n_trees\n          - name: max_features\n      container:\n3        image: linogaliana/application:v0.0.5\n        imagePullPolicy: Always\n        command: [sh, -c]\n        args: [\n          \"python train.py --n_trees={{inputs.parameters.n_trees}} --max_features={{inputs.parameters.max_features}}\"\n          ]\n        env:\n          - name: MLFLOW_TRACKING_URI\n            value: \"{{workflow.parameters.mlflow-tracking-uri}}\"\n          - name: MLFLOW_EXPERIMENT_NAME\n            value: \"{{workflow.parameters.mlflow-experiment-name}}\"\n          - name: AWS_DEFAULT_REGION\n            value: us-east-1\n          - name: AWS_S3_ENDPOINT\n            value: minio.lab.sspcloud.fr\n\n1\n\nChanger pour votre entrepot de modèle\n\n2\n\nLe nom de l’expérimentation MLFLow dont nous allons avoir besoin (on propose de continuer sur titanicml)\n\n3\n\nChanger l’application ici"
  },
  {
    "objectID": "chapters/application.html#pour-aller-plus-loin",
    "href": "chapters/application.html#pour-aller-plus-loin",
    "title": "Application",
    "section": "Pour aller plus loin",
    "text": "Pour aller plus loin\nCréer un service label studio pour évaluer la qualité du modèle"
  },
  {
    "objectID": "chapters/application.html#footnotes",
    "href": "chapters/application.html#footnotes",
    "title": "Application",
    "section": "Footnotes",
    "text": "Footnotes\n\n\nIl y a quelques différences entre le VSCode server mis à disposition sur le SSPCloud et la version desktop sur laquelle s’appuient beaucoup de ressources. A quelques extensions prêts (Data Wrangler, Copilot), les différences sont néanmoins minimes.↩︎\nL’export dans un script .py a été fait directement depuis VSCode. Comme cela n’est pas vraiment l’objet du cours, nous passons cette étape et fournissons directement le script expurgé du texte intermédiaire. Mais n’oubliez pas que cette démarche, fréquente quand on a démarré sur un notebook et qu’on désire consolider en faisant la transition vers des scripts, nécessite d’être attentif pour ne pas risquer de faire une erreur.↩︎\nIl est également possible avec VSCode d’exécuter le script ligne à ligne de manière interactive ligne à ligne (MAJ+ENTER). Néanmoins, cela nécessite de s’assurer que le working directory de votre console interactive est le bon. Celle-ci se lance selon les paramètres préconfigurés de VSCode et les votres ne sont peut-être pas les mêmes que les notres. Vous pouvez changer le working directory dans le script en utilisant le package os mais peut-être allez vous découvrir ultérieurement qu’il y a de meilleures pratiques…↩︎\nEssayez de commit vos changements à chaque étape de l’exercice, c’est une bonne habitude à prendre.↩︎\nIl est normal d’avoir des dossiers __pycache__ qui traînent en local : ils se créent automatiquement à l’exécution d’un script en Python. Néanmoins, il ne faut pas associer ces fichiers à Git, voilà pourquoi on les ajoute au .gitignore.↩︎\nNous proposons ici d’adopter le principe de la programmation fonctionnelle. Pour encore fiabiliser un processus, il serait possible d’adopter le paradigme de la programmation orientée objet (POO). Celle-ci est plus rebutante et demande plus de temps au développeur. L’arbitrage coût-avantage est négatif pour notre exemple, nous proposons donc de nous en passer. Néanmoins, pour une mise en production réelle d’un modèle, il peut être utle de l’adopter car certains frameworks, à commencer par les pipelines scikit, exigeront certaines classes et méthodes si vous désirez brancher des objets ad hoc à ceux-ci.↩︎\nAttention, les données ont été committées au moins une fois. Les supprimer du dépôt ne les efface pas de l’historique. Si cette erreur arrive, le mieux est de supprimer le dépôt en ligne, créer un nouvel historique Git et partir de celui-ci pour des publications ultérieures sur Github. Néanmoins l’idéal serait de ne pas s’exposer à cela. C’est justement l’objet des bonnes pratiques de ce cours: un .gitignore bien construit et une séparation des environnements de stockage du code et des données seront bien plus efficaces pour vous éviter ces problèmes que tout les conseils de vigilance que vous pourrez trouver ailleurs.↩︎\nAlors oui, c’est vrai, s3 se distingue d’un système de fichiers classiques comme on peut le lire dans certains posts énervés sur la question (par exemple sur Reddit). Mais du point de vue de l’utilisateur Python plutôt que de l’architecte cloud, on va avoir assez peu de différence avec un système de fichier local. C’est pour le mieux, cela réduit la difficulté à rentrer dans cette technologie.↩︎\nLorsqu’on développe du code qui finalement ne s’avère plus nécessaire, on a souvent un cas de conscience à le supprimer et on préfère le mettre de côté. Au final, ce syndrôme de Diogène est mauvais pour la pérennité du projet : on se retrouve à devoir maintenir une base de code qui n’est, en pratique, pas utilisée. Ce n’est pas un problème de supprimer un code ; si finalement celui-ci s’avère utile, on peut le retrouver grâce à l’historique Git et les outils de recherche sur Github. Le package vulture est très pratique pour diagnostiquer les morceaux de code inutiles dans un projet.↩︎\nLe fichier __init__.py indique à Python que le dossier est un package. Il permet de proposer certaines configurations lors de l’import du package. Il permet également de contrôler les objets exportés (c’est-à-dire mis à disposition de l’utilisateur) par le package par rapport aux objets internes au package. En le laissant vide, nous allons utiliser ce fichier pour importer l’ensemble des fonctions de nos sous-modules. Ce n’est pas la meilleure pratique mais un contrôle plus fin des objets exportés demanderait un investissement qui ne vaut, ici, pas le coût.↩︎\nSi vous désirez aussi contrôler la version de Python, ce qui peut être important dans une perspective de portabilité, vous pouvez ajouter une option, par exemple -p python3.10. Néanmoins nous n’allons pas nous embarasser de cette nuance pour la suite car nous pourrons contrôler la version de Python plus finement par le biais de Docker.↩︎\nL’option -c passée après la commande python permet d’indiquer à Python que la commande ne se trouve pas dans un fichier mais sera dans le texte qu’on va directement lui fournir.↩︎\nL’option -c passée après la commande python permet d’indiquer à Python que la commande ne se trouve pas dans un fichier mais sera dans le texte qu’on va directement lui fournir.↩︎\nPour comparer les deux listes, vous pouvez utiliser la fonctionnalité de split du terminal sur VSCode pour comparer les outputs de conda env export en les mettant en face à face.↩︎\nL’option -c passée après la commande python permet d’indiquer à Python que la commande ne se trouve pas dans un fichier mais sera dans le texte qu’on va directement lui fournir.↩︎\nIl est tout à fait normal de ne pas parvenir à créer une action fonctionnelle du premier coup. N’hésitez pas à pusher votre code après chaque question pour vérifier que vous parvenez bien à réaliser chaque étape. Sinon vous risquez de devoir corriger bout par bout un fichier plus conséquent.↩︎\nIl existe une approche alternative pour faire des tests réguliers: les hooks Git. Il s’agit de règles qui doivent être satisfaites pour que le fichier puisse être committé. Cela assure que chaque commit remplisse des critères de qualité afin d’éviter le problème de la procrastination.\nLa documentation de pylint offre des explications supplémentaires. Ici, nous allons adopter une approche moins ambitieuse en demandant à notre action de faire ce travail d’évaluation de la qualité de notre code↩︎\nVous n’êtes pas obligés pour l’évaluation de mettre en oeuvre les jalons de plusieurs parcours. Néanmoins, vous découvrirez que chaque nouveau pas en avant est moins coûteux que le précédent si vous avez mis en oeuvre les réflexes des bonnes pratiques.↩︎\nPuisque vous êtes connectés à un serveur distant, le localhost de votre VSCode n’est pas celui de votre ordinateur. Les applications locales lancées par VSCode, par exemple l’API, ne sont pas locales pour vous. Il faut donc trouver une manière d’y accéder à distance. Le SSPCloud propose automatiquement une redirection du localhost du conteneur sur lequel tourne votre VSCode vers un URL pérenne, à condition d’avoir bien défini le port en question. C’est pour cette raison que vous avez dû indiquer les arguments --host \"0.0.0.0\" et --port 5000 pour pouvoir exposer, temporairement, à internet votre application.↩︎\nPar conséquent, MLFLow bénéficie de l’injection automatique des tokens pour pouvoir lire/écrire sur S3. Ces jetons ont la même durée avant expiration que ceux de vos services interactifs VSCode. Il faut donc, par défaut, supprimer et rouvrir un service MLFLow régulièrement. La manière d’éviter cela est de créer des service account sur https://minio-console.lab.sspcloud.fr/ et de les renseigner sur la page.↩︎"
  },
  {
    "objectID": "chapters/code-quality.html",
    "href": "chapters/code-quality.html",
    "title": "Qualité du code",
    "section": "",
    "text": "Dérouler les slides ci-dessous ou cliquer ici pour afficher les slides en plein écran.\nCe chapitre constitue une introduction à la question de la qualité du code, premier niveau dans l’échelle des bonnes pratiques. Celui-ci présente les enjeux de la qualité du code, les principes généraux pour améliorer celui-ci et quelques outils ou gestes faciles à mettre en œuvre pour améliorer la qualité du code. Ceux-ci sont approfondis dans l’application fil rouge."
  },
  {
    "objectID": "chapters/code-quality.html#lenjeu-dun-code-lisible-et-maintenable",
    "href": "chapters/code-quality.html#lenjeu-dun-code-lisible-et-maintenable",
    "title": "Qualité du code",
    "section": "L’enjeu d’un code lisible et maintenable",
    "text": "L’enjeu d’un code lisible et maintenable\n\n“The code is read much more often than it is written.”\nGuido Van Rossum1\n\nLorsqu’on s’initie à la pratique de la data science, il est assez naturel de voir le code d’une manière très fonctionnelle : je veux réaliser une tâche donnée — par exemple un algorithme de classification — et je vais donc assembler dans un notebook des bouts de code, souvent trouvés sur internet, jusqu’à obtenir un projet qui réalise la tâche voulue. La structure du projet importe assez peu, tant qu’elle permet d’importer correctement les données nécessaires à la tâche en question.\nSi cette approche flexible et minimaliste fonctionne très bien lors de la phase d’apprentissage, il est malgré tout indispensable de s’en détacher progressivement à mesure que l’on progresse et que l’on est amené à réaliser des projets plus professionnels ou bien à intégrer des projets collaboratifs. Autrement, on risque de produire un code complexe à reprendre et à faire évoluer, ce qui pourrait conduire inévitablement à son abandon.\nEn particulier, il est important de proposer, parmi les multiples manières de résoudre un problème informatique, une solution qui soit intelligible par d’autres personnes parlant le même langage. Le code est en effet lu bien plus souvent qu’il n’est écrit, c’est donc avant tout un outil de communication. De même, la maintenance d’un code demande généralement beaucoup plus de moyens que sa phase de développement initial. Il est donc important de penser en amont la qualité de son code et la structure de son projet de sorte à le rendre maintenable dans le temps.\nAfin de faciliter la communication et réduire la douleur d’avoir à faire évoluer un code obscur, des tentatives plus ou moins institutionnalisées de définir des conventions ont émergé. Ces conventions dépendent naturellement du langage utilisé, mais les principes sous-jacents s’appliquent de manière universelle à tout projet basé sur du code."
  },
  {
    "objectID": "chapters/code-quality.html#de-limportance-de-suivre-les-conventions",
    "href": "chapters/code-quality.html#de-limportance-de-suivre-les-conventions",
    "title": "Qualité du code",
    "section": "De l’importance de suivre les conventions",
    "text": "De l’importance de suivre les conventions\nPython est un langage très lisible. Avec un peu d’effort sur le nom des objets, sur la gestion des dépendances et sur la structure du programme, on peut très bien comprendre un script sans avoir besoin de l’exécuter. C’est l’une des principales forces du langage Python qui permet ainsi une acquisition rapide des bases et facilite l’appropriation d’un script.\nLa communauté Python a abouti à un certain nombre de normes, dites PEP (Python Enhancement Proposal), qui constituent un standard dans l’écosystème Python. Les deux normes les plus connues sont :\n\nla norme PEP8 qui définit un certain nombre de conventions relatives au code ;\nla norme PEP257 consacrée à la documentation (docstrings).\n\nCes conventions vont au-delà de la syntaxe. Un certain nombre de standards d’organisation d’un projet ont émergé, qui seront abordées dans le prochain chapitre.\n\n\n\n\n\n\nComparaison avec \n\n\n\n\n\nDans l’univers , la formalisation a été moins organisée. Ce langage est plus permissif que Python sur certains aspects2. Néanmoins, des standards ont émergé récemment, à travers un certain nombre de style guides dont les plus connus sont le tidyverse style guide et le google style guide, MLR style guide…\nPour aller plus loin sur :\n\nLa formation Insee aux bonnes pratiques avec Git et  dont le parcours est très proche de celui de ce cours ;\nDes éléments complémentaires dans la documentation collaborative utilitR ;\nCe post qui pointe vers un certain nombre de ressources sur le sujet.\n\n\n\n\nCes conventions sont arbitraires, dans une certaine mesure. Il est tout à fait possible de trouver certaines conventions moins esthétiques que d’autres.\nCes conventions ne sont pas non plus immuables : les langages et leurs usages évoluent, ce qui nécessite de mettre à jour les conventions. Cependant, adopter dans la mesure du possible certains des réflexes préconisés par ces conventions devrait améliorer la capacité à être compris par la communauté, augmenter les chances de bénéficier d’apport de celle-ci pour adapter le code, mais aussi réduire la difficulté à faire évoluer un code.\nIl existe beaucoup de philosophies différentes sur le style de codage et, en fait, le plus important est la cohérence : si on choisit une convention, par exemple snake case (toto_a_la_plage) plutôt que camel case (totoALaPlage), le mieux est de s’y tenir."
  },
  {
    "objectID": "chapters/code-quality.html#un-bon-ide-un-premier-pas-vers-la-qualité",
    "href": "chapters/code-quality.html#un-bon-ide-un-premier-pas-vers-la-qualité",
    "title": "Qualité du code",
    "section": "Un bon IDE, un premier pas vers la qualité",
    "text": "Un bon IDE, un premier pas vers la qualité\nSans les outils automatisés de mise en forme du code, l’adoption des bonnes pratiques serait coûteuse en temps et donc difficile à mettre en œuvre au quotidien. Ces outils, que ce soit par le biais de diagnostics ou de mise aux normes automatisée du code rendent de précieux services. Adopter les standards minimaux de qualité est plus ou moins instantané et économise un temps précieux dans la vie d’un projet de data science. C’est un préalable indispensable à la mise en production, sur laquelle nous reviendrons ultérieurement.\nLe premier pas vers les bonnes pratiques est d’adopter un environnement de développement adapté. VSCode est un très bon environnement comme nous le découvrirons dans la partie pratique. Il propose tous les outils d’autocomplétion et de diagnostics usuels (contrairement à Jupyter) et propose une grande gamme d’extensions pour enrichir les fonctionnalités de l’IDE de manière contributive :\n\n\n\nExemple de diagnostics et d’actions proposés par VSCode\n\n\nNéanmoins, les outils de détection de code au niveau des IDE ne suffisent pas. En effet, ils nécessitent une composante manuelle qui peut être chronophage et ainsi pénible à appliquer régulièrement. Heureusement, il existe des outils automatisés de diagnostics et de mise en forme.\n\nLes outils automatisés pour le diagnostic et la mise en forme du code\nPython étant l’outil de travail principal de milliers de data-scientists, un certain nombre d’outils ont vu le jour pour réduire le temps nécessaire pour créer un projet ou disposer d’un code fonctionnel. Ces outils permettent un gros gain de productivité, réduisent le temps passé à effectuer des tâches rébarbatives et améliorent la qualité d’un projet en offrant des diagnostics, voire des correctifs à des codes perfectibles.\nLes deux principaux types d’outils sont les suivants :\n\nLinter : programme qui vérifie que le code est formellement conforme à un certain guidestyle\n\nsignale des problèmes formels, sans corriger\n\nFormatter : programme qui reformate un code pour le rendre conforme à un certain guidestyle\n\nmodifie directement le code\n\n\n\n\n\n\n\n\nExemples\n\n\n\n\n\n\nExemples d’erreurs repérées par un linter :\n\nlignes de code trop longues ou mal indentées, parenthèses non équilibrées, noms de fonctions mal construits…\n\nExemples d’erreurs non repérées par un linter :\n\nfonctions mal utilisées, arguments mal spécifiés, structure du code incohérente, code insuffisamment documenté…\n\n\n\n\n\n\n\nLes linters pour comprendre les mauvaises pratiques appliquées\nLes linters sont des outils qui permettent d’évaluer la qualité du code et son risque de provoquer une erreur (explicite ou silencieuse).\nVoici quelques exemples de problèmes que peuvent rencontrer les linters:\n\nles variables sont utilisées mais n’existent pas (erreur)\nles variables inutilisées (inutiles)\nla mauvaise organisation du code (risque d’erreur)\nle non-respect des bonnes pratiques d’écriture de code\nles erreurs de syntaxe (par exemple les coquilles)\n\nLa plupart des logiciels de développement embarquent des fonctionnalités de diagnostic (voire de suggestion de correctif). Il faut parfois les paramétrer dans les options (ils sont désactivés pour ne pas effrayer l’utilisateur avec des croix rouges partout). Néanmoins, si on n’a pas appliqué les correctifs au fil de l’eau la masse des modifications à mettre en œuvre peut être effrayante.\nEn Python, les deux principaux linters sont PyLint et Flake8. Dans les exercices, nous proposons d’utiliser PyLint qui est pratique et pédagogique. Celui-ci s’utilise en ligne de commande, de la manière suivante :\n$ pip install pylint\n$ pylint monscript.py #pour un fichier\n$ pylint src #pour tous les fichiers du dossier src\n\n\n\n\n\n\nTip\n\n\n\n\n\nL’un des intérêts d’utiliser PyLint est qu’on obtient une note, ce qui est assez instructif. Nous l’utiliserons dans l’application fil rouge pour comprendre la manière dont chaque étape améliore la qualité du code.\nIl est possible de mettre en œuvre des pre commit hooks qui empêchent un commit n’ayant pas une note minimale.\n\n\n\n\n\nLes formatters pour nettoyer en masse ses scripts\nLe formatter modifie directement le code. On peut faire un parallèle avec le correcteur orthographique. Cet outil peut donc induire un changement substantiel du script afin de le rendre plus lisible.\nLe formater le plus utilisé\nest Black. Récemment, Ruff, qui est à la fois un linter et un formatter a émergé pour intégrer à Black des diagnostics supplémentaires, issus d’autres packages.\n\n\n\n\n\n\nNote\n\n\n\n\n\nPour signaler sur Github la qualité d’un projet utilisant Black, il est possible d’ajouter un badge dans le README:\n\n\n\n\nIl est assez instructif de regarder le code modifié par les outils pour comprendre et corriger certains problèmes dans sa manière de développer. Par exemple, à la lecture de ce chapitre, vous allez certainement retenir en particulier certaines règles qui tranchent avec vos pratiques actuelles. Vous pouvez alors essayer d’appliquer ces nouvelles règles pendant un certain temps puis, lorsque celles-ci seront devenues naturelles, revenir à ce guide et appliquer le processus à nouveau. En procédant ainsi de manière incrémentale, vous améliorerez progressivement la qualité de vos projets sans avoir l’impression de passer trop de temps sur des micro-détails, au détriment des objectifs globaux du projet."
  },
  {
    "objectID": "chapters/code-quality.html#le-partage-une-démarche-favorable-à-la-qualité-du-code",
    "href": "chapters/code-quality.html#le-partage-une-démarche-favorable-à-la-qualité-du-code",
    "title": "Qualité du code",
    "section": "Le partage, une démarche favorable à la qualité du code",
    "text": "Le partage, une démarche favorable à la qualité du code\n\nL’opensource comme moyen pour améliorer la qualité\nEn ouvrant son code sur des forges opensource (cf. chapitre Git), il est possible de recevoir des suggestions voire, des contributions de ré-utilisateurs du code. Cependant, les vertus de l’ouverture vont au-delà. En effet, l’ouverture se traduit généralement par des codes de meilleure qualité, mieux documentés pour pouvoir être réutilisés ou ayant simplement bénéficié d’une attention accrue sur la qualité pour ne pas paraître ridicule. Même en l’absence de retour de (ré)utilisateurs du code, le partage de code améliore la qualité des projets.\n\n\nLa revue de code\nLa revue de code s’inspire de la méthode du peer reviewing du monde académique pour améliorer la qualité du code Python. Dans une revue de code, le code écrit par une personne est relu et évalué par un ou plusieurs autres développeurs afin d’identifier les erreurs et les améliorations possibles. Cette pratique permet de détecter les erreurs avant qu’elles ne deviennent des problèmes majeurs, d’assurer une cohérence dans le code, de garantir le respect des bonnes pratiques mais aussi d’améliorer la qualité du code en identifiant les parties du code qui peuvent être simplifiées, optimisées ou refactorisées pour en améliorer la lisibilité et la maintenabilité.\nUn autre avantage de cette approche est qu’elle permet le partage de connaissances entre des personnes expérimentées et des personnes plus débutantes ce qui permet à ces dernières de monter en compétence. Github  et Gitlab  proposent des fonctionnalités très pratiques pour la revue de code : discussions, suggestions de modifications…"
  },
  {
    "objectID": "chapters/code-quality.html#objectifs",
    "href": "chapters/code-quality.html#objectifs",
    "title": "Qualité du code",
    "section": "Objectifs",
    "text": "Objectifs\n\nFavoriser la concision pour réduire le risque d’erreur et rendre la démarche plus claire ;\nAméliorer la lisibilité ce qui est indispensable pour rendre la démarche intelligible par d’autres mais aussi pour soi, lorsqu’on reprend un code écrit il y a quelques temps ;\nLimiter la redondance ce qui permet de simplifier un code (paradigme du don’t repeat yourself) ;\nLimite les risques d’erreurs liées aux copier/coller"
  },
  {
    "objectID": "chapters/code-quality.html#avantages-des-fonctions",
    "href": "chapters/code-quality.html#avantages-des-fonctions",
    "title": "Qualité du code",
    "section": "Avantages des fonctions",
    "text": "Avantages des fonctions\nLes fonctions ont de nombreux avantages par rapport à de longs scripts :\n\nLimite les risques d’erreurs liés aux copier/coller\nRend le code plus lisible et plus compact\nUn seul endroit du code à modifier lorsqu’on souhaite modifier le traitement\nFacilite la réutilisation et la documentation du code !\n\n\n\n\n\n\n\nRègle d’or\n\n\n\nIl faut utiliser une fonction dès qu’on utilise une même portion de code plus de deux fois (don’t repeat yourself (DRY))\n\n\n\n\n\n\n\n\nRègles pour écrire des fonctions pertinentes\n\n\n\n\nUne tâche = une fonction\nUne tâche complexe = un enchaînement de fonctions réalisant chacune une tâche simple\nLimiter l’utilisation de variables globales\n\n\n\nEn ce qui concerne l’installation des packages, nous allons voir dans les parties Structure de code et Portabilité qu’il ne faut pas gérer ceci dans le script mais dans un élément à part, relatif à l’environnement d’exécution du projet3. De même, ces parties présenteront des conseils pratiques sur la gestion des jetons d’accès à des API ou bases de données qui ne doivent jamais être inscrites dans un code.\nLes scripts trop longs ne sont pas une bonne pratique. Il est préférable de diviser l’ensemble des scripts exécutant une chaîne de production en “monades”, c’est-à-dire en petites unités cohérentes. Les fonctions sont un outil privilégié pour cela (en plus de limiter la redondance, et d’être un outil privilégié pour documenter un code).\n\n\n\n\n\n\nExemple: privilégier les list comprehensions\n\n\n\n\n\nEn Python, il est recommandé de privilégier les list comprehensions à l’utilisation de boucles for indentées. Ces dernières sont en général moins efficaces et surtout impliquent un nombre important de ligne de codes là où les compréhensions de listes sont beaucoup plus concises\nliste_nombres = range(10)\n\n# très mauvais\ny = []\nfor x in liste_nombres:\n    if x % 2 == 0:\n        y.append(x*x)\n\n# mieux\ny = [x*x for x in liste_nombres if x % 2 == 0]\n\n\n\n\nConseils pour la programmation\nDans le monde de la programmation en Python, il existe deux paradigmes différents :\n\nLa programmation fonctionnelle est une approche qui construit un code en enchaînant des fonctions, c’est-à-dire des opérations plus ou moins standardisées ;\nLa programmation orientée objet (POO) consiste à construire son code en définissant des objets d’une certaine classe ayant des attributs (les caractéristiques intrinsèques de l’objet) et sur lequel on effectue des opérations ad hoc par le biais de méthodes qui encapsulent des opérations propres à chaque classe.\n\n\n\nExemple de comparaison des deux paradigmes\n\nMerci ChatGPT pour l’exemple :\n\nclass AverageCalculator:\n    def __init__(self, numbers):\n        self.numbers = numbers\n\n    def calculate_average(self):\n        return sum(self.numbers) / len(self.numbers)\n\n# Utilisation\ncalculator = AverageCalculator([1, 2, 3, 4, 5])\nprint(\"Moyenne (POO):\", calculator.calculate_average())\n\ndef calculate_average(numbers):\n    return sum(numbers) / len(numbers)\n\n# Utilisation\nnumbers = [1, 2, 3, 4, 5]\nprint(\"Moyenne (PF):\", calculate_average(numbers))\n\nMoyenne (POO): 3.0\nMoyenne (PF): 3.0\n\n\n\nLa programmation fonctionnelle est plus intuitive que la POO et permet souvent de développer du code plus rapidement. La POO est une approche plus formaliste. Celle-ci est intéressante lorsqu’une fonction doit s’adapter au type d’objet en entrée (par exemple aller chercher des poids différents selon le type de modèle Pytorch). Cela évite les codes spaghetti 🍝 inutilement complexes qui sont impossibles à débugger.\nNéanmoins, il convient d’être pragmatique. La programmation orientée objet peut être plus complexe à mettre en œuvre que la programmation fonctionnelle. Dans de nombreuses situations, cette dernière, si elle est bien faite, suffit largement. Il est utile lorsqu’on développe dans le cadre d’un projet important d’adopter une approche dite de programmation défensive. Il s’agit d’un principe de précaution dans le paradigme de la programmation fonctionnelle qui vise à limiter les situations imprévues en étant capable de gérer, par exemple, un argument d’une fonction inattendu ou un objet à la structure différente de celle pour lequel le code a été pensé.\n\n\n\n\n\n\nLe code spaghetti\n\n\n\nLe code spaghetti est un style d’écriture qui favorise l’apparition du syndrome du plat de spaghettis : un code impossible à démêler parce qu’il fait un usage excessif de conditions, d’exceptions en tous sens, de gestion des événements complexes. Il devient quasi impossible de savoir quelles ont été les conditions à l’origine de telle ou telle erreur sans exécuter ligne à ligne (et celles-ci sont excessivement nombreuses du fait de mauvaises pratiques de programmation) le programme.\nEn fait, la programmation spaghetti qualifie tout ce qui ne permet pas de déterminer le qui, le quoi et le comment. Le code est donc plus long à mettre à jour car cela nécessite de remonter un à un le fil des renvois.\n\n\n\n\n\n\n\n\nUn exemple progressif pour comprendre\n\n\n\n\n\n💡 Supposons qu’on dispose d’une table de données qui utilise le code −99 pour représenter les valeurs manquantes. On désire remplacer l’ensemble des −99 par des NA.\nVoici un code Python qui permet de se placer dans ce cas qui, malheureusement, arrive fréquemment.\n# On fixe la racine pour être sûr de tous avoir le même dataset\nnp.random.seed(1234)\n\n# On créé un dataframe\na = np.random.randint(1, 10, size = (5,6))\ndf = np.insert(\n    a,\n    np.random.choice(len(a), size=6),\n    -99,\n)\ndf = pd.DataFrame(df.reshape((6,6)), columns=[chr(x) for x in range(97, 103)])\nUn premier jet de code pourrait prendre la forme suivante :\n# Dupliquer les données\ndf2 = df.copy()\n# Remplacer les -99 par des NA\ndf2.loc[df2['a'] == -99,'a'] = np.nan\ndf2.loc[df2['b'] == -99,'b'] = np.nan\ndf2.loc[df2['c'] == -99,'c'] = np.nan\ndf2.loc[df2['d'] == -99,'d'] = np.nan\ndf2.loc[df2['e'] == -98,'e'] = np.nan\ndf2.loc[df2['f'] == -99,'e'] = np.nan\nQuelles sont les choses qui vous dérangent dans le code ci-dessus ?\n\n\nIndice 💡 Regardez précisément le code et le DataFrame, notamment les colonnes e et g.\n\nIl y a deux erreurs, difficiles à détecter:\n\ndf2.loc[df2['e'] == -98,'e'] = np.nan: une erreur de copier-coller sur la valeur de l’erreur ;\ndf2.loc[df2['f'] == -99,'e'] = np.nan: une erreur de copier-coller sur les colonnes en question\n\n\nOn peut noter au moins deux trois :\n\nLe code est long et répétitif, ce qui nuit à sa lisibilité ;\nLe code est très dépendant de la structure des données (nom et nombre de colonnes) et doit être adapté dès que celle-ci évolue ;\nOn a introduit des erreurs humaines dans le code, difficiles à détecter.\n\nOn voit dans la première version de notre code qu’il y a une structure commune à toutes nos lignes de la forme .[. == -99] = np.nan. Cette structure va servir de base à notre fonction, en vue de généraliser le traitement que nous voulons faire.\ndef fix_missing(x: pd.Series):\n    x[x == -99] = np.nan\n    return x\n\ndf2 = df.copy()\ndf2['a'] = fix_missing(df['a'])\ndf2['b'] = fix_missing(df['b'])\ndf2['c'] = fix_missing(df['c'])\ndf2['d'] = fix_missing(df['d'])\ndf2['e'] = fix_missing(df['e'])\ndf2['f'] = fix_missing(df['f'])\nCette seconde version du code est meilleure que la première version, car on a réglé le problème d’erreur humaine (il n’est plus possible de taper -98 au lieu de -99).\n\n\nMais voyez-vous le problème qui persiste ?\n\nLe code reste long et répétitif, et n’élimine pas encore toute possibilité d’erreur, car il est toujours possible de se tromper dans le nom des variables.\n\nLa prochaine étape consiste à éliminer ce risque d’erreur en combinant deux fonctions (ce qu’on appelle la combinaison de fonctions).\nLa première fonction fix_missing() sert à régler le problème sur un vecteur. La seconde généralisera ce procédé à toutes les colonnes. Comme Pandas permet une approche vectorielle, il est fréquent de construire des fonctions sur des vecteurs et les appliquer ensuite à plusieurs colonnes.\ndef fix_missing(x: pd.Series):\n    x[x == -99] = np.nan\n    return x\n\ndf2 = df.copy()\ndf2 = df2.apply(fix_missing)\nCette troisième version du code a plusieurs avantages sur les deux autres versions :\n\nElle est plus concise et plus lisible ;\nSi on a un changement de code pour les valeurs manquantes, il suffit de le mettre à un seul endroit ;\nElle fonctionne quel que soit le nombre de colonnes et le nom des colonnes ;\nOn ne peut pas traiter une colonne différemment des autres par erreur.\n\nDe plus, le code est facilement généralisable.\nPar exemple, à partir de la même structure, écrire le code qui permet de ne traiter que les colonnes a,b et e ne demande pas beaucoup d’énergie.\ndf2 = df.copy()\ndf2[['a','b','e']] = df2[['a','b','e']].apply(fix_missing)\n\n\n\nUn certain nombre de conseils sont présents dans le Hitchhiker’s Guide to Python qui vise à faire connaître les préceptes du “Zen of Python” (PEP 20). Ce post de blog illustre quelques uns de ces principes avec des exemples.\n\n\n\n\n\n\nLe Zen de Python\n\n\n\n\n\nLe “Zen de Python” est une collection de principes pour la programmation en Python, écrite par Tim Peters en 2004 sous la forme d’aphorismes. Ceux-ci mettent en lumière la philosophie de conception du langage Python.\nVous pouvez retrouver ces conseils dans Python en tapant le code suivant:\n\nimport this\nThe Zen of Python, by Tim Peters\n\nBeautiful is better than ugly.\nExplicit is better than implicit.\nSimple is better than complex.\nComplex is better than complicated.\nFlat is better than nested.\nSparse is better than dense.\nReadability counts.\nSpecial cases aren't special enough to break the rules.\nAlthough practicality beats purity.\nErrors should never pass silently.\nUnless explicitly silenced.\nIn the face of ambiguity, refuse the temptation to guess.\nThere should be one-- and preferably only one --obvious way to do it.\nAlthough that way may not be obvious at first unless you're Dutch.\nNow is better than never.\nAlthough never is often better than *right* now.\nIf the implementation is hard to explain, it's a bad idea.\nIf the implementation is easy to explain, it may be a good idea.\nNamespaces are one honking great idea -- let's do more of those!"
  },
  {
    "objectID": "chapters/code-quality.html#footnotes",
    "href": "chapters/code-quality.html#footnotes",
    "title": "Qualité du code",
    "section": "Footnotes",
    "text": "Footnotes\n\n\nGuido Van Rossum est le créateur de , c’est donc quelqu’un qu’il est pertinent d’écouter.↩︎\nPar exemple, en , il est possible d’utiliser &lt;- ou = pour l’assignation, on ne recontre pas d’erreur en cas de mauvaise indentation…↩︎\nNous présenterons les deux approches principales en Python, leurs points commun et les points par lesquels ils diffèrent : les environnements virtuels (gérés par un fichier requirements.txt) et les environnements conda (gérés par un fichier environment.yml)↩︎"
  },
  {
    "objectID": "chapters/evaluation.html",
    "href": "chapters/evaluation.html",
    "title": "Evaluation",
    "section": "",
    "text": "L’objectif général de l’évaluation de ce cours est de mettre en pratique les notions étudiées (bonnes pratiques de développement et mise en production) de manière appliquée et réaliste, i.e. à travers un projet basé sur une problématique “métier” et des données réelles. Pour cela, l’évaluation sera en deux parties :\n\nPar groupe de 3 : un projet à choisir parmi les 3 parcours (MLOps, app interactive / dashboard, publication reproductible + site web). Idéalement, on choisira un projet réel, effectué par exemple dans le cadre d’un cours précédent et qui génère un output propice à une mise en production.\nSeul : effectuer une revue de code d’un autre projet. Compétence essentielle et souvent attendue d’un data scientist, la revue de code sera l’occasion de bien intégrer les bonnes pratiques de développement (cf. checklist ci-dessous) et de faire un retour bienveillant sur un autre projet que celui de son groupe.\n\n\n\n\n\n\n\nAvertissement\n\n\n\nCe projet doit mobiliser des données publiquement accessibles. La récupération et structuration de ces données peut faire partie des enjeux du projet mais celles-ci ne doivent pas provenir d’un projet antérieur de votre scolarité pour lequel le partage de données n’est pas possible."
  },
  {
    "objectID": "chapters/evaluation.html#modalités",
    "href": "chapters/evaluation.html#modalités",
    "title": "Evaluation",
    "section": "",
    "text": "L’objectif général de l’évaluation de ce cours est de mettre en pratique les notions étudiées (bonnes pratiques de développement et mise en production) de manière appliquée et réaliste, i.e. à travers un projet basé sur une problématique “métier” et des données réelles. Pour cela, l’évaluation sera en deux parties :\n\nPar groupe de 3 : un projet à choisir parmi les 3 parcours (MLOps, app interactive / dashboard, publication reproductible + site web). Idéalement, on choisira un projet réel, effectué par exemple dans le cadre d’un cours précédent et qui génère un output propice à une mise en production.\nSeul : effectuer une revue de code d’un autre projet. Compétence essentielle et souvent attendue d’un data scientist, la revue de code sera l’occasion de bien intégrer les bonnes pratiques de développement (cf. checklist ci-dessous) et de faire un retour bienveillant sur un autre projet que celui de son groupe.\n\n\n\n\n\n\n\nAvertissement\n\n\n\nCe projet doit mobiliser des données publiquement accessibles. La récupération et structuration de ces données peut faire partie des enjeux du projet mais celles-ci ne doivent pas provenir d’un projet antérieur de votre scolarité pour lequel le partage de données n’est pas possible."
  },
  {
    "objectID": "chapters/evaluation.html#checklist-des-bonnes-pratiques-de-développement",
    "href": "chapters/evaluation.html#checklist-des-bonnes-pratiques-de-développement",
    "title": "Evaluation",
    "section": "Checklist des bonnes pratiques de développement",
    "text": "Checklist des bonnes pratiques de développement\nLes bonnes pratiques de développement ci-dessous sont les indispensables de ce cours. Elles doivent être à la fois appliquées dans les projets de groupe, et à la base de la revue de code individuelle.\n\nUtilisation de Git\n\nPrésence d’un fichier .gitignore adapté au langage et avec des règles additionnelles pour respecter les bonnes pratiques de versioning\nTravail collaboratif : utilisation des branches et des pull requests\n\nPrésence d’un fichier README présentant le projet : contexte, objectif, comment l’utiliser ?\nPrésence d’un fichier LICENSE déclarant la licence (open-source) d’exploitation du projet.\nVersioning des packages : présence d’un fichier requirements.txt ou d’un fichier d’environnement environment.yml pour conda\nQualité du code\n\nRespect des standards communautaires : utiliser un linter et/ou un formatter\nModularité : un script principal qui appelle des modules\n\nStructure des projets\n\nRespect des standards communautaires (cookiecutter)\nModularité du projet selon le modèle évoqué dans le cours:\n\nCode sur GitHub\nDonnées sur S3\nFichiers de configuration (secrets, etc.) à part\n\n\n\n\n\n\nProposition de modularité du projet illustrée pour un projet mixte MLOps et dashboard"
  },
  {
    "objectID": "chapters/evaluation.html#projets",
    "href": "chapters/evaluation.html#projets",
    "title": "Evaluation",
    "section": "Projets",
    "text": "Projets\nVoici trois “parcours” possibles afin de mettre en application les concepts et techniques du cours dans le cadre de projets appliqués. Des projets qui sortiraient de ces parcours-types sont tout à fait possibles et appréciés, il suffit d’en discuter avec les auteurs du cours.\n\nParcours MLOps\n\n\n\n\n\n\nObjectif\n\n\n\nA partir d’un projet existant ou d’un projet type contest Kaggle, développer un modèle de ML répondant à une problématique métier, puis la déployer sur une infrastructure de production conformément aux principes du MLOps.\n\n\nÉtapes :\n\nRespecter la checklist des bonnes pratiques de développement ;\nDévelopper un modèle de ML qui répond à un besoin métier ;\nEntraîner le modèle via validation croisée, avec une procédure de fine-tuning des hyperparamètres ;\nFormaliser le processus de fine-tuning de manière reproductible via MLFlow ;\nConstruire une API avec Fastapi pour exposer le meilleur modèle ;\nCréer une image Docker pour mettre à disposition l’API ;\nDéployer l’API sur le SSP Cloud ;\nIndustrialiser le déploiement en mode GitOps avec ArgoCD\nGérer le monitoring de l’application : logs, dashboard de suivi des performances, etc.\n\n\n\nParcours dashboard / application interactive\n\n\n\n\n\n\nObjectif\n\n\n\nA partir d’un projet existant ou d’un projet que vous construirez, développer une application interactive ou un dashboard statique répondant à une problématique métier, puis déployer sur une infrastructure de production.\n\n\nÉtapes :\n\nRespecter la checklist des bonnes pratiques de développement\nDévelopper une application interactive Streamlit ou un dashboard statique avec Quarto répondant à une problématique métier\nCréer une image Docker permettant d’exposer l’application en local\nDéployer l’application sur le SSP Cloud (application interactive) ou sur Github Pages (site statique)\nCustomiser le thème, le CSS etc. pour mettre en valeur au maximum les résultats de la publication et les messages principaux\nAutomatiser l’ingestion des données en entrée pour que le site web se mette à jour régulièrement\nIndustrialiser le déploiement en mode GitOps avec ArgoCD\nGérer le monitoring de l’application : logs, métriques de suivi des performances, etc.\n\n\n\nParcours big data\n\n\n\n\n\n\nObjectif\n\n\n\nL’objectif de ce parcours est de construire un pipeline type ETL (Extract/Transform/Load) prenant en entrée une source de données massives afin de les mettre à disposition dans un système de base de données optimisé pour l’analyse. Ce parcours est intéressant pour les étudiant.e.s souhaitant un projet avec une coloration data engineering plus marquée.\n\n\nÉtapes :\n\nRespecter la checklist des bonnes pratiques de développement\nExtract : identifier une ou plusieurs sources de données massives ouvertes (idées : 1, 2), et réaliser l’ingestion de ces données sur le service de stockage S3 du SSP Cloud (documentation)\nTransform : en utilisant une technologie big data adopté à la volumétrie des données en entrée (données massives : Spark, données volumineuses : Arrow / DuckDB, toutes disponibles sur le SSP Cloud), effectuer des opérations sur les données brutes (filtrages, agrégations, etc.) afin d’en extraire des sous-ensembles de données pertinents pour répondre à une problématique métier\nLoad : charger les tables construites à l’étape précédente dans un système de base de données relationnelle (ex : PostgreSQL, disponible dans le catalogue du SSP Cloud)\nIntégrer l’ensemble des étapes dans un pipeline de données avec un orchestrateur de traitements (ex : Argo Workflows, disponible dans le catalogue du SSP Cloud) afin d’automatiser leur exécution\nConstruire un dashboard minimaliste (par exemple, avec Superset, disponible dans le catalogue du SSP Cloud) afin de valoriser les données produites\n\n\n\nParcours publication reproductible\n\n\n\n\n\n\nObjectif\n\n\n\nA partir d’un projet existant ou d’un projet que vous construirez, rédiger un rapport reproductible à partir de données afin de répondre à une problématique métier, puis le mettre à disposition à travers un site web automatiquement généré et publié.\n\n\nÉtapes :\n\nRespecter la checklist des bonnes pratiques de développement\nRédiger un rapport reproductible avec Quarto qui fasse intervenir des données, du code, de la visualisation de données, du texte, etc.\nExposer le rapport sous la forme d’un site web via GitHub Actions\nCustomiser le thème, le CSS etc. pour mettre en valeur au maximum les résultats de la publication et les messages principaux\nAutomatiser l’ingestion des données en entrée pour que le site web se mette à jour régulièrement\nMettre en place des tests automatisés de vérification des standards de qualité du code (linter), de détection de fautes d’orthographes/de grammaire, etc.\nGénérer des slides au format quarto-revealjs afin de présenter les principaux résultats de la publication, et les exposer comme une page du site"
  },
  {
    "objectID": "chapters/evaluation.html#revue-de-code",
    "href": "chapters/evaluation.html#revue-de-code",
    "title": "Evaluation",
    "section": "Revue de code",
    "text": "Revue de code\nSur le projet d’un groupe différent du sien (attribué aléatoirement au cours du semestre) :\n\nouvrir une pull request de revue de code via un fork (cf. chapitre sur Git pour la procédure)\ndonner une appréciation générale de la conformité du projet à la checklist des bonnes pratiques de développement\nsuggérer des pistes d’amélioration du projet\n\nChaque groupe, ayant reçu des revues de code de son projet, pourra prendre en compte ces pistes d’améliorations dans la mesure du temps disponible, par le biais d’une autre pull request qui devra référencer celle de la revue de code. Cette dernière partie ne sera cependant pas strictement attendue, elle sera valorisée en bonus dans la notation finale."
  },
  {
    "objectID": "chapters/git.html",
    "href": "chapters/git.html",
    "title": "Versionner son code et travailler collaborativement avec Git",
    "section": "",
    "text": "Dérouler les slides ci-dessous ou cliquer ici pour afficher les slides en plein écran."
  },
  {
    "objectID": "chapters/git.html#pourquoi-faire",
    "href": "chapters/git.html#pourquoi-faire",
    "title": "Versionner son code et travailler collaborativement avec Git",
    "section": "Pourquoi faire ?",
    "text": "Pourquoi faire ?\nLe développement rapide de la data science au cours de ces dernières années s’est accompagnée d’une complexification substantielle des projets. Par ailleurs, les projets sont de plus en plus collaboratifs, que ce soit dans le cadre d’équipes dans un contexte professionnel ou bien pour des contributions à des projets open-source. Naturellement, ces évolutions doivent nous amener à modifier nos manières de travailler pour gérer cette complexité croissante et continuer à produire de la valeur à partir des projets de data science.\nPourtant, tout data scientist s’est parfois demandé :\n\nquelle était la bonne version d’un programme\nqui était l’auteur d’un bout de code en particulier\nsi un changement était important ou juste un essai\ncomment fusionner des programmes\netc.\n\nEt il n’est pas rare de perdre le fil des versions de son projet lorsque l’on garde trace de celles-ci de façon manuelle.\nExemple de contrôle de version fait “à la main”\n\nPourtant, il existe un outil informatique puissant afin de répondre à tous ces besoins : la gestion de version (version control system (VCS) en anglais). Ses avantages sont incontestables et permettent de facilement :\n\nenregistrer l’historique des modifications d’un ensemble de fichiers\nrevenir à des versions précédentes d’un ou plusieurs fichiers\nrechercher les modifications qui ont pu créer des erreurs\ntravailler simultanément sur un même fichier sans risque de perte\npartager ses modifications et récupérer celles des autres\nproposer des modifications, les discuter, sans pour autant modifier la dernière version existante\nidentifier les auteurs et la date des modifications\n\nEn outre, ces outils fonctionnent avec tous les langages informatiques car ils reposent sur la comparaison des lignes et des caractères des programmes, indépendamment du langage. En bref, c’est la bonne manière pour partager des codes et travailler à plusieurs sur un projet de data science. En réalité, il ne serait pas exagéré de dire que l’utilisation du contrôle de version est la bonne pratique la plus fondamentale de tout projet faisant intervenir du code, et qu’elle conditionne largement toutes les autres."
  },
  {
    "objectID": "chapters/git.html#pourquoi-git",
    "href": "chapters/git.html#pourquoi-git",
    "title": "Versionner son code et travailler collaborativement avec Git",
    "section": "Pourquoi Git  ?",
    "text": "Pourquoi Git  ?\nPlusieurs logiciels de contrôle de version existent sur le marché. En principe, le logiciel Git, développé initialement pour fournir une solution décentralisée et open-source dans le cadre du développement du noyau Linux, est devenu largement hégémonique. Aussi, toutes les application de ce cours s’effectueront à l’aide du logiciel Git."
  },
  {
    "objectID": "chapters/git.html#pourquoi-github",
    "href": "chapters/git.html#pourquoi-github",
    "title": "Versionner son code et travailler collaborativement avec Git",
    "section": "Pourquoi GitHub  ?",
    "text": "Pourquoi GitHub  ?\nTravailler de manière collaborative avec Git implique de synchroniser son répertoire local avec une copie distante, située sur un serveur hébergeant des projets Git. Ce serveur peut être un serveur interne à une organisation, ou bien être fourni par un hébergeur externe. Les deux alternatives les plus populaires en la matière sont GitHub et GitLab. Dans ce cours, nous utiliserons GitHub, qui est devenu au fil des années la référence pour l’hébergement des projets open-source. En pratique, les deux services sont relativement semblables, et tous les concepts présentés se retrouvent sous une forme similaire sur les deux plateformes."
  },
  {
    "objectID": "chapters/git.html#principes-et-commandes-usuelles",
    "href": "chapters/git.html#principes-et-commandes-usuelles",
    "title": "Versionner son code et travailler collaborativement avec Git",
    "section": "Principes et commandes usuelles",
    "text": "Principes et commandes usuelles\nLe graphique suivant illustre les principes fondamentaux de Git.\nGit tout-en-un (Source) \nLorsqu’on utilise Git, il est important de bien distinguer ce qui se passe en local (sur son poste, sur le serveur sur lequel on travaille…) de ce qui se passe en remote, i.e. en intéragissant avec un serveur distant. Comme le montre le graphique, l’essentiel du contrôle de version se passe en réalité en local.\nEn théorie, sur un projet individuel, il est même possible de réaliser l’ensemble du contrôle de version en mode hors-ligne. Pour cela, il suffit d’indiquer à Git le projet (dossier) que l’on souhaite versionner en utilisant la commande git init. Cette commande a pour effet de créer un dossier .git à la racine du projet, dans lequel Git va stocker tout l’historique du projet (commits, branches, etc.) et permettre de naviguer entre les versions. A cause du . qui préfixe son nom, ce dossier est généralement caché par défaut, ce qui n’est pas problématique dans la mesure où il n’y a jamais besoin de le parcourir ou de le modifier à la main en pratique. Retenez simplement que c’est la présence de ce dossier .git qui fait qu’un dossier est considéré comme un projet Git, et donc que vous pouvez utilisez les commandes usuelles de Git dans ce dossier à l’aide d’un terminal : - git status : affiche les modifications du projet par rapport à la version précédente ; - git add chemin_du_fichier : ajoute un fichier nouveau ou modifié à la zone de staging de Git en vue d’un commit ; - git add -A : ajoute tous les fichiers nouveaux ou modifiés à la zone de staging ; - git commit -m \"message de commit\" : crée un commit, i.e. une photographie des modifications (ajouts, modifications, suppressions) apportées au projet depuis la dernière version, et lui assigne un message décrivant ces changements. Les commits sont l’unité de base de l’historique du projet construit par Git.\nEn pratique, travailler uniquement en local n’est pas très intéressant. Pour pouvoir travailler de manière collaborative, on va vouloir synchroniser les différentes copies locales du projet à un répertoire centralisé, qui maintient de fait la “source de vérité” (single source of truth). Même sur un projet individuel, il fait sens de synchroniser son répertoire local à une copie distante pour assurer l’intégrité du code de son projet en cas de problème matériel.\nEn général, on va donc initialiser le projet dans l’autre sens : - créer un nouveau projet sur GitHub - générer un jeton d’accès (personal access token) - cloner le projet en local via la méthode HTTPS : git clone https://github.com/&lt;username&gt;/&lt;project_name&gt;.git\nLe projet cloné est un projet Git — il contient le dossier .git — synchronisé par défaut avec le répertoire distant. On peut le vérifier avec la commande remote de Git :\n\n\nterminal\n\n$ git remote -v\n\norigin  https://github.com/linogaliana/ensae-reproductibilite-website.git (fetch)\norigin  https://github.com/linogaliana/ensae-reproductibilite-website.git (push)\nLe projet local est bien lié au répertoire distant sur GitHub, auquel Git donne par défaut le nom origin. Ce lien permet d’utiliser les commandes de synchronisation usuelles : - git pull : récupérer les changements (fetch) sur le remote et les appliquer au projet local - git push : envoyer les changements locaux sur le remote"
  },
  {
    "objectID": "chapters/git.html#implémentations",
    "href": "chapters/git.html#implémentations",
    "title": "Versionner son code et travailler collaborativement avec Git",
    "section": "Implémentations",
    "text": "Implémentations\nGit est un logiciel, qui peut être téléchargé sur le site officiel pour différents systèmes d’exploitation. Il existe cependant différentes manières d’utiliser Git : - le client en ligne de commande : c’est l’implémentation standard, et donc la plus complète. C’est celle qu’on utilisera dans ce cours. Le client Git est installé par défaut sur les différents services du SSP Cloud (VSCode, RStudio, Jupyter, etc.) et peut donc être utilisé via n’importe quel terminal. La documentation du SSP Cloud détaille la procédure ; - des interfaces graphiques : elles facilitent la prise en main de Git via des guides visuels, mais ne permettent pas de réaliser toutes les opérations permises par Git - l’interface native de RStudio pour les utilisateurs de R : très complète et stable. La formation au travail collaboratif avec Git et RStudio présente son utilisation de manière détaillée ; - le plugin Jupyter-git pour les utilisateurs de Python : elle implémente les principales features de Git, mais s’avère assez instable à l’usage."
  },
  {
    "objectID": "chapters/git.html#bonnes-pratiques",
    "href": "chapters/git.html#bonnes-pratiques",
    "title": "Versionner son code et travailler collaborativement avec Git",
    "section": "Bonnes pratiques",
    "text": "Bonnes pratiques\nLe contrôle de version est une bonne pratique de développement en soi… mais son utilisation admet elle même des bonnes pratiques qui, lorsqu’elles sont appliquées, permettent d’en tirer le plus grand profit.\n\nQue versionne-t-on ?\n\nUniquement des fichiers texte\nA chaque commit, Git calcule les différences entre les versions successives du projet, afin de ne pas avoir à stocker une image complète de ce dernier à chaque fois. C’est ce qui permet aux projets Git de rester très légers par défaut, et donc aux différentes opérations impliquant le remote (clone, push, pull..) d’être très rapides.\nLa contrepartie de cette légèreté est une contrainte sur les types d’objets que l’on doit versionner. Les différences sont calculables uniquement sur des fichiers de type texte : codes source, fichiers texte, fichiers de configuration non-sensibles… Voici donc une liste non-exhaustive des extensions de fichier que l’on retrouve fréquemment dans un dépôt Git d’un projet R ou Python : .py, .R, .Rmd, .txt, .json, .xml, .yaml, .toml, et bien d’autres.\nEn revanche tous les fichiers binaires — pour faire simple, tous les fichiers qui ne peuvent pas être ouverts dans un éditeur de texte basique sans produire une suite inintelligible de caractères — n’ont généralement pas destination à se retrouver sur un dépôt Git. Du fait de leur formatage (binaire), Git ne peut pas calculer les différences entre versions pour ces fichiers et c’est donc le fichier entier qui est sauvegardé dans l’historique à chaque changement, ce qui peut très rapidement faire croître la taille du dépôt. Pour éviter de versionner ces fichiers par erreur, on va les ajouter au fichier .gitignore (cf. supra).\n\n\nPas de données\nComme expliqué en introduction, le fil rouge de ce cours sur les bonnes pratiques est l’importance de bien séparer code, données et environnement d’exécution afin de favoriser la reproductibilité des projets de data science. Ce principe doit s’appliquer également à l’usage du contrôle de version, et ce pour différentes raisons.\nA priori, inclure ces données dans un dépôt Git peut sembler une bonne idée en termes de reproductibilité. En machine learning par exemple, on est souvent amené à réaliser de nombreuses expérimentations à partir d’un même modèle appliqué à différentes transformations des données initiales, transformations que l’on pourrait versionner. En pratique, il est généralement préférable de versionner le code qui permet de générer ces transformations et donc les expérimentations associées, dans la mesure où le suivi des versions des datasets peut s’avérer rapidement complexe. Pour de plus gros projets, des alternatives spécifiques existent : c’est le champ du MLOps, domaine en constante expansion qui vise à rendre les pipelines de machine learning plus reproductibles.\nEnfin, la structure même de Git n’est techniquement pas faite pour le stockage de données. Si des petits datasets dans un format texte ne poseront pas de problème, des données volumineuses (à partir de plusieurs Mo) vont faire croître la taille du dépôt et donc ralentir significativement les opérations de synchronisation avec le remote.\n\n\nPas d’informations locales\nLà encore en vertu du principe de séparation données / code/ environnement, les données locales, i.e. spécifiques à l’environnement de travail sur lequel le code a été exécuté, n’ont pas vocation à être versionnées. Par exemple, des fichiers de configuration spécifiques à un poste de travail, des chemins d’accès spécifiques à un ordinateur donné, etc. Cela demande une plus grande rigueur lors de la construction du projet, mais garantit par là même une meilleure reproductiblité pour les futurs utilisateurs du projet.\n\n\nPas d’outputs\nLes outputs d’un projet (graphiques, publications, modèle entraîné…) n’ont pas vocation à être versionné, en vertu des différents arguments présentés ci-dessus : - il ne s’agit généralement pas de fichiers de type texte ; - le code source du projet doit dans tous les cas permettre des les regénérer à l’identique.\n\n\nUtiliser un .gitignore\nOn a listé précédemment un large éventail de fichiers qui n’ont, par nature, pas vocation à être versionné. Bien entendu, faire attention à ne pas ajouter ces différents fichiers au moment de chaque git add serait assez pénible. Git simplifie largement cette procédure en nous donnant la possibilité de remplir un fichier .gitignore, situé à la racine du projet, qui spécifie l’ensemble des fichiers et types de fichiers que l’on ne souhaite pas versionner dans le cadre du projet courant.\nDe manière générale, il y a pour chaque langage des fichiers que l’on ne souhaitera jamais versionner. Pour en tenir compte, une première bonne pratique est de choisir le .gitignore associé au langage du projet lors de la création du dépôt sur GitHub. Ce faisant, le projet est initialité avec un gitignore déjà existant et pré-rempli de chemins et de types de fichiers qui ne sont pas à versionner. Regardons un extrait du gitignore Python pour comprendre sa structure et son fonctionnement.\npip-log.txt\n__pycache__/\n*.log\nChaque ligne du gitignore spécifie un élément à ignorer du contrôle de version, élément qui peut être un ficher/dossier ou bien une règle concernant un ensemble de fichiers/dossiers. Sauf si spécifié explicitement, les chemins sont relatifs à la racine du projet. L’extrait du gitignore Python illustre les différentes possibilités :\n\nligne 1 : ignore le fichier pip-log.txt ;\nligne 2 : ignore le dossier __pycache__/ ;\nligne 3 : ignore tous les fichiers dont l’extension est .log.\n\nDe nombreuses autres possiblités existent, et sont détaillées par exemple dans la documentation de Git.\n\n\n\nMessages des commits\nLe commit est l’unité de temps de Git, et donc fondamentalement ce qui permet de remonter dans l’historique d’un projet. Afin de pouvoir bénéficier à plein de cet avantage de Git, il est capital d’accompagner ses commits de messages pertinents, en se plaçant dans la perspective que l’on peut être amené plusieurs semaines ou mois plus tard à vouloir retrouver du code dans l’historique de son projet. Les quelques secondes prises à chaque commit pour réfléchir à une description pertinente du bloc de modifications que l’on apporte au projet peuvent donc faire gagner un temps précieux à la longue.\nDe nombreuses conventions existent pour rédiger des messages de commit pertinents. Nous rappelons ici les plus importantes :\n\ncontenu : le message doit détailler le pourquoi plutôt que le comment des modifications. Par exemple, plutôt que “Ajoute le fichier test.py”, on préférera écrire “Ajout d’une série de tests unitaires” ;\nstyle : le message doit être à l’impératif et former une phrase (sans point à la fin) ;\nlongueur : le message du commit doit être court (&lt; 72 caractères). S’il n’est pas possible de trouver un message de cette taille qui résume le commit, c’est généralement un signe que le commit regroupe trop de changements (cf. point suivant). Le fait de devoir mettre des + ou des & / et dans un message de commit pour séparer les changements est également un bon indicateur d’un commit trop gros.\n\n\n\nFréquence des commits\nDe manière générale, il est conseillé de réaliser des commits réguliers lorsque l’on travaille sur un projet. Une règle simple que l’on peut par exemple appliquer est la suivante : dès lors qu’un ensemble de modifications forment un tout cohérent et peuvent être résumées par un message simple, il est temps d’en faire un commit. Cette approche a de nombreux avantages :\n\nsi l’on fait suivre chaque commit d’un push — ce qui est conseillé en pratique — on s’assure de disposer régulièreemnt d’une copie de ses travaux, ce qui limite le risque de perte ;\nil est plus facile de revenir en arrière en cas d’erreur si les commits portent sur des changements ciblés et cohérents ;\nle processus de review d’une pull request est facilité, car les différents blocs de modification sont plus clairement séparés ;\ndans une approche d’intégration continue — concept que l’on verra en détail dans le chapitre sur la mise en production — faire des commits et des PR régulièrement permet de déployer de manière continue les changements en production, et donc d’obtenir les feedbacks des utilisateurs et d’adapter plus rapidement si besoin."
  },
  {
    "objectID": "chapters/git.html#branches",
    "href": "chapters/git.html#branches",
    "title": "Versionner son code et travailler collaborativement avec Git",
    "section": "Branches",
    "text": "Branches\n\nConcept\nLa possibilité de créer des branches est l’une des fonctionnalités majeures de Git. La création d’une branche au sein d’un projet permet de diverger de la ligne principale de développement (généralement appelée master, terme tendant à disparaître au profit de celui de main) sans impacter cette ligne. Cela permet de séparer le nouveau développement et de faire cohabiter plusieurs versions, pouvant évoluer séparément et pouvant être facilement rassemblées si nécessaire.\nPour comprendre comment fonctionnent les branches, il nous faut revenir un peu plus en détail sur la manière dont Git stocke l’historique du projet. Comme nous l’avons vu, l’unité temporelle de Git est le commit, qui correspond à une photographie à un instant donné de l’état du projet (snapshot). Chaque commit est uniquement identifié par un hash, une longue suite de caractères. La commande git log, qui liste les différents commits d’un projet, permet d’afficher ce hash ainsi que diverses métadonnées (auteur, date, message) associées au commit.\n\n\nterminal\n\n$ git log\n\ncommit e58b004d3b68bdf28093fe6ad6036b5d13216e55 (HEAD -&gt; master, origin/master, origin/HEAD)\nAuthor: Lino Galiana &lt;xxx@xxx.fr&gt;\nDate:   Tue Mar 22 14:34:04 2022 +0100\n\n    ajoute code équivalent python\n\n...\nUne branche est simplement un pointeur vers un commit. Dans l’exemple précédent, on a imprimé les informations du dernier commit en date. La branche principale (master) pointe vers ce commit. Si l’on faisait un nouveau commit, le pointeur se décalerait et la branche master pointerait à présent sur le nouveau commit.\n\n\nBranches locales\nDans ce contexte, créer une nouvelle branche (en local) revient simplement à créer un nouveau pointeur vers un commit donné. Supposons que l’on crée une branche testing à partir du dernier commit.\n\n\nterminal\n\n1$ git branch testing\n2$ git branch\n\n\n1\n\nCrée une nouvelle branche\n\n2\n\nListe les branches existantes\n\n\n1* master\n2  testing\n\n1\n\nLa branche sur laquelle on se situe\n\n2\n\nLa nouvelle branche créée\n\n\nLa figure suivante illustre l’effet de cette création sur l’historique Git.\n\nDésormais, deux branches (master et testing) pointent vers le même commit. Si l’on effectue à présent des commits sur la branche testing, on va diverger de la branche principale, ce qui permet de développer une nouvelle fonctionnalité sans risquer d’impacter master.\nPour savoir sur quelle branche on se situe à instant donné — et donc sur quelle branche on va commiter — Git utilise un pointeur spécial, appelé HEAD, qui pointe vers la branche courante. On comprend à présent mieux la signification de HEAD -&gt; master dans l’output de la commande git log vu précédemment. Cet élément spécifie la situation locale actuelle et signifie : on se situe actuellement sur la branche master, qui pointe sur le commit e58b004. Pour changer de branche, i.e. déplacer le HEAD, on utilise la commande git checkout. Par exemple, pour passer de la branche master sur laquelle on est par défaut à la branche testing :\n\n\nterminal\n\n$ git checkout testing  # Changement de branche\n\nSwitched to branch 'testing'\nOn se situe désormais sur la branche testing, sur laquelle on peut laisser libre cours à sa créativité sans risquer d’impacer la branche principale du projet. Mais que se passe-t-il si, pendant que l’on développe sur testing, un autre membre du projet commit sur master ? On dit que les historiques ont divergé. La figure suivante illustre à quoi ressemble à présent l’historique du projet (et suppose que l’on est repassé sur master).\n\nCette divergence n’est pas problématique en soi : il est normal que les différentes parties et expérimentations d’un projet avancent à différents rythmes. La difficulté est de savoir comment réconcillier les différents changements si l’on décide que la branche testing doit être intégrée dans master. Deux situations peuvent survenir : - les modifications opérées en parallèle sur les deux branches ne concernent pas les mêmes fichiers ou les mêmes parties des fichiers. Dans ce cas, Git est capable de fusionner (merge) les changements automatiquement et tout se passe sans encombre ; - dans le cas contraire, survient un merge conflict : les branches ont divergé de telle sorte qu’il n’est pas possible pour Git de fusionner les changements automatiquement. Il faut alors résoudre les conflits manuellement.\nLa résolution des conflits est une étape souvent douloureuse lors de l’apprentissage de Git. Aussi, nous conseillons dans la mesure du possible de ne pas fusionner des branches manuellement en local avec Git — c’est d’ailleurs pour cette raison que nous n’avons pas détaillé les commandes pour le faire. Dans les sections suivantes, nous verrons comment une bonne organisation préalable du travail en équipe, combinée aux outils collaboratifs fournis par GitHub, permet de rendre le processus de fusion des branches largement indolore.\n\n\nBranches remote\nRappellons que toutes les opérations que nous avons effectuées sur les branches dans cette section se sont passés en local, le répertoire distant est resté totalement inchangé. Pour pouvoir collaborer sur une branche ou bien en faire une pull request (cf. supra), il faut pousser la branche sur le répertoire distant. La commande est simple : git push origin &lt;branche&gt;.\n\n\nterminal\n\n$ git push origin testing\n\nCounting objects: 24, done.\nDelta compression using up to 8 threads.\nCompressing objects: 100% (15/15), done.\nWriting objects: 100% (24/24), 1.91 KiB | 0 bytes/s, done.\nTotal 24 (delta 2), reused 0 (delta 0)\nTo https://github.com/linogaliana/ensae-reproductibilite-website\n * [new branch]      testing -&gt; testing"
  },
  {
    "objectID": "chapters/git.html#workflow-collaboratif",
    "href": "chapters/git.html#workflow-collaboratif",
    "title": "Versionner son code et travailler collaborativement avec Git",
    "section": "Workflow collaboratif",
    "text": "Workflow collaboratif\nComme on l’a vu précédemment, si le modèle des branches de Git semble idéal pour gérer le travail collaboratif et asynchrone, il peut également s’avérer rapidement complexe à manipuler en l’absence d’une bonne organisation du travail en équipe. De nombreux modèles (“workflows”) existent en la matière, avec des complexités plus ou moins grandes selon la nature du projet. Nous conseillons d’adopter dans la plupart des cas un modèle très simple : le GitHub Flow.\nLe GitHub Flow est une méthode d’organisation minimaliste du travail collaboratif, qui est progressivement devenue la norme dans les projets open-source. Elle est résumée par la figure suivante, dont nous détaillons par la suite les différentes étapes.\n\n\nDéfinition des rôles des contributeurs\nDans tout projet collaboratif, une première étape essentielle est de bien délimiter les rôles des différents contributeurs. Les différents participants au projet ont en effet généralement des rôles différents dans l’organisation, des niveaux différents de pratique de Git, etc. Il est important de refléter ces différents rôles dans l’organisation du travail collaboratif.\nSur les différents hébergeurs de projets Git, cela prend la forme de rôles que l’on attribue aux différents membres du porjet. Les mainteneurs sont les seuls à pouvoir écrire directement sur master. Les contributeurs sont quant à eux tenus de développer sur des branches. Cela permet de protéger la branche principale, qui doit rester une version propre et jamais compromise du projet.\nNotons que la possibilité de donner des rôles sur les projets GitHub n’est possible que dans le cadre d’organisations (payantes), donc dans un contexte professionnel ou de projets open-source d’une certaine ampleur. Pour des petits projets, il est nécessaire de s’astreindre à une certaine rigueur individuelle pour respecter cette organisation.\n\n\nDéveloppement sur des branches de court-terme\nLes contributeurs développent uniquement sur des branches. Il est d’usage de créer une branche par fonctionnalité, en lui donnant un nom reflétant la fonctionnalité en cours de développement (ex : ajout-tests-unitaires). Les différents contributeurs à la fonctionnalité en cours de développement font des commits sur la branche, en prenant bien soin de pull régulièrement les éventuels changements pour ne pas risquer de conflits de version. Pour la même raison, il est préférable de faire des branches dites de court-terme, c’est à dire propres à une petite fonctionnalité, quite à diviser une fonctionnalité en séries d’implémentations. Cela permet de limiter les éventuels conflits à gérer lors de la fusion finale de la branche avec master.\n\n\nPull Request\nUne fois la série de modifications terminée, vient le temps de rassembler les différents travaux, par l’intermédiaire de la fusion entre la branche et master. Il faut alors “demander” de fusionner (pull request) sur GitHub. Cela ouvre une page liée à la pull request, qui rappelle les différents changements apportés et leurs auteurs, et permet d’entamer une discussion à propos de ces changements.\n\n\nProcessus de review\nLes différents membres du projet peuvent donc analyser et commenter les changements, poser des questions, suggérer des modifications, apporter d’autres contributions, etc. Il est par exemple possible de mentionner un membre de l’équipe par l’intermédiaire de @personne. Il est également possible de procéder à une code review, par exemple par un développeur plus expérimenté.\n\n\nRésolution des éventuels conflits\nEn adoptant cette manière de travailler, master ne sera modifiée que via des pull requests. Il ne devrait donc jamais y avoir le moindre conflit à régler sur master, les seuls conflits possibles se passent sur les branches. Par exemple, dans le cas où une autre pull request aurait été fusionnée sur master depuis l’ouverture de la pull request en question.\nDans le cas d’un conflit à gérer, le conflit doit être résolu dans la branche et pas dans master. Voici la marche à suivre :\n\nappliquez le conseil de survie : faites une copie de sauvegarde de votre clone\ndans votre clone, placez vous sur la branche en question : git checkout nom-de-la-branche\nfusionnez master dans la branche : git merge master\nrésolvez les éventuels conflits dans les fichiers concernés\nfinalisez le commit de merge et poussez-le sur la branche remote, ce qui le fera apparaître dans la pull request\n\n\n\nFusion de la branche\nSi tout est en ordre, la branche peut être fusionnée. Seuls les mainteneurs, qui ont les droits sur master, peuvent fusionner la pull request. En termes d’historique du projet, deux choix sont possibles : - “Create a merge commit” : tous les commits réalisés sur la branche apparaîtront dans l’historique du projet ; - “Squash and merge” : les différents commits réalisés sur la branche seront rassemblés en un commit unique. Cette option est généralement préférable lorsqu’on utilise des branches de court-terme : elles permettent de garder l’historique plus lisible."
  },
  {
    "objectID": "chapters/git.html#utiliser-les-issues",
    "href": "chapters/git.html#utiliser-les-issues",
    "title": "Versionner son code et travailler collaborativement avec Git",
    "section": "Utiliser les issues",
    "text": "Utiliser les issues\nLa manière la plus simple de contribuer à un projet open-source est d’ouvrir une issue. Sur GitHub, cela se fait sur la page du projet, sous l’onglet Issue (cf. documentation officielle). Les issues peuvent avoir différentes nature : - suggestion d’amélioration (sans code) - notification de bug - rapports d’expérience - etc.\nLes issues sont une manière très peu couteuse de contributer à un projet, mais leur importance est capitale, dans la mesure où il est impossible pour les développeurs d’un projet de penser en amont à toutes les utilisations possibles et donc tous les bugs possibles d’une application."
  },
  {
    "objectID": "chapters/git.html#proposer-une-pull-request",
    "href": "chapters/git.html#proposer-une-pull-request",
    "title": "Versionner son code et travailler collaborativement avec Git",
    "section": "Proposer une pull request",
    "text": "Proposer une pull request\nUne autre manière, plus ambitieuse, de contribuer à l’open source est de proposer des pull requests. Concrètement, l’idée est de proposer une amélioration ou bien de résoudre un bug sous forme de code, que les mainteneurs du projet peuvent ensuite décider d’intégrer au code existant.\nLa procédure pour proposer une pull request à un projet sur lequel on n’a aucun droit est très similaire à celle décrite ci-dessus dans le cas normal. La principale différence est que, du fait de l’absence de droits, il est impossible de pousser une branche locale sur le répertoire du projet. On va donc devoir créer au préalable un fork, i.e. une copie du projet que l’on crée dans son espace personnel sur GitHub. C’est sur cette copie que l’on va appliquer la procédure décrite précédemment, en prenant bien soin de travailler sur une branche et non sur master. Une fois les modifications pertinentes effectuées sur la branche du fork, GitHub propose de créer une pull request sur le dépôt original. Cette pull request sera alors visible des mainteneurs du projet, qui pourront l’évaluer et décider d’adopter (ou non) les changements proposés."
  },
  {
    "objectID": "chapters/git.html#respecter-les-règles-de-contribution",
    "href": "chapters/git.html#respecter-les-règles-de-contribution",
    "title": "Versionner son code et travailler collaborativement avec Git",
    "section": "Respecter les règles de contribution",
    "text": "Respecter les règles de contribution\nVouloir contribuer à un projet open-source est très louable, mais ne peut pas pour autant se faire n’importe comment. Un projet est constitué de personnes, qui ont développé ensemble une manière de travailler, des standards de bonnes pratiques, etc. Pour s’assurer que sa contribution ne reste pas lettre morte, il est indispensable de s’imprégner un minimum de la culture du projet.\nPour faciliter les contributions, les projets open-source spécifient bien souvent la manière dont les utilisateurs peuvent contribuer ainsi que le format attendu. En général, ces règles de contribution sont spécifiées dans un fichier CONTRIBUTING.md situé à la racine du projet GitHub, ou a défaut dans le README du projet. Il est essentiel de bien lire ce document s’il existe afin de s’assurer de proposer des contributions pertinentes."
  },
  {
    "objectID": "chapters/linux-101.html",
    "href": "chapters/linux-101.html",
    "title": "Linux 101",
    "section": "",
    "text": "Le terminal (ou ligne de commande) est une console interactive qui permet de lancer des commandes. Il existe dans la plupart des systèmes d’exploitation (y compris avec Windows !). Mais comme il a la réputation d’être austère et complexe, on utilise plutôt des interfaces graphiques pour effectuer nos opérations informatiques quotidiennes.\nPourtant, avoir des notions quant à l’utilisation d’un terminal est une vraie source d’autonomie, dans la mesure où celui-ci permet de gérer bien plus finement les commandes que l’on réalise. Pour les data scientists qui s’intéressent aux bonnes pratiques et à la mise en production, sa maîtrise est essentielle. Les raisons sont multiples :\n\nles interfaces graphiques des logiciels sont généralement limitées par rapport à l’utilisation du programme en ligne de commande. C’est par exemple le cas de Git et de Docker. Dans les deux cas, seul le client en ligne de commande permet de réaliser toutes les opérations permises par le logiciel ;\nmettre un projet de data science en production nécessite d’utiliser un serveur, qui le rend disponible en permanence à son public potentiel. Or là où Windows domine le monde des ordinateurs personnels, une large majorité des serveurs et des infrastructures cloud fonctionnent sous Linux ;\nles principaux langages de programmation des data scientists (, , etc. ) visent à simplifier l’exécution d’opérations complexes par le biais de la ligne de commande mais héritent néanmoins de sa logique. Utiliser la ligne de commande permet de gagner en aisance dans son travail de programmation ;\nplus généralement, une utilisation régulière du terminal est source d’une meilleure compréhension du fonctionnement d’un système de fichiers et de l’exécution des processus sur un ordinateur. Ces connaissances s’avèrent très utiles dans la pratique quotidienne du data scientist, qui nécessite de plus en plus de développer dans différents environnements d’exécution.\n\nDans le cadre de ce cours, on s’intéressera particulièrement au terminal Linux puisque l’écrasante majorité, si ce n’est l’ensemble, des serveurs de mise en production s’appuient sur un système Linux.\n\n\n\nDifférents environnements de travail peuvent être utilisés pour apprendre à se servir d’un terminal Linux :\n\nle SSP Cloud. Dans la mesure où les exemples de mise en production du cours seront illustrées sur cet environnement, nous recommandons de l’utiliser dès à présent pour se familiariser. Le terminal est accessible à partir de différents services (RStudio, Jupyter, etc.), mais nous recommandons d’utiliser le terminal d’un service VSCode, dans la mesure où se servir d’un IDE pour organiser notre code est en soi déjà une bonne pratique ;\nKatacoda, un bac à sable dans un système Ubuntu, la distribution Linux la plus populaire ;\nsur Windows : Git Bash (émulation minimaliste d’un terminal Linux), qui est installée par défaut avec Git.\n\n\n\n\nLançons un terminal pour présenter son fonctionnement basique. On prend pour exemple le terminal d’un service VSCode lancé via le SSP Cloud (Application Menu tout en haut à gauche de VSCode -&gt; Terminal -&gt; New Terminal). Voici à quoi ressemble le terminal en question.\n\nDécrivons d’abord les différentes inscriptions qui arrivent à l’initialisation :\n\n(base) : cette inscription n’est pas directement liée au terminal, elle provient du fait que l’on utilise un environnement conda. Nous verrons le fonctionnement des environnements virtuels en détail dans le chapitre sur la portabilité ;\ncoder@vscode-824991-64744dd6d8-zbgv5 : le nom de l’utilisateur (ici coder) et le nom de la machine (ici, un conteneur, notion que l’on verra là encore dans le chapitre sur la portabilité\n~/work : le chemin du répertoire courant, i.e. à partir duquel va être lancée toute commande. On comprendra mieux la signification de ce chemin dans la section suivante.\n\nPour éviter la lourdeur des images et permettre de copier/coller facilement les commandes, on représentera dans la suite du tutoriel (et du cours) le terminal du service VSCode par des bandes de texte sur fond noir, comme dans l’exemple suivant. Les lignes commençant par un $ sont celles avec lesquelles une commande est lancée, et les lignes sans $ représentent le résultat d’une commande. Attention à ne pas inclure le $ lorsque vous lancez les commandes, il sert simplement à différencier celles-ci des résultats.\n\n\nterminal\n\n$ echo \"une petite illustration\"\n\nune petite illustration\n\n\n\nLe terme filesystem (système de fichiers) désigne la manière dont sont organisés les fichiers au sein d’un système d’exploitation. Cette structure est hiérarchique, en forme d’arbre :\n\nelle part d’un répertoire racine (le dossier qui contient tous les autres) ;\ncontient des dossiers ;\nles dossiers peuvent contenir à leur tour des dossiers (sous-dossiers) ou des fichiers.\n\nIntéressons nous à la structure du filesystem Linux standard.\n\nSource : commons.wikimedia.org\nQuelques observations :\n\nla racine (root) sur Linux s’appelle /, là où elle s’appelle C:\\ par défaut sur Windows ;\nle répertoire racine contient un ensemble de sous-dossiers, dont la plupart ont un rôle essentiellement technique. Il est tout de même utile d’en décrire les principaux :\n\n/bin : contient les binaires, i.e. les programmes exécutables ;\n/etc : contient les fichiers de configuration ;\n/home : contient l’ensemble des dossiers et fichiers personnels des différents utilisateurs. Chaque utilisateur a un répertoire dit “HOME” qui a pour chemin /home/&lt;username&gt; Ce répertoire est souvent représenté par le symbole ~. C’était notamment le cas dans l’illustration du terminal VSCode ci-dessus, ce qui signifie qu’on se trouvait formellement dans le répertoire /home/coder/work, coder étant l’utilisateur par défaut du service VSCode sur le SSP Cloud.\n\n\nChaque dossier ou fichier est représenté par un chemin d’accès, qui correspond simplement à sa position dans le filesystem. Il existe deux moyens de spécifier un chemin :\n\nen utilisant un chemin absolu, c’est à dire en indiquant le chemin complet du dossier ou fichier depuis la racine. En Linux, on reconnaît donc un chemin absolu par le fait qu’il commence forcément par /.\nen utilisant un chemin relatif, c’est à dire en indiquant le chemin du dossier ou fichier relativement au répertoire courant.\n\nComme tout ce qui touche de près ou de loin au terminal, la seule manière de bien comprendre ces notions est de les appliquer. Les exercices de fin de chapitre vous permettront d’appliquer ces concepts à des cas pratiques.\n\n\n\nLe rôle d’un terminal est de lancer des commandes. Ces commandes peuvent être classées en trois grandes catégories :\n\nnavigation au sein du filesystem\nmanipulations de fichiers (créer, lire, modifier des dossiers/fichiers)\nlancement de programmes\n\n\n\nLorsque l’on lance un programme à partir du terminal, celui-ci a pour référence le répertoire courant dans lequel on se trouve au moment du lancement. Par exemple, si l’on exécute un script Python en se trouvant dans un certain répertoire, tous les chemins des fichiers utilisés dans le script seront relatifs au répertoire courant d’exécution — à moins d’utiliser uniquement des chemins absolus, ce qui n’est pas une bonne pratique en termes de reproductibilité puisque cela lie votre projet à la structure de votre filesystem particulier.\nAinsi, la très grande majorité des opérations que l’on est amené à réaliser dans un terminal consiste simplement à se déplacer au sein du filesystem. Les commandes principales pour naviguer et se repérer dans le filesystem sont présentées dans la table suivante.\n\n\n\n\n\n\n\nCommande\nDescription\n\n\n\n\npwd\nafficher (Print Working Directory) le chemin (absolu) du dossier courant\n\n\ncd chemin\nchanger (Change Directory) de dossier courant\n\n\nls\nlister les fichiers dans le dossier courant\n\n\n\nLa commande cd accepte aussi bien des chemins absolus que des chemins relatifs. En pratique, il est assez pénible de manipuler des chemins absolus, qui peuvent facilement être très longs. On utilisera donc essentiellement des chemins relatifs, ce qui revient à se déplacer à partir du répertoire courant. Pour se faire, voici quelques utilisations très fréquentes de la commande cd.\n\n\n\n\n\n\n\nCommande\nDescription\n\n\n\n\ncd ..\nremonter d’un niveau dans l’arborescence (dossier parent)\n\n\ncd ~\nrevenir dans le répertoire HOME de l’utilisateur courant\n\n\n\nLa première commande est l’occasion de revenir sur une convention d’écriture importante pour les chemins relatifs :\n\n. représente le répertoire courant. Ainsi, cd . revient à changer de répertoire courant… pour le répertoire courant, ce qui bien sûr ne change rien. Mais le . est très utile pour la copie de fichiers (cf. section suivante) ou encore lorsque l’on doit passer des paramètres à un programme (cf. section Lancement de programmes) ;\n.. représente le répertoire parent du répertoire courant.\n\nCes différentes commandes constituent la très grande majorité des usages dans un terminal. Il est essentiel de les pratiquer jusqu’à ce qu’elles deviennent une seconde nature.\n\n\n\nLes commandes suivantes permettent de manipuler le filesystem. Il en existe beaucoup d’autres, mais elles couvrent la plupart des besoins.\n\n\n\n\n\n\n\nCommande\nDescription\n\n\n\n\ncp fichierdepart fichierarrivee\ncopier (CoPy) un fichier\n\n\nmv fichierdepart fichierarrivee\ndéplacer (MoVe) un fichier\n\n\nrm nomdufichier\nsupprimer (ReMove) un fichier\n\n\ncat nomdufichier\nafficher le contenu du fichier\n\n\nmkdir nomdudossier\ncréer (MaKe DIRectory) un dossier\n\n\ntouch nomdufichier\ncréer un fichier vide\n\n\n\nDans la mesure où il est généralement possible de réaliser toutes ces opérations à l’aide d’interfaces graphiques (notamment, l’explorateur de fichiers), celles-ci sont moins essentielles que celles permettant de se déplacer dans le filesystem. Nous vous recommandons malgré tout de les pratiquer également, et ce pour plusieurs raisons :\n\neffectuer un maximum d’opérations via le terminal permet de bien comprendre son fonctionnement et donc de gagner en autonomie ;\nen devenant efficient sur ces commandes, vous vous rendrez compte que manipuler le filesystem via le terminal est en fait plus rapide que via une interface graphique ;\nlorsque l’on est amené à manipuler un terminal pour interagir avec un serveur, il n’y a souvent pas la moindre interface graphique, auquel cas il n’y a pas d’autre choix que d’opérer uniquement à partir du terminal.\n\n\n\n\nLe rôle du terminal est de lancer des programmes. Lancer un programme se fait à partir d’un fichier dit exécutable, qui peut être de deux formes :\n\nun binaire, i.e. un programme dont le code n’est pas lisible par l’humain ;\nun script, i.e. un fichier texte contenant une série d’instructions à exécuter. Le langage du terminal Linux est le shell, et les scripts associés ont pour extension .sh.\n\nDans les deux cas, la syntaxe de lancement d’une commande est : le nom de l’exécutable, suivi d’éventuels paramètres, séparés par des espaces. Par exemple, la commande python monscript.py exécute le binaire python et lui passe comme unique argument le nom d’un script .py (contenu dans le répertoire courant), qui va donc être exécuté via Python. De la même manière, toutes les commandes vues précédemment pour se déplacer dans le filesystem ou manipuler des fichiers sont des exécutables et fonctionnent donc selon ce principe. Par exemple, cp fichierdepart fichierarrivee lance le binaire cp en lui passant deux arguments : le chemin du fichier à copier et le chemin d’arrivée.\nDans les exemples de commandes précédents, les paramètres étaient passés en mode positionnel : l’exécutable attend des arguments dans un certain ordre, ce qui est clair dans le cas de cp par exemple. Mais le nombre des arguments n’est pas toujours fixé à l’avance, du fait de la présence de paramètres optionnels. Ainsi, la plupart des exécutables permettent le passage d’arguments optionnels, qui modifient le comportement de l’exécutable, via des flags. Par exemple, on a vu que cp permettait de copier un fichier à un autre endroit du filesystem, mais peut-on copier un dossier et l’ensemble de son contenu avec ? Nativement non, mais l’ajout d’un paramètre le permet : cp -R dossierdepart dossierarrivee permet de copier récursivement le dossier et tout son contenu. Notons que les flags ont très souvent un équivalent en toute lettre, qui s’écrit quant à lui avec deux tirers. Par exemple, la commande précédente peut s’écrire de manière équivalente cp --recursive dossierdepart dossierarrivee. Il est fréquent de voir les deux syntaxes en pratique, parfois même mélangées au sein d’une même commande.\n\n\n\n\nComme tout langage de programmation, le langage shell permet d’assigner et d’utiliser des variables dans des commandes. Pour afficher le contenu d’une variable, on utilise la commande echo, qui est l’équivalent de la fonction print en Python ou en R.\n\n\nterminal\n\n$ MY_VAR=\"toto\"\n$ echo $MY_VAR\n\ntoto\nQuelques remarques importantes :\n\nla syntaxe pour la création de variable est précise : aucun espace d’un côté comme de l’autre du = ;\nen Shell, on ne manipule que du texte. Dans notre exemple, on aurait donc pu écrire MY_VAR=toto pour le même résultat. Par contre, si l’on veut assigner à une variable une valeur contenant des espaces, les guillemets deviennent indispensables pour ne pas obtenir un message d’erreur ;\npour accéder à la valeur d’une variable, on la préfixe d’un $.\n\nNotre objectif avec ce tutoriel n’est pas de savoir coder en shell, on ne va donc pas s’attarder sur les propriétés des variables. En revanche, introduire ce concept était nécessaire pour en présenter un autre, essentiel quant à lui dans la pratique quotidienne du data scientist : les variables d’environnement. Pour faire une analogie — un peu simpliste — avec les langages de programmation, ce sont des sortes de variables “globales”, dans la mesure où elles vont être accessibles à tous les programmes lancés à partir d’un terminal, et vont modifier leur comportement.\nLa liste des variables d’environnement peut être affichée à l’aide de la commande env. Il y a généralement un grand nombre de variables d’environnement prééxistantes ; en voici un échantillon obtenu à partir du terminal du service VSCode.\n\n\nterminal\n\n$ env\n\nSHELL=/bin/bash\nHOME=/home/coder\nLANG=en_US.UTF-8\nCONDA_PYTHON_EXE=/home/coder/local/bin/conda/bin/python\nCette liste illustre la variété des utilisations des variables d’environnements :\n\nla variable $SHELL précise l’exécutable utilisé pour lancer le terminal ;\nla variable $HOME donne l’emplacement du répertoire utilisateur. En fait, le symbole ~ que l’on a rencontré plus haut référence cette même variable ;\nla variable LANG spécifie la locale, un concept qui permet de définir la langue et l’encodage utilisés par défaut par Linux ;\nla variable CONDA_PYTHON_EXE existe uniquement parce que l’on a installé conda comme système de gestion de packages Python. C’est l’existence de cette variable qui fait que la commande python mon_script.py va utiliser comme binaire la version de Python qui nous intéresse.\n\nUne variable d’environnement essentielle, et que l’on est fréquemment amené à modifier dans les applications de data science, est la variable $PATH. Elle consiste en une concaténation de chemins absolus, séparés par :, qui spécifie les dossiers dans lesquels Linux va chercher les exécutables lorsque l’on lance une commande, ainsi que l’ordre de la recherche. Regardons la valeur du $PATH sur le terminal du service VSCode.\n\n\nterminal\n\n$ echo $PATH\n\n/home/coder/local/bin/conda/bin:/home/coder/local/bin/conda/condabin:/home/coder/local/bin/conda/envs/basesspcloud/bin:/home/coder/local/bin/conda/bin:/usr/local/sbin:/usr/local/bin:/usr/sbin:/usr/bin:/sbin:/bin\nL’ordre de recherche est de gauche à droite. C’est donc parce que le dossier /home/coder/local/bin/conda/bin est situé en premier que l’interpréteur Python qui sera choisi lorsque l’on lance un script Python est celui issu de Conda, et non celui contenu par défaut dans /usr/bin par exemple.\nL’existence et la configuration adéquate des variables d’environnement est essentielle pour le bon fonctionnement de nombreux outils très utilisés en data science, comme Git ou encore Spark par exemple. Il est donc nécessaire de comprendre leur fonctionnement pour pouvoir lire des documentations techniques et adapter la configuration d’un serveur en cas de bug lié à une variable d’environnement manquante ou mal configurée.\n\n\n\nLa sécurité est un enjeu central en Linux, qui permet une gestion très fine des permissions sur les différents fichiers et programmes.\nUne différence majeure par rapport à d’autres systèmes d’exploitation, notamment Windows, est qu’aucun utilisateur n’a par défaut les droits complets d’administrateur (root). Il n’est donc pas possible nativement d’accéder au parties sensibles du système, ou bien de lancer certains types de programme. Par exemple, si l’on essaie de lister les fichiers du dossier /root, on obtient une erreur.\n\n\nterminal\n\n$ ls /root\n\nls: cannot open directory '/root': Permission denied\nDans la pratique du quotidien, certaines opérations telles que l’installation de binaires ou de packages nécessitent cependant des droits administrateurs. Dans ce cas, il est d’usage d’utiliser la commande sudo (Substitute User DO), qui permet de prendre les droits root le temps de l’exécution de la commande.\n\n\nterminal\n\n$ sudo ls /root\n\nLe dossier /root étant vide, la commande ls renvoie une chaîne de caractères vide, mais nous n’avons plus de problème de permission. Notons qu’une bonne pratique de sécurité, en particulier dans les scripts shell que l’on peut être amenés à écrire ou exécuter, est de limiter l’utilisation de cette commande aux cas où elle s’avère nécessaire.\nUne autre subtilité concerne justement l’exécution de scripts shell. Par défaut, qu’il soit créé par l’utilisateur ou téléchargé d’internet, un script n’est pas exécutable.\n\n\nterminal\n\n1$ touch test.sh\n2$ ./test.sh\n\n\n1\n\nCréer le script test.sh (vide)\n\n2\n\nExécuter le script test.sh\n\n\nbash: ./test.sh: Permission denied\nC’est bien entendu une mesure de sécurité pour éviter l’exécution automatique de scripts potentiellement malveillants. Pour pouvoir exécuter un tel script, il faut attribuer des droits d’exécution au fichier avec la commande chmod. Il devient alors possible d’exécuter le script classiquement.\n\n\nterminal\n\n1$ chmod +x test.sh\n2$ ./test.sh\n$ # Le script étant vide, il ne se passe rien\n\n\n1\n\nDonner des droits d’exécution au script test.sh\n\n2\n\nExécuter le script test.sh\n\n\n\n\n\nMaintenant que nous avons vu les variables et les permissions, revenons sur les scripts shell précédemment évoqués. A l’instar d’un script Python, un script shell permet d’automatiser une série de commandes lancées dans un terminal. Le but de ce tutoriel n’est pas de savoir écrire des scripts shell complexes, travail généralement dévolu aux les data engineers ou les sysadmin (administrateurs système), mais de comprendre leur structure, leur fonctionnement, et de savoir lancer des scripts simples. Ces compétences sont essentielles lorsque l’on se préoccupe de mise en production. A titre d’exemple, comme nous le verrons dans le chapitre sur la portabilité, il est fréquent d’utiliser un script shell comme entrypoint d’une image docker, afin de spécifier les commandes que doit lancer le conteneur lors de son initialisation.\nIllustrons leur structure ainsi que leur fonctionnement à l’aide d’un script simple. Considérons les commandes suivantes, que l’on met dans un fichier monscript.sh dans le répertoire courant.\n\n\nterminal\n\n$ #!/bin/bash\n$ SECTION=$1\n$ CHAPTER=$2\n$ FORMATION_DIR=/home/coder/work/formation\n$ mkdir -p $FORMATION_DIR/$SECTION/$CHAPTER\n$ touch $FORMATION_DIR/$SECTION/$CHAPTER/test.txt\n\nAnalysons la structure de ce script :\n\nla première ligne est classique, elle se nomme le shebang : elle indique au système quel interpréteur utiliser pour exécuter ce script. Dans notre cas, et de manière générale, on utilise bash (Bourne-Again SHell, l’implémentation moderne du shell) ;\nles lignes 2 et 3 assignent à des variables les arguments passés au script dans la commande. Par défaut, ceux-ci sont assignés à des variables n où n est la position de l’argument, en commençant à 1 ;\nla ligne 4 assigne un chemin à une variable\nla ligne 5 crée le chemin complet, défini à partir des variables créées précédemment. Le paramètre -p est important : il précise à mkdir d’agir de manière récursive, c’est à dire de créer les dossiers intermédiaires qui n’existent pas encore ;\nla ligne 6 crée un fichier texte vide dans le dossier créé avec la commande précédente.\n\nExécutons maintenant ce script, en prenant soin de lui donner les permission adéquates au préalable.\n\n\nterminal\n\n$ chmod +x monscript.sh\n$ bash monscript.sh section2 chapitre3\n$ ls formation/section1/chapitre2/\n\ntext.txt\nOpération réussie : le dossier a bien été créé et contient un fichier test.txt.\nPour en savoir plus, une Cheat Sheet sur bash très bien réalisée.\n\n\n\nUne différence fondamentale entre Linux et Windows tient à la manière dont on installe un logiciel. Sur Windows, on va chercher un installateur (un fichier exécutable en .exe) sur le site du logiciel, et on l’exécute. En Linux, on passe généralement par un gestionnaire de packages qui va chercher les logiciels sur un répertoire centralisé, à la manière de pip en Python par exemple.\nPourquoi cette différence ? Une raison importante est que, contrairement à Windows, il existe une multitude de distributions différentes de Linux (Debian, Ubuntu, Mint, etc.), qui fonctionnent différemment et peuvent avoir différentes versions. En utilisant le package manager (gestionnaire de paquets) propre à la distribution en question, on s’assure de télécharger le logiciel adapté à sa distribution. Dans ce cours, on fait le choix d’utiliser une distribution Debian et son gestionnaire de paquets associé apt. Debian est en effet un choix populaire pour les servers de part sa stabilité et sa simplicité, et sera également familière aux utilisateurs d’Ubuntu, distribution très populaire pour les ordinateurs personnels et qui est basée sur Debian.\nL’utilisation d’apt est très simple. La seule difficulté est de savoir le nom du paquet que l’on souhaite installer, ce qui nécessite en général d’utiliser un moteur de recherche. L’installation de paquets est également un cas où il faut utiliser sudo, puisque cela implique souvent l’accès à des répertoires protégés.\n\n\nterminal\n\n$ sudo apt install tree\n\nReading package lists... Done\nBuilding dependency tree... Done\nReading state information... Done\nThe following NEW packages will be installed:\n  tree\n0 upgraded, 1 newly installed, 0 to remove and 0 not upgraded.\n...\nDésinstaller un package est également simple : c’est l’opération inverse. Par sécurité, le terminal vous demande si vous êtes sûr de votre choix en vous demandant de tapper la lettre y (yes) ou la lettre n. On peut passer automatiquement cette étape en ajoutant le paramètre -y\n\n\nterminal\n\n$ sudo apt remove -y tree\n\nReading package lists... Done\nBuilding dependency tree... Done\nReading state information... Done\nThe following packages will be REMOVED:\n  tree\n0 upgraded, 0 newly installed, 1 to remove and 0 not upgraded.\n...\nAvant d’installer un package, il est toujours préférable de mettre à jour la base des packages, pour s’assurer qu’on obtiendra bien la dernière version.\n\n\nterminal\n\n$ sudo apt update\n\nHit:1 http://deb.debian.org/debian bullseye InRelease\nHit:2 http://deb.debian.org/debian bullseye-updates InRelease\nHit:3 http://security.debian.org/debian-security bullseye-security InRelease\nReading package lists... Done\nBuilding dependency tree... Done\nReading state information... Done\nAll packages are up to date.\n\n\n\nOn l’a dit et redit : devenir à l’aise avec le terminal Linux est essentiel et demande de la pratique. Il existe néanmoins quelques astuces qui peuvent grandement simplifier la vie et donc faciliter la prise de bonnes habitudes.\nLa première est l’autocomplétion. Dès lors que vous écrivez une commande contenant un nom d’exécutable, un chemin sur le filesystem, ou autre, n’hésitez pas à utiliser la touche TAB (touche au-dessus de celle qui verrouille la majuscule) de votre clavier. Dans la majorité des cas, cela va vous faire gagner un temps précieux.\nLa deuxième est de parcourir l’historique de commandes : la flèche vers le haut (↑) permet de parcourir l’historique des commandes que vous avez précédemment exécutées. Chaque fois que vous appuyez sur cette touche, le terminal affiche la dernière commande exécutée, en remontant dans l’historique à chaque appui supplémentaire.\nLa troisième, dans le même esprit que la deuxième mais plus élaborée, est la recherche inverse dans l’historique de commandes avec les touches Ctrl+R. Lorsque vous appuyez sur Ctrl+R, une invite de recherche apparaît. Vous pouvez alors commencer à taper des caractères de la commande que vous recherchez. Le terminal cherchera dans l’historique des commandes la dernière commande correspondant à ce que vous avez tapé, et la montrera à l’écran. Si ce n’est pas la commande exacte que vous cherchez, vous pouvez continuer à taper pour affiner la recherche ou appuyer à nouveau sur Ctrl+R pour rechercher la commande précédente correspondant à vos critères.\nUne quatrième astuce, qui n’en est pas vraiment une, est de lire la documentation d’une commande lorsque l’on n’est pas sûr de sa syntaxe ou des paramètres admissibles. Via le terminal, la documentation d’une commande peut être affichée en exécutant man suivie de la commande en question, par exemple : man cp. Comme il n’est pas toujours très pratique de lire de longs textes dans un petit terminal, on peut également chercher la documentation d’une commande sur le site man7."
  },
  {
    "objectID": "chapters/linux-101.html#pourquoi-sintéresser-au-terminal-linux",
    "href": "chapters/linux-101.html#pourquoi-sintéresser-au-terminal-linux",
    "title": "Linux 101",
    "section": "",
    "text": "Le terminal (ou ligne de commande) est une console interactive qui permet de lancer des commandes. Il existe dans la plupart des systèmes d’exploitation (y compris avec Windows !). Mais comme il a la réputation d’être austère et complexe, on utilise plutôt des interfaces graphiques pour effectuer nos opérations informatiques quotidiennes.\nPourtant, avoir des notions quant à l’utilisation d’un terminal est une vraie source d’autonomie, dans la mesure où celui-ci permet de gérer bien plus finement les commandes que l’on réalise. Pour les data scientists qui s’intéressent aux bonnes pratiques et à la mise en production, sa maîtrise est essentielle. Les raisons sont multiples :\n\nles interfaces graphiques des logiciels sont généralement limitées par rapport à l’utilisation du programme en ligne de commande. C’est par exemple le cas de Git et de Docker. Dans les deux cas, seul le client en ligne de commande permet de réaliser toutes les opérations permises par le logiciel ;\nmettre un projet de data science en production nécessite d’utiliser un serveur, qui le rend disponible en permanence à son public potentiel. Or là où Windows domine le monde des ordinateurs personnels, une large majorité des serveurs et des infrastructures cloud fonctionnent sous Linux ;\nles principaux langages de programmation des data scientists (, , etc. ) visent à simplifier l’exécution d’opérations complexes par le biais de la ligne de commande mais héritent néanmoins de sa logique. Utiliser la ligne de commande permet de gagner en aisance dans son travail de programmation ;\nplus généralement, une utilisation régulière du terminal est source d’une meilleure compréhension du fonctionnement d’un système de fichiers et de l’exécution des processus sur un ordinateur. Ces connaissances s’avèrent très utiles dans la pratique quotidienne du data scientist, qui nécessite de plus en plus de développer dans différents environnements d’exécution.\n\nDans le cadre de ce cours, on s’intéressera particulièrement au terminal Linux puisque l’écrasante majorité, si ce n’est l’ensemble, des serveurs de mise en production s’appuient sur un système Linux."
  },
  {
    "objectID": "chapters/linux-101.html#environnement-de-travail",
    "href": "chapters/linux-101.html#environnement-de-travail",
    "title": "Linux 101",
    "section": "",
    "text": "Différents environnements de travail peuvent être utilisés pour apprendre à se servir d’un terminal Linux :\n\nle SSP Cloud. Dans la mesure où les exemples de mise en production du cours seront illustrées sur cet environnement, nous recommandons de l’utiliser dès à présent pour se familiariser. Le terminal est accessible à partir de différents services (RStudio, Jupyter, etc.), mais nous recommandons d’utiliser le terminal d’un service VSCode, dans la mesure où se servir d’un IDE pour organiser notre code est en soi déjà une bonne pratique ;\nKatacoda, un bac à sable dans un système Ubuntu, la distribution Linux la plus populaire ;\nsur Windows : Git Bash (émulation minimaliste d’un terminal Linux), qui est installée par défaut avec Git."
  },
  {
    "objectID": "chapters/linux-101.html#introduction-au-terminal",
    "href": "chapters/linux-101.html#introduction-au-terminal",
    "title": "Linux 101",
    "section": "",
    "text": "Lançons un terminal pour présenter son fonctionnement basique. On prend pour exemple le terminal d’un service VSCode lancé via le SSP Cloud (Application Menu tout en haut à gauche de VSCode -&gt; Terminal -&gt; New Terminal). Voici à quoi ressemble le terminal en question.\n\nDécrivons d’abord les différentes inscriptions qui arrivent à l’initialisation :\n\n(base) : cette inscription n’est pas directement liée au terminal, elle provient du fait que l’on utilise un environnement conda. Nous verrons le fonctionnement des environnements virtuels en détail dans le chapitre sur la portabilité ;\ncoder@vscode-824991-64744dd6d8-zbgv5 : le nom de l’utilisateur (ici coder) et le nom de la machine (ici, un conteneur, notion que l’on verra là encore dans le chapitre sur la portabilité\n~/work : le chemin du répertoire courant, i.e. à partir duquel va être lancée toute commande. On comprendra mieux la signification de ce chemin dans la section suivante.\n\nPour éviter la lourdeur des images et permettre de copier/coller facilement les commandes, on représentera dans la suite du tutoriel (et du cours) le terminal du service VSCode par des bandes de texte sur fond noir, comme dans l’exemple suivant. Les lignes commençant par un $ sont celles avec lesquelles une commande est lancée, et les lignes sans $ représentent le résultat d’une commande. Attention à ne pas inclure le $ lorsque vous lancez les commandes, il sert simplement à différencier celles-ci des résultats.\n\n\nterminal\n\n$ echo \"une petite illustration\"\n\nune petite illustration"
  },
  {
    "objectID": "chapters/linux-101.html#notions-de-filesystem",
    "href": "chapters/linux-101.html#notions-de-filesystem",
    "title": "Linux 101",
    "section": "",
    "text": "Le terme filesystem (système de fichiers) désigne la manière dont sont organisés les fichiers au sein d’un système d’exploitation. Cette structure est hiérarchique, en forme d’arbre :\n\nelle part d’un répertoire racine (le dossier qui contient tous les autres) ;\ncontient des dossiers ;\nles dossiers peuvent contenir à leur tour des dossiers (sous-dossiers) ou des fichiers.\n\nIntéressons nous à la structure du filesystem Linux standard.\n\nSource : commons.wikimedia.org\nQuelques observations :\n\nla racine (root) sur Linux s’appelle /, là où elle s’appelle C:\\ par défaut sur Windows ;\nle répertoire racine contient un ensemble de sous-dossiers, dont la plupart ont un rôle essentiellement technique. Il est tout de même utile d’en décrire les principaux :\n\n/bin : contient les binaires, i.e. les programmes exécutables ;\n/etc : contient les fichiers de configuration ;\n/home : contient l’ensemble des dossiers et fichiers personnels des différents utilisateurs. Chaque utilisateur a un répertoire dit “HOME” qui a pour chemin /home/&lt;username&gt; Ce répertoire est souvent représenté par le symbole ~. C’était notamment le cas dans l’illustration du terminal VSCode ci-dessus, ce qui signifie qu’on se trouvait formellement dans le répertoire /home/coder/work, coder étant l’utilisateur par défaut du service VSCode sur le SSP Cloud.\n\n\nChaque dossier ou fichier est représenté par un chemin d’accès, qui correspond simplement à sa position dans le filesystem. Il existe deux moyens de spécifier un chemin :\n\nen utilisant un chemin absolu, c’est à dire en indiquant le chemin complet du dossier ou fichier depuis la racine. En Linux, on reconnaît donc un chemin absolu par le fait qu’il commence forcément par /.\nen utilisant un chemin relatif, c’est à dire en indiquant le chemin du dossier ou fichier relativement au répertoire courant.\n\nComme tout ce qui touche de près ou de loin au terminal, la seule manière de bien comprendre ces notions est de les appliquer. Les exercices de fin de chapitre vous permettront d’appliquer ces concepts à des cas pratiques."
  },
  {
    "objectID": "chapters/linux-101.html#lancer-des-commandes",
    "href": "chapters/linux-101.html#lancer-des-commandes",
    "title": "Linux 101",
    "section": "",
    "text": "Le rôle d’un terminal est de lancer des commandes. Ces commandes peuvent être classées en trois grandes catégories :\n\nnavigation au sein du filesystem\nmanipulations de fichiers (créer, lire, modifier des dossiers/fichiers)\nlancement de programmes\n\n\n\nLorsque l’on lance un programme à partir du terminal, celui-ci a pour référence le répertoire courant dans lequel on se trouve au moment du lancement. Par exemple, si l’on exécute un script Python en se trouvant dans un certain répertoire, tous les chemins des fichiers utilisés dans le script seront relatifs au répertoire courant d’exécution — à moins d’utiliser uniquement des chemins absolus, ce qui n’est pas une bonne pratique en termes de reproductibilité puisque cela lie votre projet à la structure de votre filesystem particulier.\nAinsi, la très grande majorité des opérations que l’on est amené à réaliser dans un terminal consiste simplement à se déplacer au sein du filesystem. Les commandes principales pour naviguer et se repérer dans le filesystem sont présentées dans la table suivante.\n\n\n\n\n\n\n\nCommande\nDescription\n\n\n\n\npwd\nafficher (Print Working Directory) le chemin (absolu) du dossier courant\n\n\ncd chemin\nchanger (Change Directory) de dossier courant\n\n\nls\nlister les fichiers dans le dossier courant\n\n\n\nLa commande cd accepte aussi bien des chemins absolus que des chemins relatifs. En pratique, il est assez pénible de manipuler des chemins absolus, qui peuvent facilement être très longs. On utilisera donc essentiellement des chemins relatifs, ce qui revient à se déplacer à partir du répertoire courant. Pour se faire, voici quelques utilisations très fréquentes de la commande cd.\n\n\n\n\n\n\n\nCommande\nDescription\n\n\n\n\ncd ..\nremonter d’un niveau dans l’arborescence (dossier parent)\n\n\ncd ~\nrevenir dans le répertoire HOME de l’utilisateur courant\n\n\n\nLa première commande est l’occasion de revenir sur une convention d’écriture importante pour les chemins relatifs :\n\n. représente le répertoire courant. Ainsi, cd . revient à changer de répertoire courant… pour le répertoire courant, ce qui bien sûr ne change rien. Mais le . est très utile pour la copie de fichiers (cf. section suivante) ou encore lorsque l’on doit passer des paramètres à un programme (cf. section Lancement de programmes) ;\n.. représente le répertoire parent du répertoire courant.\n\nCes différentes commandes constituent la très grande majorité des usages dans un terminal. Il est essentiel de les pratiquer jusqu’à ce qu’elles deviennent une seconde nature.\n\n\n\nLes commandes suivantes permettent de manipuler le filesystem. Il en existe beaucoup d’autres, mais elles couvrent la plupart des besoins.\n\n\n\n\n\n\n\nCommande\nDescription\n\n\n\n\ncp fichierdepart fichierarrivee\ncopier (CoPy) un fichier\n\n\nmv fichierdepart fichierarrivee\ndéplacer (MoVe) un fichier\n\n\nrm nomdufichier\nsupprimer (ReMove) un fichier\n\n\ncat nomdufichier\nafficher le contenu du fichier\n\n\nmkdir nomdudossier\ncréer (MaKe DIRectory) un dossier\n\n\ntouch nomdufichier\ncréer un fichier vide\n\n\n\nDans la mesure où il est généralement possible de réaliser toutes ces opérations à l’aide d’interfaces graphiques (notamment, l’explorateur de fichiers), celles-ci sont moins essentielles que celles permettant de se déplacer dans le filesystem. Nous vous recommandons malgré tout de les pratiquer également, et ce pour plusieurs raisons :\n\neffectuer un maximum d’opérations via le terminal permet de bien comprendre son fonctionnement et donc de gagner en autonomie ;\nen devenant efficient sur ces commandes, vous vous rendrez compte que manipuler le filesystem via le terminal est en fait plus rapide que via une interface graphique ;\nlorsque l’on est amené à manipuler un terminal pour interagir avec un serveur, il n’y a souvent pas la moindre interface graphique, auquel cas il n’y a pas d’autre choix que d’opérer uniquement à partir du terminal.\n\n\n\n\nLe rôle du terminal est de lancer des programmes. Lancer un programme se fait à partir d’un fichier dit exécutable, qui peut être de deux formes :\n\nun binaire, i.e. un programme dont le code n’est pas lisible par l’humain ;\nun script, i.e. un fichier texte contenant une série d’instructions à exécuter. Le langage du terminal Linux est le shell, et les scripts associés ont pour extension .sh.\n\nDans les deux cas, la syntaxe de lancement d’une commande est : le nom de l’exécutable, suivi d’éventuels paramètres, séparés par des espaces. Par exemple, la commande python monscript.py exécute le binaire python et lui passe comme unique argument le nom d’un script .py (contenu dans le répertoire courant), qui va donc être exécuté via Python. De la même manière, toutes les commandes vues précédemment pour se déplacer dans le filesystem ou manipuler des fichiers sont des exécutables et fonctionnent donc selon ce principe. Par exemple, cp fichierdepart fichierarrivee lance le binaire cp en lui passant deux arguments : le chemin du fichier à copier et le chemin d’arrivée.\nDans les exemples de commandes précédents, les paramètres étaient passés en mode positionnel : l’exécutable attend des arguments dans un certain ordre, ce qui est clair dans le cas de cp par exemple. Mais le nombre des arguments n’est pas toujours fixé à l’avance, du fait de la présence de paramètres optionnels. Ainsi, la plupart des exécutables permettent le passage d’arguments optionnels, qui modifient le comportement de l’exécutable, via des flags. Par exemple, on a vu que cp permettait de copier un fichier à un autre endroit du filesystem, mais peut-on copier un dossier et l’ensemble de son contenu avec ? Nativement non, mais l’ajout d’un paramètre le permet : cp -R dossierdepart dossierarrivee permet de copier récursivement le dossier et tout son contenu. Notons que les flags ont très souvent un équivalent en toute lettre, qui s’écrit quant à lui avec deux tirers. Par exemple, la commande précédente peut s’écrire de manière équivalente cp --recursive dossierdepart dossierarrivee. Il est fréquent de voir les deux syntaxes en pratique, parfois même mélangées au sein d’une même commande."
  },
  {
    "objectID": "chapters/linux-101.html#variables-denvironnement",
    "href": "chapters/linux-101.html#variables-denvironnement",
    "title": "Linux 101",
    "section": "",
    "text": "Comme tout langage de programmation, le langage shell permet d’assigner et d’utiliser des variables dans des commandes. Pour afficher le contenu d’une variable, on utilise la commande echo, qui est l’équivalent de la fonction print en Python ou en R.\n\n\nterminal\n\n$ MY_VAR=\"toto\"\n$ echo $MY_VAR\n\ntoto\nQuelques remarques importantes :\n\nla syntaxe pour la création de variable est précise : aucun espace d’un côté comme de l’autre du = ;\nen Shell, on ne manipule que du texte. Dans notre exemple, on aurait donc pu écrire MY_VAR=toto pour le même résultat. Par contre, si l’on veut assigner à une variable une valeur contenant des espaces, les guillemets deviennent indispensables pour ne pas obtenir un message d’erreur ;\npour accéder à la valeur d’une variable, on la préfixe d’un $.\n\nNotre objectif avec ce tutoriel n’est pas de savoir coder en shell, on ne va donc pas s’attarder sur les propriétés des variables. En revanche, introduire ce concept était nécessaire pour en présenter un autre, essentiel quant à lui dans la pratique quotidienne du data scientist : les variables d’environnement. Pour faire une analogie — un peu simpliste — avec les langages de programmation, ce sont des sortes de variables “globales”, dans la mesure où elles vont être accessibles à tous les programmes lancés à partir d’un terminal, et vont modifier leur comportement.\nLa liste des variables d’environnement peut être affichée à l’aide de la commande env. Il y a généralement un grand nombre de variables d’environnement prééxistantes ; en voici un échantillon obtenu à partir du terminal du service VSCode.\n\n\nterminal\n\n$ env\n\nSHELL=/bin/bash\nHOME=/home/coder\nLANG=en_US.UTF-8\nCONDA_PYTHON_EXE=/home/coder/local/bin/conda/bin/python\nCette liste illustre la variété des utilisations des variables d’environnements :\n\nla variable $SHELL précise l’exécutable utilisé pour lancer le terminal ;\nla variable $HOME donne l’emplacement du répertoire utilisateur. En fait, le symbole ~ que l’on a rencontré plus haut référence cette même variable ;\nla variable LANG spécifie la locale, un concept qui permet de définir la langue et l’encodage utilisés par défaut par Linux ;\nla variable CONDA_PYTHON_EXE existe uniquement parce que l’on a installé conda comme système de gestion de packages Python. C’est l’existence de cette variable qui fait que la commande python mon_script.py va utiliser comme binaire la version de Python qui nous intéresse.\n\nUne variable d’environnement essentielle, et que l’on est fréquemment amené à modifier dans les applications de data science, est la variable $PATH. Elle consiste en une concaténation de chemins absolus, séparés par :, qui spécifie les dossiers dans lesquels Linux va chercher les exécutables lorsque l’on lance une commande, ainsi que l’ordre de la recherche. Regardons la valeur du $PATH sur le terminal du service VSCode.\n\n\nterminal\n\n$ echo $PATH\n\n/home/coder/local/bin/conda/bin:/home/coder/local/bin/conda/condabin:/home/coder/local/bin/conda/envs/basesspcloud/bin:/home/coder/local/bin/conda/bin:/usr/local/sbin:/usr/local/bin:/usr/sbin:/usr/bin:/sbin:/bin\nL’ordre de recherche est de gauche à droite. C’est donc parce que le dossier /home/coder/local/bin/conda/bin est situé en premier que l’interpréteur Python qui sera choisi lorsque l’on lance un script Python est celui issu de Conda, et non celui contenu par défaut dans /usr/bin par exemple.\nL’existence et la configuration adéquate des variables d’environnement est essentielle pour le bon fonctionnement de nombreux outils très utilisés en data science, comme Git ou encore Spark par exemple. Il est donc nécessaire de comprendre leur fonctionnement pour pouvoir lire des documentations techniques et adapter la configuration d’un serveur en cas de bug lié à une variable d’environnement manquante ou mal configurée."
  },
  {
    "objectID": "chapters/linux-101.html#permissions",
    "href": "chapters/linux-101.html#permissions",
    "title": "Linux 101",
    "section": "",
    "text": "La sécurité est un enjeu central en Linux, qui permet une gestion très fine des permissions sur les différents fichiers et programmes.\nUne différence majeure par rapport à d’autres systèmes d’exploitation, notamment Windows, est qu’aucun utilisateur n’a par défaut les droits complets d’administrateur (root). Il n’est donc pas possible nativement d’accéder au parties sensibles du système, ou bien de lancer certains types de programme. Par exemple, si l’on essaie de lister les fichiers du dossier /root, on obtient une erreur.\n\n\nterminal\n\n$ ls /root\n\nls: cannot open directory '/root': Permission denied\nDans la pratique du quotidien, certaines opérations telles que l’installation de binaires ou de packages nécessitent cependant des droits administrateurs. Dans ce cas, il est d’usage d’utiliser la commande sudo (Substitute User DO), qui permet de prendre les droits root le temps de l’exécution de la commande.\n\n\nterminal\n\n$ sudo ls /root\n\nLe dossier /root étant vide, la commande ls renvoie une chaîne de caractères vide, mais nous n’avons plus de problème de permission. Notons qu’une bonne pratique de sécurité, en particulier dans les scripts shell que l’on peut être amenés à écrire ou exécuter, est de limiter l’utilisation de cette commande aux cas où elle s’avère nécessaire.\nUne autre subtilité concerne justement l’exécution de scripts shell. Par défaut, qu’il soit créé par l’utilisateur ou téléchargé d’internet, un script n’est pas exécutable.\n\n\nterminal\n\n1$ touch test.sh\n2$ ./test.sh\n\n\n1\n\nCréer le script test.sh (vide)\n\n2\n\nExécuter le script test.sh\n\n\nbash: ./test.sh: Permission denied\nC’est bien entendu une mesure de sécurité pour éviter l’exécution automatique de scripts potentiellement malveillants. Pour pouvoir exécuter un tel script, il faut attribuer des droits d’exécution au fichier avec la commande chmod. Il devient alors possible d’exécuter le script classiquement.\n\n\nterminal\n\n1$ chmod +x test.sh\n2$ ./test.sh\n$ # Le script étant vide, il ne se passe rien\n\n\n1\n\nDonner des droits d’exécution au script test.sh\n\n2\n\nExécuter le script test.sh"
  },
  {
    "objectID": "chapters/linux-101.html#les-scripts-shell",
    "href": "chapters/linux-101.html#les-scripts-shell",
    "title": "Linux 101",
    "section": "",
    "text": "Maintenant que nous avons vu les variables et les permissions, revenons sur les scripts shell précédemment évoqués. A l’instar d’un script Python, un script shell permet d’automatiser une série de commandes lancées dans un terminal. Le but de ce tutoriel n’est pas de savoir écrire des scripts shell complexes, travail généralement dévolu aux les data engineers ou les sysadmin (administrateurs système), mais de comprendre leur structure, leur fonctionnement, et de savoir lancer des scripts simples. Ces compétences sont essentielles lorsque l’on se préoccupe de mise en production. A titre d’exemple, comme nous le verrons dans le chapitre sur la portabilité, il est fréquent d’utiliser un script shell comme entrypoint d’une image docker, afin de spécifier les commandes que doit lancer le conteneur lors de son initialisation.\nIllustrons leur structure ainsi que leur fonctionnement à l’aide d’un script simple. Considérons les commandes suivantes, que l’on met dans un fichier monscript.sh dans le répertoire courant.\n\n\nterminal\n\n$ #!/bin/bash\n$ SECTION=$1\n$ CHAPTER=$2\n$ FORMATION_DIR=/home/coder/work/formation\n$ mkdir -p $FORMATION_DIR/$SECTION/$CHAPTER\n$ touch $FORMATION_DIR/$SECTION/$CHAPTER/test.txt\n\nAnalysons la structure de ce script :\n\nla première ligne est classique, elle se nomme le shebang : elle indique au système quel interpréteur utiliser pour exécuter ce script. Dans notre cas, et de manière générale, on utilise bash (Bourne-Again SHell, l’implémentation moderne du shell) ;\nles lignes 2 et 3 assignent à des variables les arguments passés au script dans la commande. Par défaut, ceux-ci sont assignés à des variables n où n est la position de l’argument, en commençant à 1 ;\nla ligne 4 assigne un chemin à une variable\nla ligne 5 crée le chemin complet, défini à partir des variables créées précédemment. Le paramètre -p est important : il précise à mkdir d’agir de manière récursive, c’est à dire de créer les dossiers intermédiaires qui n’existent pas encore ;\nla ligne 6 crée un fichier texte vide dans le dossier créé avec la commande précédente.\n\nExécutons maintenant ce script, en prenant soin de lui donner les permission adéquates au préalable.\n\n\nterminal\n\n$ chmod +x monscript.sh\n$ bash monscript.sh section2 chapitre3\n$ ls formation/section1/chapitre2/\n\ntext.txt\nOpération réussie : le dossier a bien été créé et contient un fichier test.txt.\nPour en savoir plus, une Cheat Sheet sur bash très bien réalisée."
  },
  {
    "objectID": "chapters/linux-101.html#gestionnaire-de-paquets",
    "href": "chapters/linux-101.html#gestionnaire-de-paquets",
    "title": "Linux 101",
    "section": "",
    "text": "Une différence fondamentale entre Linux et Windows tient à la manière dont on installe un logiciel. Sur Windows, on va chercher un installateur (un fichier exécutable en .exe) sur le site du logiciel, et on l’exécute. En Linux, on passe généralement par un gestionnaire de packages qui va chercher les logiciels sur un répertoire centralisé, à la manière de pip en Python par exemple.\nPourquoi cette différence ? Une raison importante est que, contrairement à Windows, il existe une multitude de distributions différentes de Linux (Debian, Ubuntu, Mint, etc.), qui fonctionnent différemment et peuvent avoir différentes versions. En utilisant le package manager (gestionnaire de paquets) propre à la distribution en question, on s’assure de télécharger le logiciel adapté à sa distribution. Dans ce cours, on fait le choix d’utiliser une distribution Debian et son gestionnaire de paquets associé apt. Debian est en effet un choix populaire pour les servers de part sa stabilité et sa simplicité, et sera également familière aux utilisateurs d’Ubuntu, distribution très populaire pour les ordinateurs personnels et qui est basée sur Debian.\nL’utilisation d’apt est très simple. La seule difficulté est de savoir le nom du paquet que l’on souhaite installer, ce qui nécessite en général d’utiliser un moteur de recherche. L’installation de paquets est également un cas où il faut utiliser sudo, puisque cela implique souvent l’accès à des répertoires protégés.\n\n\nterminal\n\n$ sudo apt install tree\n\nReading package lists... Done\nBuilding dependency tree... Done\nReading state information... Done\nThe following NEW packages will be installed:\n  tree\n0 upgraded, 1 newly installed, 0 to remove and 0 not upgraded.\n...\nDésinstaller un package est également simple : c’est l’opération inverse. Par sécurité, le terminal vous demande si vous êtes sûr de votre choix en vous demandant de tapper la lettre y (yes) ou la lettre n. On peut passer automatiquement cette étape en ajoutant le paramètre -y\n\n\nterminal\n\n$ sudo apt remove -y tree\n\nReading package lists... Done\nBuilding dependency tree... Done\nReading state information... Done\nThe following packages will be REMOVED:\n  tree\n0 upgraded, 0 newly installed, 1 to remove and 0 not upgraded.\n...\nAvant d’installer un package, il est toujours préférable de mettre à jour la base des packages, pour s’assurer qu’on obtiendra bien la dernière version.\n\n\nterminal\n\n$ sudo apt update\n\nHit:1 http://deb.debian.org/debian bullseye InRelease\nHit:2 http://deb.debian.org/debian bullseye-updates InRelease\nHit:3 http://security.debian.org/debian-security bullseye-security InRelease\nReading package lists... Done\nBuilding dependency tree... Done\nReading state information... Done\nAll packages are up to date."
  },
  {
    "objectID": "chapters/linux-101.html#tricks",
    "href": "chapters/linux-101.html#tricks",
    "title": "Linux 101",
    "section": "",
    "text": "On l’a dit et redit : devenir à l’aise avec le terminal Linux est essentiel et demande de la pratique. Il existe néanmoins quelques astuces qui peuvent grandement simplifier la vie et donc faciliter la prise de bonnes habitudes.\nLa première est l’autocomplétion. Dès lors que vous écrivez une commande contenant un nom d’exécutable, un chemin sur le filesystem, ou autre, n’hésitez pas à utiliser la touche TAB (touche au-dessus de celle qui verrouille la majuscule) de votre clavier. Dans la majorité des cas, cela va vous faire gagner un temps précieux.\nLa deuxième est de parcourir l’historique de commandes : la flèche vers le haut (↑) permet de parcourir l’historique des commandes que vous avez précédemment exécutées. Chaque fois que vous appuyez sur cette touche, le terminal affiche la dernière commande exécutée, en remontant dans l’historique à chaque appui supplémentaire.\nLa troisième, dans le même esprit que la deuxième mais plus élaborée, est la recherche inverse dans l’historique de commandes avec les touches Ctrl+R. Lorsque vous appuyez sur Ctrl+R, une invite de recherche apparaît. Vous pouvez alors commencer à taper des caractères de la commande que vous recherchez. Le terminal cherchera dans l’historique des commandes la dernière commande correspondant à ce que vous avez tapé, et la montrera à l’écran. Si ce n’est pas la commande exacte que vous cherchez, vous pouvez continuer à taper pour affiner la recherche ou appuyer à nouveau sur Ctrl+R pour rechercher la commande précédente correspondant à vos critères.\nUne quatrième astuce, qui n’en est pas vraiment une, est de lire la documentation d’une commande lorsque l’on n’est pas sûr de sa syntaxe ou des paramètres admissibles. Via le terminal, la documentation d’une commande peut être affichée en exécutant man suivie de la commande en question, par exemple : man cp. Comme il n’est pas toujours très pratique de lire de longs textes dans un petit terminal, on peut également chercher la documentation d’une commande sur le site man7."
  },
  {
    "objectID": "chapters/portability.html",
    "href": "chapters/portability.html",
    "title": "Portabilité",
    "section": "",
    "text": "Dérouler les slides ci-dessous ou cliquer ici pour afficher les slides en plein écran."
  },
  {
    "objectID": "chapters/portability.html#introduction",
    "href": "chapters/portability.html#introduction",
    "title": "Portabilité",
    "section": "Introduction",
    "text": "Introduction\nPour illustrer l’importance de travailler avec des environnements virtuels, mettons-nous à la place d’un.e aspirant.e data scientist qui commencerait ses premiers projets.\nSelon toute vraisemblance, on va commencer par installer une distribution de Python — souvent, via Anaconda — sur son poste et commencer à développer, projet après projet. S’il est nécessaire d’installer une librairie supplémentaire, on le fera sans trop se poser de question. Puis, on passera au projet suivant en adoptant la même démarche. Et ainsi de suite.\nCette démarche naturelle présentera l’avantage de permettre d’aller vite dans les expérimentations. Néanmoins, elle deviendra problématique s’il devient nécessaire de partager son projet, ou de reprendre celui-ci dans le futur.\nDans cette approche, les différents packages qu’on va être amené à utiliser vont être installés au même endroit. Ceci peut apparaître secondaire, après tout nous utilisons Python pour sa simplicité d’usage qui ne nécessite pas de passer des heures à se poser des questions avant d’écrire la moindre ligne de code, mais cela va finir par nous poser plusieurs problèmes :\n\nconflits de version : une application A peut dépendre de la version 1 d’un package là où une application B peut dépendre de la version 2 de ce même package. Ces versions d’un même package peuvent avoir des incompatibilités2. Une seule application peut donc fonctionner dans cette configuration ;\nversion de Python fixe — on ne peut avoir qu’une seule installation par système — là où on voudrait pouvoir avoir des versions différentes selon le projet ;\nreproductiblité limitée : difficile de dire quel projet repose sur tel package, dans la mesure où ceux-ci s’accumulent en un même endroit au fil des projets ;\nportabilité limitée : conséquence du point précédent, il est difficile de fixer dans un fichier les dépendances spécifiques à un projet, et exclusivement celles-ci.\n\nLes environnements virtuels constituent une solution à ces différents problèmes."
  },
  {
    "objectID": "chapters/portability.html#fonctionnement",
    "href": "chapters/portability.html#fonctionnement",
    "title": "Portabilité",
    "section": "Fonctionnement",
    "text": "Fonctionnement\nLe concept d’environnement virtuel est techniquement très simple. On peut lui donner la définition suivante pour Python :\n\n“dossier auto-suffisant qui contient une installation de Python pour une version particulière de Python ainsi que des packages additionnels et qui est isolé des autres environnements existants.”\n\nOn peut donc simplement voir les environnements virtuels comme un moyen de faire cohabiter sur un même système différentes installations de Python avec chacune leur propre liste de packages installés et leurs versions. Développer dans des environnements virtuels vierges à chaque début de projet est une très bonne pratique pour accroître la reproductibilité des analyses."
  },
  {
    "objectID": "chapters/portability.html#implémentations",
    "href": "chapters/portability.html#implémentations",
    "title": "Portabilité",
    "section": "Implémentations",
    "text": "Implémentations\nIl existe différentes implémentations des environnements virtuels en Python, dont chacune ont leurs spécificités et leur communauté d’utilisateurs :\n\nL’implémentation standard en Python est venv.\nconda propose une implémentation plus complète.\n\nEn pratique pour les utilisateurs, ces implémentations sont relativement proches. La différence conceptuelle majeure est que conda est à la fois un package manager (comme pip) et un gestionnaire d’environnements virtuels (comme venv).\nPendant longtemps, conda en tant que package manager s’est avéré très pratique en data science, dans la mesure où il gérait non seulement les dépendances Python mais aussi dans d’autres langages, comme des dépendances C, très utilisées par les principales librairies de data science et dont l’installation peut être complexe sur certains systèmes d’exploitation. Néanmoins, depuis quelques années, l’installation de packages par pip se fait de plus en plus par le biais de wheels qui sont des versions pré-compilées des librairies systèmes, propres à chaque configuration système.\n\n\n\n\n\n\nUne différence conceptuelle entre pip et conda\n\n\n\n\n\nL’autre différence majeure avec pip est que Conda utilise une méthode plus avancée — et donc également plus coûteuse en temps — de résolution des dépendances.\nEn effet, différents packages peuvent spécifier différentes versions d’un même package dont ils dépendent tous les deux, ce qui provoque un conflit de version. Conda va par défaut appliquer un algorithme qui vise à gérer au mieux ces conflits, là où pip va choisir une approche plus minimaliste3.\n\n\n\npip+venv présente l’avantage de la simplicité, conda de la fiabilité. Selon les projets, on privilégiera l’un ou l’autre. Néanmoins, si le projet est amené à fonctionner de manière isolée dans un conteneur, venv suffira amplement car l’isolation sera fournie par le conteneur comme nous le verrons ultérieurement.\n\n\n\n\n\n\nC’est différent en  ?\n\n\n\n\n\nOn lit souvent, notamment chez les afficionados de  que la gestion des environnements en Python est chaotique. C’était vrai au début des années 2010 mais c’est quelques peu exagéré aujourd’hui.\nLa qualité supérieure des outils  pour la gestion des dépendances ne saute pas aux yeux: renv est très intéressant mais ne permet pas de définir la version de  :\n\nR version: renv tracks, but doesn’t help with, the version of R used with the packge. renv can’t easily help with this because it’s run inside of R, but you might find tools like rig helpful, as they make it easier to switch between multiple version of R on one computer.\n\nC’est, en fait, le problème principal des outils  pour la reproductibilité. Pour les utiliser, il faut souvent se trouver dans une session , avec ses spécificités. Les outils  qui s’utilisent pas le biais de la ligne de commande offrent une robustesse plus importante. venv est certes dépendant de la version de  utilisée lors de la création de l’environnement mais le fait de passer par le terminal permet de choisir la version de  qui servira à créer l’environnement. Quant à conda, la version de  est définie dans le environment.yml ce qui donne une grande liberté.\n\n\n\nPuisqu’il n’y a pas de raison absolue d’imposer pip+venv ou conda, nous recommandons le pragmatisme. Personnellement, nous utilisons plutôt venv car nous travaillons principalement dans des microservices basés sur des conteneurs et non sur des postes personnels, ce qui est l’approche moderne dans le monde de la data science. Nous présentons néanmoins les deux approches par la suite. L’application fil rouge propose les deux approches, à vous de choisir celle que vous désirez privilégier."
  },
  {
    "objectID": "chapters/portability.html#guide-pratique-dutilisation-dun-environnement-virtuel",
    "href": "chapters/portability.html#guide-pratique-dutilisation-dun-environnement-virtuel",
    "title": "Portabilité",
    "section": "Guide pratique d’utilisation d’un environnement virtuel",
    "text": "Guide pratique d’utilisation d’un environnement virtuel\n\nInstallation\n\nvenvconda\n\n\nvenv est un module inclus par défaut dans Python, ce qui le rend facilement accessible pour la gestion d’environnements virtuels.\nLes instructions pour utiliser venv, l’outil de création d’environnements virtuels intégré à Python, sont détaillées dans la documentation officielle de Python.\n\n\n\nIllustration du principe (Source: dataquest)\n\n\n\n\nLes instructions à suivre pour installer conda sont détaillées dans la documentation officielle. conda seul étant peu utile en pratique, il est généralement installé dans le cadre de distributions. Les deux plus populaires sont :\n\nMiniconda : une distribution minimaliste contenant conda, Python ainsi qu’un petit nombre de packages techniques très utiles ;\nAnaconda : une distribution assez volumineuse contenant conda, Python, d’autres logiciels (R, Spyder, etc.) ainsi qu’un ensemble de packages utiles pour la data science (SciPy, NumPy, etc.).\n\n\nLe choix de la distribution importe assez peu en pratique, dans la mesure où nous allons de toute manière utiliser des environnements virtuels vierges pour développer nos projets.\n\n\n\n\n\nCréer un environnement\n\nvenvconda\n\n\nPour commencer à utiliser venv, commençons par créer un environnement vierge, nommé dev. Pour créer un environnement virtuel, cela se fait en ligne de commande par le biais de Python. Cela signifie que la version de Python utilisée par cet environnement sera celle utilisée lors de la création de celui-ci.\n\n\nterminal\n\n1$ python -m venv dev\n\n\n1\n\nSur un système Windows, ce sera python.exe -m venv dev\n\n\nCette commande crée un dossier nommé dev/ contenant une installation Python isolée.\n\n\nExemple sur un système Linux\n\n\n\n\nExemple sur un système Linux\n\n\n\nCelle-ci est de la version de Python enregistrée par défaut dans le PATH, en l’occurrence Python 3.11. Pour créer un environnement virtuel avec une autre version de Python, il faudra définir le chemin de manière formelle, par exemple:\n\n\nterminal\n\n$ /chemin_local/python3.8 -m venv dev-old\n\n\n\nPour commencer à utiliser conda, commençons par créer un environnement vierge, nommé dev, en spécifiant la version de Python que l’on souhaite installer pour notre projet.\n\n\nterminal\n\n$ conda create -n dev python=3.9.7\n\nRetrieving notices: ...working... done\nChannels:\n - conda-forge\nPlatform: linux-64\nCollecting package metadata (repodata.json): done\nSolving environment: done\n\n## Package Plan ##\n\n  environment location: /opt/mamba/envs/dev\n\n  added / updated specs:\n    - python=3.9.7\n\n\nThe following packages will be downloaded:\n...\nThe following NEW packages will be INSTALLED:\n...\nProceed ([y]/n)? y\nDownloading and Extracting Packages\n...\nComme indiqué dans les logs, Conda a créé notre environnement et nous indique son emplacement sur le filesystem. En réalité, l’environnement n’est jamais vraiment vierge : Conda nous demande — et il faut répondre oui en tapant y — d’installer un certain nombre de packages, qui sont ceux qui viennent avec la distribution Miniconda.\nOn peut vérifier que l’environnement a bien été créé en listant les environnements installés sur le système.\n\n\nterminal\n\n$ conda info --envs\n\n# conda environments:\n#\nbase                  *  /opt/mamba\ndev                      /opt/mamba/envs/dev\n\n\n\n\n\nActiver un environnement\nComme plusieurs environnements peuvent coexister sur un même système, il faut dire à notre gestionnaire d’environnement d’activer celui-ci. Dès lors, ce sera celui-ci qui sera utilisé implicitement lorsqu’on utilisera python, pip, etc. dans la ligne de commande active4.\n\nvenvconda\n\n\n\n\nterminal\n\n$ source dev/bin/activate\n\nvenv active l’environnement virtuel dev, indiqué par le changement du nom de l’environnement qui apparaît au début de la ligne de commande dans le terminal. Une fois activé, dev devient temporairement notre environnement par défaut pour les opérations Python. Pour confirmer cela, nous pouvons utiliser la commande which pour déterminer l’emplacement de l’interpréteur Python qui sera utilisé pour exécuter des scripts comme python mon-script.py.\n\n\nterminal\n\n(dev) $ which python\n\n/home/onyxia/work/dev/bin/python\n\n\n\n\nterminal\n\n$ conda activate dev\n\nConda nous indique que l’on travaille à partir de maintenant dans l’environnement dev en indiquant son nom entre parenthèses au début de la ligne de commandes. Autrement dit, dev devient pour un temps notre environnement par défaut. Pour s’en assurer, vérifions avec la commande which l’emplacement de l’interpréteur Python qui sera utilisé si on lance une commande du type python mon-script.py.\n\n\nterminal\n\n(dev) $ which python\n\n/opt/mamba/envs/dev/bin/python\n\n\n\nOn travaille bien dans l’environnement attendu : l’interpréteur qui se lance n’est pas celui du système global, mais bien celui spécifique à notre environnement virtuel.\n\n\nLister les packages installés\nUne fois l’environnement activé, on peut lister les packages installés et leur version. Cela confirme qu’un certain nombre de packages sont installés par défaut lors de la création d’un environnement virtuel.\n\nvenvconda\n\n\nOn part d’un environnement vraiment réduit à l’os:\n\n\nterminal\n\n(dev) $ pip list\n\nPackage    Version\n---------- -------\npip        23.3.2\nsetuptools 69.0.3\nwheel      0.42.0\n\n\nL’environnement est assez minimaliste, quoique plus garni que lors de la création d’un environnement virtuel par venv\n\n\nterminal\n\n(dev) $ conda list\n\n# packages in environment at /opt/mamba/envs/dev:\n#\n# Name                    Version                   Build  Channel\n_libgcc_mutex             0.1                 conda_forge    conda-forge\n_openmp_mutex             4.5                       2_gnu    conda-forge\nca-certificates           2023.11.17           hbcca054_0    conda-forge\n...\n\n\n\nPour se convaincre, on peut vérifier que Numpy est bien absent de notre environnement:\n\n\nterminal\n\n(dev) $ python -c \"import numpy as np\"\n\nTraceback (most recent call last):\n  File \"&lt;string&gt;\", line 1, in &lt;module&gt;\nModuleNotFoundError: No module named 'numpy'\n\n\nInstaller un package\nNotre environnement peut être enrichi, lorsque nécessaire, avec l’installation d’un package par le biais de la ligne de commande. La procédure est très similaire entre pip (pour les environnements venv) et conda.\n\n\n\n\n\n\nMélanger pip et conda\n\n\n\n\n\nIl est techniquement possible d’installer des packages par le biais de pip en étant situé dans un environnement virtuel conda5. Ce n’est pas un problème pour de l’expérimentation et ça permet de développer rapidement.\nNéanmoins, dans un environnement de production c’est une pratique à éviter.\n\nSoit on initialise un environnement conda autosuffisant avec un env.yml (voir plus bas) ;\nSoit on crée un environnement venv et on fait exclusivement des pip install.\n\n\n\n\n\nvenvconda\n\n\n\n\nterminal\n\n(dev) $ pip install nom_du_package\n\n\n\n\n\nterminal\n\n(dev) $ conda install nom_du_package\n\n\n\n\nLa différence est que là où pip install va installer un package à partir du répertoire PyPI, conda install va chercher le package sur les répertoires maintenus par les développeurs de Conda6.\nInstallons par exemple le package phare de machine learning scikit-learn.\n\nvenvconda\n\n\n\n\nterminal\n\n(dev) $ conda install scikit-learn\n\npip install scikit-learn\nCollecting scikit-learn\n  Obtaining dependency information for scikit-learn from https://files.pythonhosted.org/packages/5b/be/208f17ce87a5e55094b0e8ffd55b06919ab9b56e7e4ce2a64cd9095ec5d2/scikit_learn-1.4.0-1-cp311-cp311-manylinux_2_17_x86_64.manylinux2014_x86_64.whl.metadata\n  Downloading scikit_learn-1.4.0-1-cp311-cp311-manylinux_2_17_x86_64.manylinux2014_x86_64.whl.metadata (11 kB)\nCollecting numpy&lt;2.0,&gt;=1.19.5 (from scikit-learn)\n  Obtaining dependency information for numpy&lt;2.0,&gt;=1.19.5 from https://files.pythonhosted.org/packages/5a/62/007b63f916aca1d27f5fede933fda3315d931\n...\nLes dépendances nécessaires (par exemple Numpy sont automatiquement installées). L’environnement s’enrichit donc:\n\n\nterminal\n\n(dev) $ pip list\n\nPackage       Version\n------------- -------\njoblib        1.3.2\nnumpy         1.26.3\npip           23.2.1\nscikit-learn  1.4.0\nscipy         1.12.0\nsetuptools    65.5.0\nthreadpoolctl 3.2.0\n\n\n\n\nterminal\n\n(dev) $ conda install scikit-learn\n\n\n\nVoir la sortie\n\nChannels:\n - conda-forge\nPlatform: linux-64\nCollecting package metadata (repodata.json): done\nSolving environment: done\n\n## Package Plan ##\n\n  environment location: /opt/mamba/envs/dev\n\n  added / updated specs:\n    - scikit-learn\n\n\nThe following packages will be downloaded:\n\n    package                    |            build\n    ---------------------------|-----------------\n    joblib-1.3.2               |     pyhd8ed1ab_0         216 KB  conda-forge\n    libblas-3.9.0              |21_linux64_openblas          14 KB  conda-forge\n    libcblas-3.9.0             |21_linux64_openblas          14 KB  conda-forge\n    libgfortran-ng-13.2.0      |       h69a702a_3          23 KB  conda-forge\n    libgfortran5-13.2.0        |       ha4646dd_3         1.4 MB  conda-forge\n    liblapack-3.9.0            |21_linux64_openblas          14 KB  conda-forge\n    libopenblas-0.3.26         |pthreads_h413a1c8_0         5.3 MB  conda-forge\n    libstdcxx-ng-13.2.0        |       h7e041cc_3         3.7 MB  conda-forge\n    numpy-1.26.3               |   py39h474f0d3_0         6.6 MB  conda-forge\n    python_abi-3.9             |           4_cp39           6 KB  conda-forge\n    scikit-learn-1.4.0         |   py39ha22ef79_0         8.7 MB  conda-forge\n    scipy-1.12.0               |   py39h474f0d3_2        15.6 MB  conda-forge\n    threadpoolctl-3.2.0        |     pyha21a80b_0          20 KB  conda-forge\n    ------------------------------------------------------------\n                                           Total:        41.6 MB\n\nThe following NEW packages will be INSTALLED:\n\n  joblib             conda-forge/noarch::joblib-1.3.2-pyhd8ed1ab_0\n  libblas            conda-forge/linux-64::libblas-3.9.0-21_linux64_openblas\n  libcblas           conda-forge/linux-64::libcblas-3.9.0-21_linux64_openblas\n  libgfortran-ng     conda-forge/linux-64::libgfortran-ng-13.2.0-h69a702a_3\n  libgfortran5       conda-forge/linux-64::libgfortran5-13.2.0-ha4646dd_3\n  liblapack          conda-forge/linux-64::liblapack-3.9.0-21_linux64_openblas\n  libopenblas        conda-forge/linux-64::libopenblas-0.3.26-pthreads_h413a1c8_0\n  libstdcxx-ng       conda-forge/linux-64::libstdcxx-ng-13.2.0-h7e041cc_3\n  numpy              conda-forge/linux-64::numpy-1.26.3-py39h474f0d3_0\n  python_abi         conda-forge/linux-64::python_abi-3.9-4_cp39\n  scikit-learn       conda-forge/linux-64::scikit-learn-1.4.0-py39ha22ef79_0\n  scipy              conda-forge/linux-64::scipy-1.12.0-py39h474f0d3_2\n  threadpoolctl      conda-forge/noarch::threadpoolctl-3.2.0-pyha21a80b_0\n\n\n\nDownloading and Extracting Packages:\n\nPreparing transaction: done\nVerifying transaction: done\nExecuting transaction: done\n\nLà encore, conda nous demande d’installer d’autres packages, qui sont des dépendances de scikit-learn. Par exemple, la librairie de calcul scientifique NumPy.\n(dev) $ conda list\n# packages in environment at /opt/mamba/envs/dev:\n#\n# Name                    Version                   Build  Channel\n_libgcc_mutex             0.1                 conda_forge    conda-forge\n_openmp_mutex             4.5                       2_gnu    conda-forge\nca-certificates           2023.11.17           hbcca054_0    conda-forge\njoblib                    1.3.2              pyhd8ed1ab_0    conda-forge\nld_impl_linux-64          2.40                 h41732ed_0    conda-forge\nlibblas                   3.9.0           21_linux64_openblas    conda-forge\nlibcblas                  3.9.0           21_linux64_openblas    conda-forge\nlibffi                    3.4.2                h7f98852_5    conda-forge\nlibgcc-ng                 13.2.0               h807b86a_3    conda-forge\nlibgfortran-ng            13.2.0               h69a702a_3    conda-forge\nlibgfortran5              13.2.0               ha4646dd_3    conda-forge\nlibgomp                   13.2.0               h807b86a_3    conda-forge\nliblapack                 3.9.0           21_linux64_openblas    conda-forge\nlibopenblas               0.3.26          pthreads_h413a1c8_0    conda-forge\nlibsqlite                 3.44.2               h2797004_0    conda-forge\nlibstdcxx-ng              13.2.0               h7e041cc_3    conda-forge\nlibzlib                   1.2.13               hd590300_5    conda-forge\nncurses                   6.4                  h59595ed_2    conda-forge\nnumpy                     1.26.3           py39h474f0d3_0    conda-forge\nopenssl                   3.2.0                hd590300_1    conda-forge\npip                       23.3.2             pyhd8ed1ab_0    conda-forge\npython                    3.9.7           hf930737_3_cpython    conda-forge\npython_abi                3.9                      4_cp39    conda-forge\nreadline                  8.2                  h8228510_1    conda-forge\nscikit-learn              1.4.0            py39ha22ef79_0    conda-forge\nscipy                     1.12.0           py39h474f0d3_2    conda-forge\nsetuptools                69.0.3             pyhd8ed1ab_0    conda-forge\nsqlite                    3.44.2               h2c6b66d_0    conda-forge\nthreadpoolctl             3.2.0              pyha21a80b_0    conda-forge\ntk                        8.6.13          noxft_h4845f30_101    conda-forge\ntzdata                    2023d                h0c530f3_0    conda-forge\nwheel                     0.42.0             pyhd8ed1ab_0    conda-forge\nxz                        5.2.6                h166bdaf_0    conda-forge\nzlib                      1.2.13               hd590300_5    conda-forge\n\n\n\n\n\nExporter les spécifications de l’environnement\nDévelopper à partir d’un environnement vierge est une bonne pratique de reproductibilité : en partant d’une base minimale, on s’assure que seuls les packages effectivement nécessaires au bon fonctionnement de notre application ont été installés au fur et à mesure du projet.\nCela rend également notre projet plus aisé à rendre portable. On peut exporter les spécifications de l’environnement dans un fichier spécial qui peut permettre de créer un nouvel environnement similaire à celui ayant servi initialement.\n\nvenvconda\n\n\n\n\nterminal\n\n(dev) $ pip freeze &gt; requirements.txt\n\n\n\nVoir le fichier requirements.txt généré\n\n\n\nrequirements.txt\n\njoblib==1.3.2\nnumpy==1.26.3\nscikit-learn==1.4.0\nscipy==1.12.0\nthreadpoolctl==3.2.0\n\n\n\n\n\n\nterminal\n\n(dev) $ conda env export &gt; environment.yml\n\n\n\nVoir le fichier environment.yml généré\n\n\n\nenvironment.yml\n\nname: dev\nchannels:\n  - conda-forge\ndependencies:\n  - _libgcc_mutex=0.1=conda_forge\n  - _openmp_mutex=4.5=2_gnu\n  - ca-certificates=2023.11.17=hbcca054_0\n  - joblib=1.3.2=pyhd8ed1ab_0\n  - ld_impl_linux-64=2.40=h41732ed_0\n  - libblas=3.9.0=21_linux64_openblas\n  - libcblas=3.9.0=21_linux64_openblas\n  - libffi=3.4.2=h7f98852_5\n  - libgcc-ng=13.2.0=h807b86a_3\n  - libgfortran-ng=13.2.0=h69a702a_3\n  - libgfortran5=13.2.0=ha4646dd_3\n  - libgomp=13.2.0=h807b86a_3\n  - liblapack=3.9.0=21_linux64_openblas\n  - libopenblas=0.3.26=pthreads_h413a1c8_0\n  - libsqlite=3.44.2=h2797004_0\n  - libstdcxx-ng=13.2.0=h7e041cc_3\n  - libzlib=1.2.13=hd590300_5\n  - ncurses=6.4=h59595ed_2\n  - numpy=1.26.3=py39h474f0d3_0\n  - openssl=3.2.0=hd590300_1\n  - pip=23.3.2=pyhd8ed1ab_0\n  - python=3.9.7=hf930737_3_cpython\n  - python_abi=3.9=4_cp39\n  - readline=8.2=h8228510_1\n  - scikit-learn=1.4.0=py39ha22ef79_0\n  - scipy=1.12.0=py39h474f0d3_2\n  - setuptools=69.0.3=pyhd8ed1ab_0\n  - sqlite=3.44.2=h2c6b66d_0\n  - threadpoolctl=3.2.0=pyha21a80b_0\n  - tk=8.6.13=noxft_h4845f30_101\n  - tzdata=2023d=h0c530f3_0\n  - wheel=0.42.0=pyhd8ed1ab_0\n  - xz=5.2.6=h166bdaf_0\n  - zlib=1.2.13=hd590300_5\nprefix: /opt/mamba/envs/dev\n\n\n\n\n\nCe fichier est mis par convention à la racine du dépôt Git du projet. Ainsi, les personnes souhaitant tester l’application peuvent recréer le même environnement Conda que celui qui a servi au développement via la commande suivante.\n\nvenvconda\n\n\nOn refait la démarche précédente de création d’un environnement vierge puis un pip install -r requirements.txt\n\n\nterminal\n\n$ python -m venv newenv\n$ source newenv/bin/activate\n\n\n\nterminal\n\n(newenv) $ pip install -r requirements.txt\n\n\n\nCela se fait en une seule commande:\n\n\nterminal\n\n$ $ conda env create -f environment.yml\n\n\n\n\n\n\nChanger d’environnement\n\nvenvconda\n\n\nPour changer d’environnement virtuel, il suffit d’en activer un autre.\n\n\nterminal\n\n(myenv) $ deactivate\n$ source anotherenv/bin/activate\n(anotherenv) $ which python\n/chemin/vers/anotherenv/bin/python\n\nPour quitter l’environnement virtuel actif, on utilise simplement la commande deactivate :\n\n\nterminal\n\n(anotherenv) $ deactivate\n$\n\n\n\nPour changer d’environnement, il suffit d’en activer un autre.\n\n\nterminal\n\n(dev) $ conda activate base\n(base) $ which python\n/opt/mamba/bin/python\n\nPour sortir de tout environnement conda, on utilise la commande conda deactivate :\n\n\nterminal\n\n(base) $ conda deactivate\n$\n\n\n\n\n\n\nAide-mémoire\n\n\n\n\n\n\n\n\nvenv\nconda\nPrincipe\n\n\n\n\npython -m venv &lt;env_name&gt;\nconda create -n &lt;env_name&gt; python=&lt;python_version&gt;\nCréation d’un environnement nommé &lt;env_name&gt; dont la version de Python est &lt;python_version&gt;\n\n\n\nconda info --envs\nLister les environnements\n\n\nsource &lt;env_name&gt;/bin/activate\nconda activate &lt;env_name&gt;\nUtiliser l’environnement &lt;env_name&gt; pour la session du terminal\n\n\npip list\nconda list\nLister les packages dans l’environnement actif\n\n\npip install &lt;pkg&gt;\nconda install &lt;pkg&gt;\nInstaller le package &lt;pkg&gt; dans l’environnement actif\n\n\npip freeze &gt; requirements.txt\nconda env export &gt; environment.yml\nExporter les spécifications de l’environnement dans un fichier requirements.txt"
  },
  {
    "objectID": "chapters/portability.html#limites",
    "href": "chapters/portability.html#limites",
    "title": "Portabilité",
    "section": "Limites",
    "text": "Limites\nDévelopper dans des environnements virtuels est une bonne pratique, car cela accroît la portabilité d’une application. Néanmoins, il y a plusieurs limites à leur utilisation :\n\nles librairies système nécessaires à l’installation des packages ne sont pas gérées ;\nles environnements virtuels ne permettent pas toujours de gérer des projets faisant intervenir différents langages de programmation ;\ndevoir installer conda, Python, et les packages nécessaires à chaque changement d’environnement peut être assez long et pénible en pratique ;\ndans un environnement de production, gérer des environnements virtuels différents pour chaque projet peut s’avérer rapidement complexe pour les administrateurs système.\n\nLa technologie des conteneurs permet de répondre à ces différents problèmes."
  },
  {
    "objectID": "chapters/portability.html#introduction-1",
    "href": "chapters/portability.html#introduction-1",
    "title": "Portabilité",
    "section": "Introduction",
    "text": "Introduction\nAvec les environnements virtuels, l’idée était de permettre à chaque utilisateur potentiel de notre projet d’installer sur son environnement d’exécution les packages nécessaires à la bonne exécution du projet.\nNéanmoins, comme on l’a vu, cette approche ne garantit pas une reproductibilité parfaite et a l’inconvénient de demander beaucoup de gestion manuelle.\nChangeons de perspective : au lieu de distribuer une recette permettant à l’utilisateur de recréer l’environnement nécessaire sur sa machine, ne pourrait-on pas directement distribuer à l’utilisateur une machine contenant l’environnement pré-configuré ?\nBien entendu, on ve pas configurer et envoyer des ordinateurs portables à tous les utilisateurs potentiels d’un projet. On va donc essayer de livrer une version virtuelle de notre ordinateur. Il existe deux approches principales pour cela:\n\nLes machines virtuelles. Cette approche n’est pas nouvelle. Elle consiste à recréer, sur un serveur, un environnement informatique complet (matériel et système d’exploitation) qui réplique le comportement d’un véritable ordinateur.\nLes conteneurs, une solution plus légère pour empaqueter un environnement informatique afin de répliquer le comportement d’une machine réelle."
  },
  {
    "objectID": "chapters/portability.html#fonctionnement-1",
    "href": "chapters/portability.html#fonctionnement-1",
    "title": "Portabilité",
    "section": "Fonctionnement",
    "text": "Fonctionnement\nLes machines virtuelles ont l’inconvénient d’être assez lourdes, et complexes à répliquer et distribuer. Pour pallier ces différentes limites, les conteneurs se sont imposés au cours de la dernière décennie. Toutes les infrastructures cloud modernes ont progressivement abandonné les machines virtuelles pour privilégier des conteneurs pour les raisons que nous allons évoquer ultérieurement.\nComme les machines virtuelles, les conteneurs permettent d’empaqueter complètement l’environnement (librairies systèmes, application, configuration) qui permet de faire tourner l’application. Mais à l’inverse d’une machine virtuelle, le conteneur n’inclut pas de système d’exploitation propre, il utilise celui de la machine hôte qui l’exécute. Cela signifie que si on désire reproduire le comportement d’une machine Windows, il n’est pas nécessaire d’avoir un gros serveur avec Windows. Il est tout à fait possible d’avoir un serveur Linux, ce qui est la norme, et de répliquer le comportement d’une machine Windows à l’intérieur. A l’inverse, cela peut permettre de tester des configurations Linux ou Mac sur un ordinateur Windows. C’est le rôle du logiciel de conteneurisation qui fera la traduction entre les instructions voulues par le software et le système d’exploitation du hardware.\nLa technologie des conteneurs permet ainsi de garantir une très forte reproductibilité tout en restant suffisamment légère pour permettre une distribution et un déploiement simple aux utilisateurs. En effet, l’adhérence forte entre un système d’exploitation et un logiciel dans l’approche des machines virtuelles rend plus complexe la montée en charge d’un serveur. Si plus d’utilisateurs commencent à utiliser l’application, il est nécessaire de s’assurer que des serveurs correspondant aux besoins de l’application (système d’exploitation, configurations techniques, etc.) soient disponibles. Avec les conteneurs, la montée en charge est plus simple puisque les restrictions matérielles sont moins fortes: ajouter un serveur Linux avec les logiciels adéquats peut être suffisant.\n\n\n\nDifférences entre l’approche conteneurs (gauche) et l’approche machines virtuelles (droite) (Source : docker.com )\n\n\nDu point de vue de l’utilisateur, la différence n’est pas toujours perceptible pour des besoins standards. L’utilisateur accédera à son application par une application dédiée (un navigateur, un logiciel spécialisé…) et les calculs issus des opérations effectuées seront déportés sur les serveurs où est hébergée cette application. Néanmoins, pour l’organisation qui gère cette application, les conteneurs offriront plus de liberté et de flexibilité comme nous l’avons évoqué."
  },
  {
    "objectID": "chapters/portability.html#docker-limplémentation-standard",
    "href": "chapters/portability.html#docker-limplémentation-standard",
    "title": "Portabilité",
    "section": "Docker , l’implémentation standard",
    "text": "Docker , l’implémentation standard\nComme nous l’avons évoqué, le logiciel de conteneurisation fait office de couche tampon entre les applications et le système d’exploitation du serveur.\nComme pour les environnements virtuels, il existe différentes implémentations de la technologie des conteneurs. En pratique, l’implémentation offerte par Docker est devenue largement prédominante, au point qu’il est devenu courant d’utiliser de manière interchangeable les termes “conteneuriser” et “Dockeriser” une application. C’est donc cette implémentation que nous allons étudier et utiliser dans ce cours.\n\nInstallation et environnements bacs à sable\nDocker  est un logiciel qui peut s’installer sur différents système d’exploitation. Les instructions sont détaillées dans la documentation officielle. Il est nécessaire d’avoir des droits administrateurs sur son poste pour pouvoir faire cette installation.\n\n\n\n\n\n\nBesoins en espace disque\n\n\n\n\n\nIl est également recommandé d’avoir de l’espace disque libre car certaines images (concept sur lequel nous reviendrons), une fois décompressées et construites, peuvent être lourdes selon la richesse des librairies installées dessus. Elles peuvent rapidement prendre quelques Gigas d’espace disque.\nCeci est néanmoins à comparer à l’espace disque monstrueux que peut prendre un système d’exploitation complet (autour de 15GB pour Ubuntu ou Mac OS, 20GB par exemple pour Windows…). La distribution Linux la plus minimaliste (Alpine) ne fait que 3Mo compressée et 5Mo une fois décompressée.\n\n\n\nIl existe également des environnements en ligne gratuits pouvant servir de bacs à sable s’il n’est pas possible pour vous d’installer Docker. Play with Docker permet de tester en ligne Docker comme on pourrait le faire sur une installation personnelle. Néanmoins, ces services sont limités: la taille maximale des images décompressées est limitée à 2Go, les services connaissent des coupures en cas d’utilisation massive…\nComme nous le verrons ultérieurement, l’utilisation de Docker en interactif est pratique pour apprendre et expérimenter. Néanmoins, en pratique, on utilise principalement Docker par le biais de l’intégration continue via Github Actions ou Gitlab CI.\n\n\nPrincipes\n\n\n\nSource : k21academy.com\n\n\nUn conteneur Docker est mis à disposition sous la forme d’une image, c’est à dire d’un fichier binaire qui contient l’environnement nécessaire à l’exécution de l’application. Celui-ci est mis à disposition de tous sous une forme compressée sur un dépôt d’images publiques (le plus connu est Dockerhub).\nAvant de mettre à disposition une image, il est nécessaire de la construire (build). Pour cela on utilise un Dockerfile, un fichier texte qui contient la recette — sous forme de commandes Linux — de construction de l’environnement.\nUne fois l’image construite, il est possible de faire deux actions:\n\nLa lancer (run) en local. Cela permet de tester l’application, éventuellement de la corriger en cas de mauvais fonctionnement. Le lancement de l’application permet de faire tourner l’image dans un environnement isolé qu’on appelle le conteneur (container), une instance vivante de l’image en quelques sortes7.\nLa mettre à disposition sur un dépôt public pour permettre à d’autres (ou à soi-même) de la tester. L’image va être uploadée (push) sur un dépôt (registry), public ou privé, depuis lequel les utilisateurs vont pouvoir télécharger l’image (pull).\n\n\n\n\n\n\n\nMettre à disposition son image Docker\n\n\n\n\n\nLe répertoire d’images publiques le plus connu est DockerHub. Il s’agit d’un répertoire où n’importe qui peut proposer une image Docker, associée ou non à un projet disponible sur Github ou Gitlab. Il est possible de mettre à disposition de manière manuelle des images mais, comme nous le montrerons dans le chapitre sur la mise en production, il est beaucoup plus pratique d’utiliser des fonctionalités d’interaction automatique entre DockerHub et un dépôt GitHub."
  },
  {
    "objectID": "chapters/portability.html#application",
    "href": "chapters/portability.html#application",
    "title": "Portabilité",
    "section": "Application",
    "text": "Application\nAfin de présenter l’utilisation de Docker en pratique, nous allons présenter les différentes étapes permettant de “dockeriser” une application web minimaliste construite avec le framework Python Flask8.\nLa structure de notre projet est la suivante.\n├── myflaskapp\n│   ├── Dockerfile\n│   ├── hello-world.py\n│   └── requirements.txt\nLe script hello-world.py contient le code d’une application minimaliste, qui affiche simplement “Hello, World!” sur une page web. Nous verrons dans l’application fil rouge comment construire une application interactive plus complète.\n\n\nhello-world.py\n\nfrom flask import Flask\n\napp = Flask(__name__)\n\n\n@app.route(\"/\")\ndef hello_world():\n    return \"&lt;p&gt;Hello, World!&lt;/p&gt;\"\n\nPour faire tourner l’application, il nous faut donc à la fois Python et le package Flask. Il est donc nécessaire de contrôler l’environnement virtuel autour de Python ce qui va impliquer:\n\nInstaller Python ;\nInstaller les packages nécessaires à l’exécution de notre code. En l’occurrence, on n’a besoin que de Flask.\n\nSi la version de Python utilisée par notre application nous importe peu, il est plus simple d’adopter un environnement virtuel venv que conda. Nous allons donc proposer d’utiliser ceci ce qui tombe bien car nous avons déjà notre requirements.txt qui prend la forme suivante:\n\n\nrequirements.txt\n\nFlask==2.1.1\n\nCes installations en deux temps (Python et packages nécessaires) doivent être spécifiées dans le Dockerfile (cf. section suivante)."
  },
  {
    "objectID": "chapters/portability.html#dockerfile",
    "href": "chapters/portability.html#dockerfile",
    "title": "Portabilité",
    "section": "Le Dockerfile",
    "text": "Le Dockerfile\nPour faire un plat, il faut une recette. Pour faire une image image Docker, il faut un Dockerfile.\nCe fichier texte contient une série de commandes qui permettent de construire l’image. Ces fichiers peuvent être plus ou moins complexes selon l’application que l’on cherche à conteneuriser, mais leur structure est assez normalisée.\nL’idée est de partir d’une couche de base (une distribution Linux minimaliste) et y ajouter des couches en fonction des besoins de notre application.\nPour illustrer cela, analysons ligne à ligne le Dockerfile nécessaire pour construire une image Docker de notre application Flask.\n#| filename: Dockerfile\n\n1FROM ubuntu:20.04\n\nRUN apt-get update -y && \\\n2    apt-get install -y python3-pip python3-dev\n\n3WORKDIR /app\n\n4COPY requirements.txt /app/requirements.txt\nRUN pip install -r requirements.txt\n\nCOPY . /app\n\n5ENV FLASK_APP=\"hello-world.py\"\n6EXPOSE 5000\n\n7CMD [\"flask\", \"run\", \"--host=0.0.0.0\"]\n\n1\n\nFROM : spécifie l’image de base. Une image Docker hérite toujours d’une image de base. Ici, on choisit l’image Ubuntu version 20.04, tout va donc se passer comme si l’on développait sur une machine virtuelle vierge ayant pour système d’exploitation Ubuntu 20.04  ;\n\n2\n\nRUN : lance une commande Linux. Ici, on met d’abord à jour la liste des packages téléchargeables via apt, puis on installe Python  ainsi que des librairies système nécessaires au bon fonctionnement de notre application ;\n\n3\n\nWORKDIR : spécifie le répertoire de travail de l’image. Ainsi, toutes les commandes suivantes seront exécutées depuis ce répertoire. C’est l’équivalent Docker de la commande cd (voir Linux 101) ;\n\n4\n\nCOPY : copie un fichier local sur l’image Docker. Cela est lié à la manière dont fonctionne Docker. Pour ne pas polluer l’image de fichiers non nécessaires (qui affecteront de manière incidente sa configuration et le poids de celle-ci), par défaut, votre image ne contient pas de fichiers de votre projet. Si certains sont nécessaires pour construire l’image, il faut explicitement le dire à Docker. Ici, on copie d’abord le fichier requirements.txt du projet, qui spécifie les dépendances Python de notre application, puis on les installe avec une commande RUN. La seconde instruction COPY copie le répertoire du projet sur l’image ;\n\n5\n\nENV : crée une variable d’environnement qui sera accessible à l’application dans le conteneur. Ici, on définit une variable d’environnement attendue par Flask, qui spécifie le nom du script permettant de lancer l’application ;\n\n6\n\nEXPOSE : informe Docker que le conteneur “écoute” sur le port 5000, qui est le port par défaut utilisé par le serveur web de Flask. Ceci est lié à la nature du fonctionnement de Flask qui lance un localhost sur un port donné, en l’occurrence le port 5000. ;\n\n7\n\nCMD : spécifie la commande que doit exécuter le conteneur lors de son lancement. Il s’agit d’une liste, qui contient les différentes parties de la commande sous forme de chaînes de caractères. Ici, on lance la commande flask run qui sait automatiquement quelle application lancer du fait de la commande ENV spécifiée précédemment. On ajoute l’option --host=0.0.0.0 pour que ce soit l’application déployée sur le localhost (notre application Flask) qui soit mis à disposition de l’utilisateur final.\n\n\n\n\n\n\n\n\nChoisir l’image de base\n\n\n\n\n\nDans l’idéal, on essaie de partir d’une couche la plus petite possible pour limiter la taille de l’image finalement obtenue. Il n’est en effet pas nécessaire d’utiliser une image disposant de  si on n’utilise que du .\nEn général, les différents langages proposent des images de petite taille dans lequel un interpréteur est déjà installé et proprement configuré. Dans cette application, on aurait par exemple pu utiliser l’image python:3.9-slim-buster.\n\n\n\nAvec la première commande RUN du Dockerfile, nous installons Python mais aussi des librairies système nécessaires au bon fonctionnement de l’application. Mais comment les avons-nous trouvées ?\nPar essai et erreur. Lors de l’étape de build que l’on verra juste après, le moteur Docker va essayer de construire l’image selon les spécifications du Dockerfile, comme s’il partait d’un ordinateur vide contenant simplement Ubuntu 20.04. Si des librairies manquent, le processus de build devrait renvoyer une erreur, qui s’affichera dans les logs de l’application, affichés par défaut dans la console. Quand on a de la chance, les logs décrivent explicitement les librairies système manquantes. Mais souvent, les messages d’erreur ne sont pas très explicites, et il faut alors les copier dans un moteur de recherche bien connu pour trouver la réponse, souvent sur StackOverflow.\nIl est recommandé, avant d’essayer de créer une image Docker, de passer par l’étape intermédiaire dans la démarche de reproductibilité qu’est la création d’un script shell (.sh). Cette approche graduelle est illustrée dans l’application fil rouge.\n\n\n\n\n\n\nL’instruction COPY\n\n\n\n\n\nLa recette présente dans le Dockerfile peut nécessiter l’utilisation de fichiers appartenant au dossier de travail. Pour que Docker les trouve dans son contexte, il est nécessaire d’introduire une commande COPY. C’est un petit peu comme pour la cuisine: pour utiliser un produit dans une recette, il faut le sortir du frigo (fichier local) et le mettre sur la table.\n\n\n\nNous n’avons ici vu que les commandes Docker les plus fréquentes, il en existe beaucoup d’autres en pratique. N’hésitez pas à consulter la documentation officielle pour comprendre leur utilisation."
  },
  {
    "objectID": "chapters/portability.html#build",
    "href": "chapters/portability.html#build",
    "title": "Portabilité",
    "section": "Construction d’une image Docker",
    "text": "Construction d’une image Docker\nPour construire une image à partir d’un Dockerfile, il suffit d’utiliser la commande docker build depuis la ligne de commande9. Il faut ensuite spécifier deux éléments importants :\n\nle build context. Il faut indiquer à Docker le chemin de notre projet, qui doit contenir le Dockerfile. En pratique, il est plus simple de se mettre dans le dossier du projet via la commande cd, puis de passer . comme build context pour indiquer à Docker de build “d’ici” ;\nle tag, c’est à dire le nom de l’image. Tant que l’on utilise Docker en local, le tag importe peu. On verra par la suite que la structure du tag a de l’importance lorsque l’on souhaite exporter ou importer une image Docker à partir d’un dépôt distant.\n\nRegardons ce qui se passe en pratique lorsque l’on essaie de construire notre image. Le tag de celle-ci est myflaskapp:\n\n\nterminal\n\n$ docker build -t myflaskapp .\n\nSending build context to Docker daemon     47MB\nStep 1/8 : FROM ubuntu:20.04\n ---&gt; 825d55fb6340\nStep 2/8 : RUN apt-get update && apt-get install -y python3-pip python3-dev\n ---&gt; Running in 92b42d579cfa\n...\ndone.\nRemoving intermediate container 92b42d579cfa\n ---&gt; 8826d53e3c01\nStep 3/8 : WORKDIR /app\n ---&gt; Running in 153b32893c23\nRemoving intermediate container 153b32893c23\n ---&gt; 7b4d22021986\nStep 4/8 : COPY requirements.txt /app/requirements.txt\n...\nSuccessfully built 125bd8da70ff\nSuccessfully tagged myflaskapp:latest\nLe moteur Docker essaie de construire notre image séquentiellement à partir des commandes spécifiées dans le Dockerfile. S’il rencontre une erreur, la procédure s’arrête, et il faut alors trouver la source du problème dans les logs et adapter le Dockerfile en conséquence.\nSi tout se passe bien, Docker nous indique que le build a réussi et l’image est prête à être utilisée. On peut vérifier que l’image est bien disponible à l’aide de la commande docker images.\n\n\nterminal\n\n$ docker images\n\nREPOSITORY                               TAG       IMAGE ID       CREATED          SIZE\nmyflaskapp                               latest    57d2f410a631   2 hours ago      433MB\nIntéressons nous un peu plus en détail aux logs de l’étape de build 👆️.\nEntre les étapes, Docker affiche des suites de lettres et de chiffres un peu ésotériques, et nous parle de conteneurs intermédiaires. En fait, il faut voir une image Docker comme un empilement de couches (layers), qui sont elles-mêmes des images Docker. Quand on hérite d’une image avec l’instruction FROM, on spécifie donc à Docker la couche initiale, sur laquelle il va construire le reste de notre environnement. A chaque étape sa nouvelle couche, et à chaque couche son hash, un identifiant unique fait de lettres et de chiffres.\nCela peut ressembler à des détails techniques, mais c’est en fait extrêmement utile en pratique car cela permet à Docker de faire du caching. Lorsqu’on développe un Dockerfile, il est fréquent de devoir modifier ce dernier de nombreuses fois avant de trouver la bonne recette, et on aimerait bien ne pas avoir à rebuild l’environnement complet à chaque fois. Docker gère cela très bien : il cache chacune des couches intermédiaires10.\nPar exemple, si l’on modifie la 5ème commande du Dockerfile, Docker va utiliser le cache pour ne pas avoir à recalculer les étapes précédentes, qui n’ont pas changé. Cela s’appelle l’“invalidation du cache” : dès lors qu’une étape du Dockerfile est modifiée, Docker va recalculer toutes les étapes suivantes, mais seulement celles-ci. Conséquence directe de cette observation : il faut toujours ordonner les étapes d’un Dockerfile de sorte à ce qui est le plus susceptible d’être souvent modifié soit à la fin du fichier, et inversement.\nPour illustrer cela, regardons ce qui se passe si l’on modifie le nom du script qui lance l’application, et donc la valeur de la variable d’environnement FLASK_APP dans le Dockerfile.\n\n\nterminal\n\n$ docker build . -t myflaskapp\n\nSending build context to Docker daemon  4.096kB\nStep 1/10 : FROM ubuntu:20.04\n ---&gt; 825d55fb6340\nStep 2/10 : ENV DEBIAN_FRONTEND=noninteractive\n ---&gt; Using cache\n ---&gt; ea1c7c083ac9\nStep 3/10 : RUN apt-get update -y &&     apt-get install -y python3-pip python3-dev\n ---&gt; Using cache\n ---&gt; 078b8ac0e1cb\nStep 4/10 : WORKDIR /app\n ---&gt; Using cache\n ---&gt; cd19632825b3\nStep 5/10 : COPY requirements.txt /app/requirements.txt\n ---&gt; Using cache\n ---&gt; 271cd1686899\nStep 6/10 : RUN pip install -r requirements.txt\n ---&gt; Using cache\n ---&gt; 3ea406fdf383\nStep 7/10 : COPY . /app\n ---&gt; 3ce5bd3a9572\nStep 8/10 : ENV FLASK_APP=\"new.py\"\n ---&gt; Running in b378d16bb605\nRemoving intermediate container b378d16bb605\n ---&gt; e1f50490287b\nStep 9/10 : EXPOSE 5000\n ---&gt; Running in ab53c461d3de\nRemoving intermediate container ab53c461d3de\n ---&gt; 0b86eca40a80\nStep 10/10 : CMD [\"flask\", \"run\", \"--host=0.0.0.0\"]\n ---&gt; Running in 340eec151a51\nRemoving intermediate container 340eec151a51\n ---&gt; 16d7a5b8db28\nSuccessfully built 16d7a5b8db28\nSuccessfully tagged myflaskapp:latest\nL’étape de build a pris quelques secondes au lieu de plusieurs minutes, et les logs montrent bien l’utilisation du cache faite par Docker : les étapes précédant le changement réutilisent les couches cachées, mais celle d’après sont recalculées."
  },
  {
    "objectID": "chapters/portability.html#execution",
    "href": "chapters/portability.html#execution",
    "title": "Portabilité",
    "section": "Exécuter (run) une image Docker",
    "text": "Exécuter (run) une image Docker\nL’étape de build a permis de créer une image Docker. Une image doit être vue comme un template : elle permet d’exécuter l’application sur n’importe quel environnement d’exécution sur lequel un moteur Docker est installé.\nEn l’état, on a donc juste construit, mais rien lancé : notre application ne tourne pas encore. Pour cela, il faut créer un conteneur, i.e. une instance vivante de l’image qui permet d’accéder à l’application. Cela se fait via la commande docker run.\n\n\nterminal\n\n$ docker run -d -p 8000:5000 myflaskapp:latest\n6a2ab0d82d051a3829b182ede7b9152f7b692117d63fa013e7dfe6232f1b9e81\n\nDétaillons la syntaxe de cette commande :\n\ndocker run tag : lance l’image dont on fournit le tag. Le tag est de la forme repository/projet:version. Ici, il n’y a pas de repository puisque tout est fait en local ;\n-d : “détache” le conteneur du terminal qui le lance ;\n-p : effectue un mapping entre un port de la machine qui exécute le conteneur, et le conteneur lui-même. Notre conteneur écoute sur le port 5000, et l’on veut que notre application soit exposée sur le port 8000 de notre machine.\n\nLorsque l’on exécute docker run, Docker nous répond simplement un hash qui identifie le conteneur que l’on a lancé. On peut vérifier qu’il tourne bien avec la commande docker ps, qui renvoie toutes les informations associées au conteneur.\n\n\nterminal\n\n$ docker ps\n\nCONTAINER ID   IMAGE        COMMAND                  CREATED         STATUS         PORTS                                   NAMES\n6a2ab0d82d05   myflaskapp   \"flask run --host=0.…\"   7 seconds ago   Up 6 seconds   0.0.0.0:8000-&gt;5000/tcp, :::8000-&gt;5000/tcp   vigorous_kalam\nLes conteneurs peuvent être utilisés pour réaliser des tâches très différentes. Grossièrement, on peut distinguer deux situations :\n\nle conteneur effectue une tâche “one-shot”, c’est à dire une opération qui a vocation à s’effectuer en un certain temps, suite à quoi le conteneur peut s’arrêter ;\nle conteneur exécute une application. Dans ce cas, on souhaite que le conteneur reste en vie aussi longtemps que l’on souhaite utiliser l’application en question.\n\nDans notre cas d’application, on se situe dans la seconde configuration puisque l’on veut exécuter une application web. Lorsque l’application tourne, elle expose sur le localhost, accessible depuis un navigateur web — en l’occurence, à l’adresse localhost:5000/. Les calculs sont effectués sur un serveur local, et le navigateur sert d’interface avec l’utilisateur — comme lorsque vous utilisez un notebook Jupyter par exemple.\nFinalement, on a pu développer et exécuter une application complète sur notre environnement local, sans avoir eu à installer quoi que ce soit sur notre machine personnelle, à part Docker."
  },
  {
    "objectID": "chapters/portability.html#exp-docker",
    "href": "chapters/portability.html#exp-docker",
    "title": "Portabilité",
    "section": "Exporter une image Docker",
    "text": "Exporter une image Docker\nJusqu’à maintenant, toutes les commandes Docker que nous avons exécutées se sont passées en local. Ce mode de fonctionnement peut être intéressant pour la phase de développement et d’expérimentation. Mais comme on l’a vu, un des gros avantages de Docker est la facilité de redistribution des images construites, qui peuvent ensuite être utilisées par de nombreux utilisateurs pour faire tourner notre application. Pour cela, il nous faut uploader notre image sur un dépôt distant, à partir duquel les utilisateurs pourront la télécharger.\nPlusieurs possibilités existent selon le contexte de travail : une entreprise peut avoir un dépôt interne par exemple. Si le projet est open source, on peut utiliser le DockerHub.\nLe workflow pour uploader une image est le suivant :\n\ncréer un compte sur DockerHub ;\ncréer un projet (public) sur DockerHub, qui va héberger les images Docker du projet ;\nsur un terminal, utiliser docker login pour s’authentifier au DockerHub ;\non va modifier le tag que l’on fournit lors du build pour spécifier le chemin attendu. Dans notre cas : docker build -t compte/projet:version . ;\nuploader l’image avec docker push compte/projet:version\n\n\n\nterminal\n\n$ docker push avouacr/myflaskapp:1.0.0\n\nThe push refers to repository [docker.io/avouacr/myflaskapp]\n71db96687fe6: Pushed\n624877ac887b: Pushed\nea4ab6b86e70: Pushed\nb5120a5bc48d: Pushed\n5fa484a3c9d8: Pushed\nc5ec52c98b31: Pushed\n1.0.0: digest: sha256:b75fe53fd1990c3092ec41ab0966a9fbbb762f3047957d99327cc16e27c68cc9 size: 1574"
  },
  {
    "objectID": "chapters/portability.html#imp-docker",
    "href": "chapters/portability.html#imp-docker",
    "title": "Portabilité",
    "section": "Importer une image Docker",
    "text": "Importer une image Docker\nEn supposant que le dépôt utilisé pour uploader l’image est public, la procédure que doit suivre un utilisateur pour la télécharger se résume à utiliser la commande docker pull compte/projet:version\n\n\nterminal\n\n$ docker pull avouacr/myflaskapp:1.0.0\n\n1.0.0: Pulling from avouacr/myflaskapp\ne0b25ef51634: Pull complete\nc0445e4b247e: Pull complete\n48ba4e71d1c2: Pull complete\nffd728caa80a: Pull complete\n906a95f00510: Pull complete\nd7d49b6e17ab: Pull complete\nDigest: sha256:b75fe53fd1990c3092ec41ab0966a9fbbb762f3047957d99327cc16e27c68cc9\nStatus: Downloaded newer image for avouacr/myflaskapp:1.0.0\ndocker.io/avouacr/myflaskapp:1.0.0\nDocker télécharge et extrait chacune des couches qui constituent l’image (ce qui peut parfois être long). L’utilisateur peut alors créer un conteneur à partir de l’image, en utilisant docker run comme illustré précédemment."
  },
  {
    "objectID": "chapters/portability.html#aide-mémoire-1",
    "href": "chapters/portability.html#aide-mémoire-1",
    "title": "Portabilité",
    "section": "Aide-mémoire",
    "text": "Aide-mémoire\nVoici une première aide-mémoire sur les principales commandes à intégrer dans un Dockerfile:\n\n\n\n\n\n\n\nCommande\nPrincipe\n\n\n\n\nFROM &lt;image&gt;:&lt;tag&gt;\nUtiliser comme point de départ l’image &lt;image&gt; ayant le tag &lt;tag&gt;\n\n\nRUN &lt;instructions&gt;\nUtiliser la suite d’instructions &lt;instructions&gt; dans un terminal Linux. Pour passer plusieurs commandes dans un RUN, utiliser &&. Cette suite de commande peut avoir plusieurs lignes, dans ce cas, mettre \\ en fin de ligne\n\n\nCOPY &lt;source&gt; &lt;dest&gt;\nRécupérer le fichier présent dans le système de fichier local à l’emplacement &lt;source&gt; pour que les instructions ultérieures puissent le trouver à l’emplacement &lt;source&gt;\n\n\nADD &lt;source&gt; &lt;dest&gt;\nGlobalement, même rôle que COPY\n\n\nENV MY_NAME=\"John Doe\"\nCréation d’une variable d’environnement (qui devient disponible sous l’alias $MY_NAME)\n\n\nWORKDIR &lt;path&gt;\nDéfinir le working directory du conteuneur Docker dans le dossier &lt;path&gt;\n\n\nUSER &lt;username&gt;\nCréation d’un utilisateur non root nommé &lt;username&gt;\n\n\nEXPOSE &lt;PORT_ID&gt;\nLorsqu’elle tournera, l’application sera disponible depuis le port &lt;PORT_ID&gt;\n\n\nCMD [\"executable\",\"param1\",\"param2\"]\nAu lancement de l’instance Docker la commande executable (par exemple python3) sera lancée avec les paramètres additionnels fournis\n\n\n\nUne seconde aide-mémoire pour les principales commandes Linux est disponible ci-dessous:\n\n\n\n\n\n\n\nCommande\nPrincipe\n\n\n\n\ndocker build . -t &lt;tag&gt;\nConstruire l’image Docker à partir des fichiers dans le répertoire courant (.) en l’identifiant avec le tag &lt;tag&gt;\n\n\ndocker run -it &lt;tag&gt;\nLancer l’instance docker identifiée par &lt;tag&gt;\n\n\ndocker images\nLister les images disponibles sur la machine et quelques unes de leurs propriétés (tags, volume, etc.)\n\n\ndocker system prune\nFaire un peu de ménage dans ses images Docker (bien réfléchir avant de faire tourner cette commande)"
  },
  {
    "objectID": "chapters/portability.html#footnotes",
    "href": "chapters/portability.html#footnotes",
    "title": "Portabilité",
    "section": "Footnotes",
    "text": "Footnotes\n\n\nNous reviendrons plus tard sur la manière dont la mise à disposition de packages sous forme précompilée par le biais de wheels offre une solution à ce problème.↩︎\nS’il est impossible de suivre les évolutions de tous les packages de la data science, il est recommandé de faire une veille sur les principaux comme Pandas ou Scikit en suivant les release notes des versions majeures qui introduisent généralement des non-compatibilités.↩︎\nLe solver de conda, qui est un algorithme de recherche de chemin optimal dans des graphes pour gérer les (in)compatibilités de versions, est lourd à mettre en oeuvre. Le projet mamba a permis d’offrir une réimplémentation de Conda en C++ par le biais d’un solver plus efficace. Cela a permis de franchement accélérer la vitesse d’installation des packages par le biais de conda. Néanmoins, l’accès de plus en plus fréquent à des wheels a permis un retour en grâce des environnements virtuels implémentés par venv au cours des dernières années.↩︎\nCela signifie que si on ouvre un nouveau terminal, il faudra à nouveau activer cet environnement si on désire l’utiliser. Si on désire activer par défaut un environnement, il est possible de configurer le terminal pour qu’il active automatiquement un environnement spécifique lors de son ouverture. Cela peut être réalisé en modifiant les fichiers de configuration du shell, par le biais par exemple du script .bashrc sur Linux.↩︎\nD’ailleurs, si vous utilisez pip sur le SSPCloud, c’est ce que vous faites, sans vous en rendre compte.↩︎\nCes répertoires sont, dans le langage conda, les canaux. Le canal par défaut est maintenu par les développeurs dAnaconda. Cependant, pour en assurer la stabilité, ce canal a une forte inertie. La conda-forge a émergé pour offrir plus de flexibilité aux développeurs de package qui peuvent ainsi mettre à disposition des versions plus récentes de leurs packages, comme sur PyPI.↩︎\nPar abus de langage, on mélange souvent les termes “image” et “conteneur”. En pratique ces deux concepts sont très proches. Le second correspond à la version vivante du premier.↩︎\nFlask est un framework permettant de déployer, de manière légère, des applications reposant sur Python.↩︎\nSi vous êtes sur Windows, les lignes de commande disponibles par défaut (cmd ou Powershell) sont peu pratiques. Il est recommandé d’utiliser la ligne de commande de Git Bash (une émulation minimaliste d’une ligne de commande Linux) qui vous permettra de faire des opérations en ligne de commande.↩︎\nLe cache est très pratique pour une construction expérimentale en local. Malheureusement, lorsqu’on passe par des services d’intégration continue, l’utilisation du cache est moins évidente car chaque run se fait sur une machine indépendante de la précédente.↩︎"
  },
  {
    "objectID": "chapters/galerie/2024/model.html",
    "href": "chapters/galerie/2024/model.html",
    "title": "Modèle de carte",
    "section": "",
    "text": "Une description en quelques mots du projet\n\n\n\nReuseCC BY-NC 4.0"
  },
  {
    "objectID": "chapters/galerie/2024/resultAthle.html",
    "href": "chapters/galerie/2024/resultAthle.html",
    "title": "ResultAthle",
    "section": "",
    "text": "ResultAthle est un projet visant à rendre les outils statistiques d’analyse de performance plus accessibles au niveau amateur en athlétisme. Il aborde les défis de la collecte de résultats et le manque de statistiques descriptives accessibles pour les clubs.\n\n\n\nReuseCC BY-NC 4.0"
  }
]